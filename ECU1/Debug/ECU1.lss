
ECU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  000044d6  0000456a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  008001a0  008001a0  000046aa  2**0
                  ALLOC
  3 .stab         00003f9c  00000000  00000000  000046ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017df  00000000  00000000  00008648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009f67  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000cc0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d9b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000db18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 39 1b 	jmp	0x3672	; 0x3672 <__vector_4>
      14:	0c 94 06 1b 	jmp	0x360c	; 0x360c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a0 1a 	jmp	0x3540	; 0x3540 <__vector_9>
      28:	0c 94 6d 1a 	jmp	0x34da	; 0x34da <__vector_10>
      2c:	0c 94 3a 1a 	jmp	0x3474	; 0x3474 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3b       	cpi	r26, 0xBD	; 189
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <main>
      8a:	0c 94 69 22 	jmp	0x44d2	; 0x44d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e8       	ldi	r26, 0x87	; 135
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 15 22 	jmp	0x442a	; 0x442a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 15 22 	jmp	0x442a	; 0x442a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ed 21 	jmp	0x43da	; 0x43da <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e8       	ldi	r24, 0x87	; 135
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 15 22 	jmp	0x442a	; 0x442a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 15 22 	jmp	0x442a	; 0x442a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 15 22 	jmp	0x442a	; 0x442a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fd 21 	jmp	0x43fa	; 0x43fa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 19 22 	jmp	0x4432	; 0x4432 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Control>:
 * 					needed time it turns off the timer and reset all used global variables
 * [No Inputs]:
 * [No Returns]:
 */
void Timer1_Control(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_timer_counts++;
     b4e:	80 91 a3 01 	lds	r24, 0x01A3
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 a3 01 	sts	0x01A3, r24
	if(g_timer_counts == 10)
     b58:	80 91 a3 01 	lds	r24, 0x01A3
     b5c:	8a 30       	cpi	r24, 0x0A	; 10
     b5e:	31 f4       	brne	.+12     	; 0xb6c <Timer1_Control+0x26>
	{
		TIMER1_Deinit();
     b60:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <TIMER1_Deinit>
		g_timer_counts = 0;
     b64:	10 92 a3 01 	sts	0x01A3, r1
		Timer1_ON = 0;
     b68:	10 92 a2 01 	sts	0x01A2, r1
	}
}
     b6c:	cf 91       	pop	r28
     b6e:	df 91       	pop	r29
     b70:	08 95       	ret

00000b72 <HMIECU1_init>:
 * 					Initialization Function to initialize any device
 * [No Inputs]:
 * [No Returns]:
 */
void HMIECU1_init(void)
{
     b72:	df 93       	push	r29
     b74:	cf 93       	push	r28
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
	sei(); /*Enable Global Interrupt*/
     b7a:	78 94       	sei
	UART_init(&UART_USART_Configuration);
     b7c:	8f e8       	ldi	r24, 0x8F	; 143
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 d8 1f 	call	0x3fb0	; 0x3fb0 <UART_init>
	LCD_init();
     b84:	0e 94 ed 18 	call	0x31da	; 0x31da <LCD_init>
	TIMER1_setCallBackFunctionCOMP(Timer1_Control);	/*Set Timer1 (Compare mode) Call back function*/
     b88:	83 ea       	ldi	r24, 0xA3	; 163
     b8a:	95 e0       	ldi	r25, 0x05	; 5
     b8c:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <TIMER1_setCallBackFunctionCOMP>
}
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <Hello_Message>:
 * 					Function to print hello message to the user
 * [No Inputs]:
 * [No Returns]:
 */
void Hello_Message(void)
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	6c 97       	sbiw	r28, 0x1c	; 28
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
	LCD_displayString("Door Locker");
     baa:	80 e6       	ldi	r24, 0x60	; 96
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"Security System");
     bb2:	2c e6       	ldi	r18, 0x6C	; 108
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	60 e0       	ldi	r22, 0x00	; 0
     bba:	a9 01       	movw	r20, r18
     bbc:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <LCD_displayStringRowColumn>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	aa e7       	ldi	r26, 0x7A	; 122
     bc6:	b4 e4       	ldi	r27, 0x44	; 68
     bc8:	89 8f       	std	Y+25, r24	; 0x19
     bca:	9a 8f       	std	Y+26, r25	; 0x1a
     bcc:	ab 8f       	std	Y+27, r26	; 0x1b
     bce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd0:	69 8d       	ldd	r22, Y+25	; 0x19
     bd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	4a ef       	ldi	r20, 0xFA	; 250
     bde:	54 e4       	ldi	r21, 0x44	; 68
     be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	8d 8b       	std	Y+21, r24	; 0x15
     bea:	9e 8b       	std	Y+22, r25	; 0x16
     bec:	af 8b       	std	Y+23, r26	; 0x17
     bee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bf0:	6d 89       	ldd	r22, Y+21	; 0x15
     bf2:	7e 89       	ldd	r23, Y+22	; 0x16
     bf4:	8f 89       	ldd	r24, Y+23	; 0x17
     bf6:	98 8d       	ldd	r25, Y+24	; 0x18
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e8       	ldi	r20, 0x80	; 128
     bfe:	5f e3       	ldi	r21, 0x3F	; 63
     c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c04:	88 23       	and	r24, r24
     c06:	2c f4       	brge	.+10     	; 0xc12 <Hello_Message+0x7c>
		__ticks = 1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9c 8b       	std	Y+20, r25	; 0x14
     c0e:	8b 8b       	std	Y+19, r24	; 0x13
     c10:	3f c0       	rjmp	.+126    	; 0xc90 <Hello_Message+0xfa>
	else if (__tmp > 65535)
     c12:	6d 89       	ldd	r22, Y+21	; 0x15
     c14:	7e 89       	ldd	r23, Y+22	; 0x16
     c16:	8f 89       	ldd	r24, Y+23	; 0x17
     c18:	98 8d       	ldd	r25, Y+24	; 0x18
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	3f ef       	ldi	r19, 0xFF	; 255
     c1e:	4f e7       	ldi	r20, 0x7F	; 127
     c20:	57 e4       	ldi	r21, 0x47	; 71
     c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c26:	18 16       	cp	r1, r24
     c28:	4c f5       	brge	.+82     	; 0xc7c <Hello_Message+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2a:	69 8d       	ldd	r22, Y+25	; 0x19
     c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e2       	ldi	r20, 0x20	; 32
     c38:	51 e4       	ldi	r21, 0x41	; 65
     c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9c 8b       	std	Y+20, r25	; 0x14
     c50:	8b 8b       	std	Y+19, r24	; 0x13
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <Hello_Message+0xdc>
     c54:	88 ec       	ldi	r24, 0xC8	; 200
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9a 8b       	std	Y+18, r25	; 0x12
     c5a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5c:	89 89       	ldd	r24, Y+17	; 0x11
     c5e:	9a 89       	ldd	r25, Y+18	; 0x12
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <Hello_Message+0xca>
     c64:	9a 8b       	std	Y+18, r25	; 0x12
     c66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c68:	8b 89       	ldd	r24, Y+19	; 0x13
     c6a:	9c 89       	ldd	r25, Y+20	; 0x14
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9c 8b       	std	Y+20, r25	; 0x14
     c70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c72:	8b 89       	ldd	r24, Y+19	; 0x13
     c74:	9c 89       	ldd	r25, Y+20	; 0x14
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	69 f7       	brne	.-38     	; 0xc54 <Hello_Message+0xbe>
     c7a:	14 c0       	rjmp	.+40     	; 0xca4 <Hello_Message+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7c:	6d 89       	ldd	r22, Y+21	; 0x15
     c7e:	7e 89       	ldd	r23, Y+22	; 0x16
     c80:	8f 89       	ldd	r24, Y+23	; 0x17
     c82:	98 8d       	ldd	r25, Y+24	; 0x18
     c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9c 8b       	std	Y+20, r25	; 0x14
     c8e:	8b 8b       	std	Y+19, r24	; 0x13
     c90:	8b 89       	ldd	r24, Y+19	; 0x13
     c92:	9c 89       	ldd	r25, Y+20	; 0x14
     c94:	98 8b       	std	Y+16, r25	; 0x10
     c96:	8f 87       	std	Y+15, r24	; 0x0f
     c98:	8f 85       	ldd	r24, Y+15	; 0x0f
     c9a:	98 89       	ldd	r25, Y+16	; 0x10
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <Hello_Message+0x106>
     ca0:	98 8b       	std	Y+16, r25	; 0x10
     ca2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	LCD_clearScreen();
     ca4:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
	LCD_displayString(" ** Welcome ** ");
     ca8:	8c e7       	ldi	r24, 0x7C	; 124
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	aa e7       	ldi	r26, 0x7A	; 122
     cb6:	b4 e4       	ldi	r27, 0x44	; 68
     cb8:	8b 87       	std	Y+11, r24	; 0x0b
     cba:	9c 87       	std	Y+12, r25	; 0x0c
     cbc:	ad 87       	std	Y+13, r26	; 0x0d
     cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	4a ef       	ldi	r20, 0xFA	; 250
     cce:	54 e4       	ldi	r21, 0x44	; 68
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	8f 83       	std	Y+7, r24	; 0x07
     cda:	98 87       	std	Y+8, r25	; 0x08
     cdc:	a9 87       	std	Y+9, r26	; 0x09
     cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ce0:	6f 81       	ldd	r22, Y+7	; 0x07
     ce2:	78 85       	ldd	r23, Y+8	; 0x08
     ce4:	89 85       	ldd	r24, Y+9	; 0x09
     ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e8       	ldi	r20, 0x80	; 128
     cee:	5f e3       	ldi	r21, 0x3F	; 63
     cf0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf4:	88 23       	and	r24, r24
     cf6:	2c f4       	brge	.+10     	; 0xd02 <Hello_Message+0x16c>
		__ticks = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	9e 83       	std	Y+6, r25	; 0x06
     cfe:	8d 83       	std	Y+5, r24	; 0x05
     d00:	3f c0       	rjmp	.+126    	; 0xd80 <Hello_Message+0x1ea>
	else if (__tmp > 65535)
     d02:	6f 81       	ldd	r22, Y+7	; 0x07
     d04:	78 85       	ldd	r23, Y+8	; 0x08
     d06:	89 85       	ldd	r24, Y+9	; 0x09
     d08:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	3f ef       	ldi	r19, 0xFF	; 255
     d0e:	4f e7       	ldi	r20, 0x7F	; 127
     d10:	57 e4       	ldi	r21, 0x47	; 71
     d12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d16:	18 16       	cp	r1, r24
     d18:	4c f5       	brge	.+82     	; 0xd6c <Hello_Message+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d20:	9e 85       	ldd	r25, Y+14	; 0x0e
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e2       	ldi	r20, 0x20	; 32
     d28:	51 e4       	ldi	r21, 0x41	; 65
     d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	bc 01       	movw	r22, r24
     d34:	cd 01       	movw	r24, r26
     d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	9e 83       	std	Y+6, r25	; 0x06
     d40:	8d 83       	std	Y+5, r24	; 0x05
     d42:	0f c0       	rjmp	.+30     	; 0xd62 <Hello_Message+0x1cc>
     d44:	88 ec       	ldi	r24, 0xC8	; 200
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	9c 83       	std	Y+4, r25	; 0x04
     d4a:	8b 83       	std	Y+3, r24	; 0x03
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	9c 81       	ldd	r25, Y+4	; 0x04
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <Hello_Message+0x1ba>
     d54:	9c 83       	std	Y+4, r25	; 0x04
     d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d58:	8d 81       	ldd	r24, Y+5	; 0x05
     d5a:	9e 81       	ldd	r25, Y+6	; 0x06
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9e 83       	std	Y+6, r25	; 0x06
     d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d62:	8d 81       	ldd	r24, Y+5	; 0x05
     d64:	9e 81       	ldd	r25, Y+6	; 0x06
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	69 f7       	brne	.-38     	; 0xd44 <Hello_Message+0x1ae>
     d6a:	14 c0       	rjmp	.+40     	; 0xd94 <Hello_Message+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6c:	6f 81       	ldd	r22, Y+7	; 0x07
     d6e:	78 85       	ldd	r23, Y+8	; 0x08
     d70:	89 85       	ldd	r24, Y+9	; 0x09
     d72:	9a 85       	ldd	r25, Y+10	; 0x0a
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	9a 83       	std	Y+2, r25	; 0x02
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	01 97       	sbiw	r24, 0x01	; 1
     d8e:	f1 f7       	brne	.-4      	; 0xd8c <Hello_Message+0x1f6>
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
     d94:	6c 96       	adiw	r28, 0x1c	; 28
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <Enter_New_Password>:
 * 					Function to get new password from the user
 * [No Inputs]:
 * [No Returns]:
 */
void Enter_New_Password(void)
{
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	eb 97       	sbiw	r28, 0x3b	; 59
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
	unsigned char enter = 0;
     dbe:	1b ae       	std	Y+59, r1	; 0x3b
	LCD_clearScreen();
     dc0:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
	LCD_displayString("plz enter a new");
     dc4:	8c e8       	ldi	r24, 0x8C	; 140
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
	LCD_moveCursor(1,0);
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
	LCD_displayString("password: ");
     dd4:	8c e9       	ldi	r24, 0x9C	; 156
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
	for(unsigned char i=0 ; i<PASSWORD_SIZE-1 ; i++)
     ddc:	1a ae       	std	Y+58, r1	; 0x3a
     dde:	bb c0       	rjmp	.+374    	; 0xf56 <Enter_New_Password+0x1b0>
	{
		Password[i] = KEYPAD_getPressedKey();
     de0:	8a ad       	ldd	r24, Y+58	; 0x3a
     de2:	08 2f       	mov	r16, r24
     de4:	10 e0       	ldi	r17, 0x00	; 0
     de6:	0e 94 85 13 	call	0x270a	; 0x270a <KEYPAD_getPressedKey>
     dea:	f8 01       	movw	r30, r16
     dec:	ef 54       	subi	r30, 0x4F	; 79
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	80 83       	st	Z, r24
		/*to prevent entering any other character except the digits*/
		if(Password[i] == '%' || Password[i] == '*' || Password[i] == '-' || Password[i] == '=' || Password[i] == '+' || Password[i] == 13)
     df2:	8a ad       	ldd	r24, Y+58	; 0x3a
     df4:	88 2f       	mov	r24, r24
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	fc 01       	movw	r30, r24
     dfa:	ef 54       	subi	r30, 0x4F	; 79
     dfc:	fe 4f       	sbci	r31, 0xFE	; 254
     dfe:	80 81       	ld	r24, Z
     e00:	85 32       	cpi	r24, 0x25	; 37
     e02:	69 f1       	breq	.+90     	; 0xe5e <Enter_New_Password+0xb8>
     e04:	8a ad       	ldd	r24, Y+58	; 0x3a
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	fc 01       	movw	r30, r24
     e0c:	ef 54       	subi	r30, 0x4F	; 79
     e0e:	fe 4f       	sbci	r31, 0xFE	; 254
     e10:	80 81       	ld	r24, Z
     e12:	8a 32       	cpi	r24, 0x2A	; 42
     e14:	21 f1       	breq	.+72     	; 0xe5e <Enter_New_Password+0xb8>
     e16:	8a ad       	ldd	r24, Y+58	; 0x3a
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	fc 01       	movw	r30, r24
     e1e:	ef 54       	subi	r30, 0x4F	; 79
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	80 81       	ld	r24, Z
     e24:	8d 32       	cpi	r24, 0x2D	; 45
     e26:	d9 f0       	breq	.+54     	; 0xe5e <Enter_New_Password+0xb8>
     e28:	8a ad       	ldd	r24, Y+58	; 0x3a
     e2a:	88 2f       	mov	r24, r24
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	fc 01       	movw	r30, r24
     e30:	ef 54       	subi	r30, 0x4F	; 79
     e32:	fe 4f       	sbci	r31, 0xFE	; 254
     e34:	80 81       	ld	r24, Z
     e36:	8d 33       	cpi	r24, 0x3D	; 61
     e38:	91 f0       	breq	.+36     	; 0xe5e <Enter_New_Password+0xb8>
     e3a:	8a ad       	ldd	r24, Y+58	; 0x3a
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	fc 01       	movw	r30, r24
     e42:	ef 54       	subi	r30, 0x4F	; 79
     e44:	fe 4f       	sbci	r31, 0xFE	; 254
     e46:	80 81       	ld	r24, Z
     e48:	8b 32       	cpi	r24, 0x2B	; 43
     e4a:	49 f0       	breq	.+18     	; 0xe5e <Enter_New_Password+0xb8>
     e4c:	8a ad       	ldd	r24, Y+58	; 0x3a
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	fc 01       	movw	r30, r24
     e54:	ef 54       	subi	r30, 0x4F	; 79
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	80 81       	ld	r24, Z
     e5a:	8d 30       	cpi	r24, 0x0D	; 13
     e5c:	21 f4       	brne	.+8      	; 0xe66 <Enter_New_Password+0xc0>
		{
			i--;
     e5e:	8a ad       	ldd	r24, Y+58	; 0x3a
     e60:	81 50       	subi	r24, 0x01	; 1
     e62:	8a af       	std	Y+58, r24	; 0x3a
     e64:	75 c0       	rjmp	.+234    	; 0xf50 <Enter_New_Password+0x1aa>
			continue;
		}
		LCD_displayCharacter('*');
     e66:	8a e2       	ldi	r24, 0x2A	; 42
     e68:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <LCD_displayCharacter>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	aa ef       	ldi	r26, 0xFA	; 250
     e72:	b3 e4       	ldi	r27, 0x43	; 67
     e74:	8d ab       	std	Y+53, r24	; 0x35
     e76:	9e ab       	std	Y+54, r25	; 0x36
     e78:	af ab       	std	Y+55, r26	; 0x37
     e7a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7c:	6d a9       	ldd	r22, Y+53	; 0x35
     e7e:	7e a9       	ldd	r23, Y+54	; 0x36
     e80:	8f a9       	ldd	r24, Y+55	; 0x37
     e82:	98 ad       	ldd	r25, Y+56	; 0x38
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	4a ef       	ldi	r20, 0xFA	; 250
     e8a:	54 e4       	ldi	r21, 0x44	; 68
     e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	89 ab       	std	Y+49, r24	; 0x31
     e96:	9a ab       	std	Y+50, r25	; 0x32
     e98:	ab ab       	std	Y+51, r26	; 0x33
     e9a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e9c:	69 a9       	ldd	r22, Y+49	; 0x31
     e9e:	7a a9       	ldd	r23, Y+50	; 0x32
     ea0:	8b a9       	ldd	r24, Y+51	; 0x33
     ea2:	9c a9       	ldd	r25, Y+52	; 0x34
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	40 e8       	ldi	r20, 0x80	; 128
     eaa:	5f e3       	ldi	r21, 0x3F	; 63
     eac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	2c f4       	brge	.+10     	; 0xebe <Enter_New_Password+0x118>
		__ticks = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	98 ab       	std	Y+48, r25	; 0x30
     eba:	8f a7       	std	Y+47, r24	; 0x2f
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <Enter_New_Password+0x196>
	else if (__tmp > 65535)
     ebe:	69 a9       	ldd	r22, Y+49	; 0x31
     ec0:	7a a9       	ldd	r23, Y+50	; 0x32
     ec2:	8b a9       	ldd	r24, Y+51	; 0x33
     ec4:	9c a9       	ldd	r25, Y+52	; 0x34
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
     eca:	4f e7       	ldi	r20, 0x7F	; 127
     ecc:	57 e4       	ldi	r21, 0x47	; 71
     ece:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ed2:	18 16       	cp	r1, r24
     ed4:	4c f5       	brge	.+82     	; 0xf28 <Enter_New_Password+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed6:	6d a9       	ldd	r22, Y+53	; 0x35
     ed8:	7e a9       	ldd	r23, Y+54	; 0x36
     eda:	8f a9       	ldd	r24, Y+55	; 0x37
     edc:	98 ad       	ldd	r25, Y+56	; 0x38
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e2       	ldi	r20, 0x20	; 32
     ee4:	51 e4       	ldi	r21, 0x41	; 65
     ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	bc 01       	movw	r22, r24
     ef0:	cd 01       	movw	r24, r26
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	98 ab       	std	Y+48, r25	; 0x30
     efc:	8f a7       	std	Y+47, r24	; 0x2f
     efe:	0f c0       	rjmp	.+30     	; 0xf1e <Enter_New_Password+0x178>
     f00:	88 ec       	ldi	r24, 0xC8	; 200
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9e a7       	std	Y+46, r25	; 0x2e
     f06:	8d a7       	std	Y+45, r24	; 0x2d
     f08:	8d a5       	ldd	r24, Y+45	; 0x2d
     f0a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <Enter_New_Password+0x166>
     f10:	9e a7       	std	Y+46, r25	; 0x2e
     f12:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f14:	8f a5       	ldd	r24, Y+47	; 0x2f
     f16:	98 a9       	ldd	r25, Y+48	; 0x30
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	98 ab       	std	Y+48, r25	; 0x30
     f1c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f20:	98 a9       	ldd	r25, Y+48	; 0x30
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	69 f7       	brne	.-38     	; 0xf00 <Enter_New_Password+0x15a>
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <Enter_New_Password+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f28:	69 a9       	ldd	r22, Y+49	; 0x31
     f2a:	7a a9       	ldd	r23, Y+50	; 0x32
     f2c:	8b a9       	ldd	r24, Y+51	; 0x33
     f2e:	9c a9       	ldd	r25, Y+52	; 0x34
     f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f34:	dc 01       	movw	r26, r24
     f36:	cb 01       	movw	r24, r22
     f38:	98 ab       	std	Y+48, r25	; 0x30
     f3a:	8f a7       	std	Y+47, r24	; 0x2f
     f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f3e:	98 a9       	ldd	r25, Y+48	; 0x30
     f40:	9c a7       	std	Y+44, r25	; 0x2c
     f42:	8b a7       	std	Y+43, r24	; 0x2b
     f44:	8b a5       	ldd	r24, Y+43	; 0x2b
     f46:	9c a5       	ldd	r25, Y+44	; 0x2c
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <Enter_New_Password+0x1a2>
     f4c:	9c a7       	std	Y+44, r25	; 0x2c
     f4e:	8b a7       	std	Y+43, r24	; 0x2b
	unsigned char enter = 0;
	LCD_clearScreen();
	LCD_displayString("plz enter a new");
	LCD_moveCursor(1,0);
	LCD_displayString("password: ");
	for(unsigned char i=0 ; i<PASSWORD_SIZE-1 ; i++)
     f50:	8a ad       	ldd	r24, Y+58	; 0x3a
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	8a af       	std	Y+58, r24	; 0x3a
     f56:	8a ad       	ldd	r24, Y+58	; 0x3a
     f58:	85 30       	cpi	r24, 0x05	; 5
     f5a:	08 f4       	brcc	.+2      	; 0xf5e <Enter_New_Password+0x1b8>
     f5c:	41 cf       	rjmp	.-382    	; 0xde0 <Enter_New_Password+0x3a>
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	do	/*Enter Button do while loop*/
	{
		enter = KEYPAD_getPressedKey();
     f5e:	0e 94 85 13 	call	0x270a	; 0x270a <KEYPAD_getPressedKey>
     f62:	8b af       	std	Y+59, r24	; 0x3b
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	aa ef       	ldi	r26, 0xFA	; 250
     f6a:	b3 e4       	ldi	r27, 0x43	; 67
     f6c:	8f a3       	std	Y+39, r24	; 0x27
     f6e:	98 a7       	std	Y+40, r25	; 0x28
     f70:	a9 a7       	std	Y+41, r26	; 0x29
     f72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f74:	6f a1       	ldd	r22, Y+39	; 0x27
     f76:	78 a5       	ldd	r23, Y+40	; 0x28
     f78:	89 a5       	ldd	r24, Y+41	; 0x29
     f7a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f7c:	20 e0       	ldi	r18, 0x00	; 0
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	4a ef       	ldi	r20, 0xFA	; 250
     f82:	54 e4       	ldi	r21, 0x44	; 68
     f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	8b a3       	std	Y+35, r24	; 0x23
     f8e:	9c a3       	std	Y+36, r25	; 0x24
     f90:	ad a3       	std	Y+37, r26	; 0x25
     f92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f94:	6b a1       	ldd	r22, Y+35	; 0x23
     f96:	7c a1       	ldd	r23, Y+36	; 0x24
     f98:	8d a1       	ldd	r24, Y+37	; 0x25
     f9a:	9e a1       	ldd	r25, Y+38	; 0x26
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e8       	ldi	r20, 0x80	; 128
     fa2:	5f e3       	ldi	r21, 0x3F	; 63
     fa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fa8:	88 23       	and	r24, r24
     faa:	2c f4       	brge	.+10     	; 0xfb6 <Enter_New_Password+0x210>
		__ticks = 1;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9a a3       	std	Y+34, r25	; 0x22
     fb2:	89 a3       	std	Y+33, r24	; 0x21
     fb4:	3f c0       	rjmp	.+126    	; 0x1034 <Enter_New_Password+0x28e>
	else if (__tmp > 65535)
     fb6:	6b a1       	ldd	r22, Y+35	; 0x23
     fb8:	7c a1       	ldd	r23, Y+36	; 0x24
     fba:	8d a1       	ldd	r24, Y+37	; 0x25
     fbc:	9e a1       	ldd	r25, Y+38	; 0x26
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	3f ef       	ldi	r19, 0xFF	; 255
     fc2:	4f e7       	ldi	r20, 0x7F	; 127
     fc4:	57 e4       	ldi	r21, 0x47	; 71
     fc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fca:	18 16       	cp	r1, r24
     fcc:	4c f5       	brge	.+82     	; 0x1020 <Enter_New_Password+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	6f a1       	ldd	r22, Y+39	; 0x27
     fd0:	78 a5       	ldd	r23, Y+40	; 0x28
     fd2:	89 a5       	ldd	r24, Y+41	; 0x29
     fd4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e2       	ldi	r20, 0x20	; 32
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	bc 01       	movw	r22, r24
     fe8:	cd 01       	movw	r24, r26
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9a a3       	std	Y+34, r25	; 0x22
     ff4:	89 a3       	std	Y+33, r24	; 0x21
     ff6:	0f c0       	rjmp	.+30     	; 0x1016 <Enter_New_Password+0x270>
     ff8:	88 ec       	ldi	r24, 0xC8	; 200
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	98 a3       	std	Y+32, r25	; 0x20
     ffe:	8f 8f       	std	Y+31, r24	; 0x1f
    1000:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1002:	98 a1       	ldd	r25, Y+32	; 0x20
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <Enter_New_Password+0x25e>
    1008:	98 a3       	std	Y+32, r25	; 0x20
    100a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	89 a1       	ldd	r24, Y+33	; 0x21
    100e:	9a a1       	ldd	r25, Y+34	; 0x22
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	9a a3       	std	Y+34, r25	; 0x22
    1014:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	89 a1       	ldd	r24, Y+33	; 0x21
    1018:	9a a1       	ldd	r25, Y+34	; 0x22
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	69 f7       	brne	.-38     	; 0xff8 <Enter_New_Password+0x252>
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <Enter_New_Password+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1020:	6b a1       	ldd	r22, Y+35	; 0x23
    1022:	7c a1       	ldd	r23, Y+36	; 0x24
    1024:	8d a1       	ldd	r24, Y+37	; 0x25
    1026:	9e a1       	ldd	r25, Y+38	; 0x26
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	9a a3       	std	Y+34, r25	; 0x22
    1032:	89 a3       	std	Y+33, r24	; 0x21
    1034:	89 a1       	ldd	r24, Y+33	; 0x21
    1036:	9a a1       	ldd	r25, Y+34	; 0x22
    1038:	9e 8f       	std	Y+30, r25	; 0x1e
    103a:	8d 8f       	std	Y+29, r24	; 0x1d
    103c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    103e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <Enter_New_Password+0x29a>
    1044:	9e 8f       	std	Y+30, r25	; 0x1e
    1046:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
	}while(enter != 13);
    1048:	8b ad       	ldd	r24, Y+59	; 0x3b
    104a:	8d 30       	cpi	r24, 0x0D	; 13
    104c:	09 f0       	breq	.+2      	; 0x1050 <Enter_New_Password+0x2aa>
    104e:	87 cf       	rjmp	.-242    	; 0xf5e <Enter_New_Password+0x1b8>
	enter = 0;
    1050:	1b ae       	std	Y+59, r1	; 0x3b
	Password[End_Point] = '#';	/*end the password array with # to identify it as registered password*/
    1052:	83 e2       	ldi	r24, 0x23	; 35
    1054:	80 93 b6 01 	sts	0x01B6, r24
	LCD_clearScreen();
    1058:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
	LCD_displayString("plz re-enter the");
    105c:	87 ea       	ldi	r24, 0xA7	; 167
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
	LCD_moveCursor(1,0);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
	LCD_displayString("same pass: ");
    106c:	88 eb       	ldi	r24, 0xB8	; 184
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
	for(unsigned char i=0 ; i<PASSWORD_SIZE-1 ; i++)
    1074:	19 ae       	std	Y+57, r1	; 0x39
    1076:	bb c0       	rjmp	.+374    	; 0x11ee <Enter_New_Password+0x448>
	{
		Password_check[i] = KEYPAD_getPressedKey();
    1078:	89 ad       	ldd	r24, Y+57	; 0x39
    107a:	08 2f       	mov	r16, r24
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	0e 94 85 13 	call	0x270a	; 0x270a <KEYPAD_getPressedKey>
    1082:	f8 01       	movw	r30, r16
    1084:	e9 54       	subi	r30, 0x49	; 73
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	80 83       	st	Z, r24
		/*to prevent entering any other character except the digits*/
		if(Password[i] == '%' || Password[i] == '*' || Password[i] == '-' || Password[i] == '=' || Password[i] == '+' || Password[i] == 13)
    108a:	89 ad       	ldd	r24, Y+57	; 0x39
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	fc 01       	movw	r30, r24
    1092:	ef 54       	subi	r30, 0x4F	; 79
    1094:	fe 4f       	sbci	r31, 0xFE	; 254
    1096:	80 81       	ld	r24, Z
    1098:	85 32       	cpi	r24, 0x25	; 37
    109a:	69 f1       	breq	.+90     	; 0x10f6 <Enter_New_Password+0x350>
    109c:	89 ad       	ldd	r24, Y+57	; 0x39
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	fc 01       	movw	r30, r24
    10a4:	ef 54       	subi	r30, 0x4F	; 79
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	80 81       	ld	r24, Z
    10aa:	8a 32       	cpi	r24, 0x2A	; 42
    10ac:	21 f1       	breq	.+72     	; 0x10f6 <Enter_New_Password+0x350>
    10ae:	89 ad       	ldd	r24, Y+57	; 0x39
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	fc 01       	movw	r30, r24
    10b6:	ef 54       	subi	r30, 0x4F	; 79
    10b8:	fe 4f       	sbci	r31, 0xFE	; 254
    10ba:	80 81       	ld	r24, Z
    10bc:	8d 32       	cpi	r24, 0x2D	; 45
    10be:	d9 f0       	breq	.+54     	; 0x10f6 <Enter_New_Password+0x350>
    10c0:	89 ad       	ldd	r24, Y+57	; 0x39
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	fc 01       	movw	r30, r24
    10c8:	ef 54       	subi	r30, 0x4F	; 79
    10ca:	fe 4f       	sbci	r31, 0xFE	; 254
    10cc:	80 81       	ld	r24, Z
    10ce:	8d 33       	cpi	r24, 0x3D	; 61
    10d0:	91 f0       	breq	.+36     	; 0x10f6 <Enter_New_Password+0x350>
    10d2:	89 ad       	ldd	r24, Y+57	; 0x39
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	fc 01       	movw	r30, r24
    10da:	ef 54       	subi	r30, 0x4F	; 79
    10dc:	fe 4f       	sbci	r31, 0xFE	; 254
    10de:	80 81       	ld	r24, Z
    10e0:	8b 32       	cpi	r24, 0x2B	; 43
    10e2:	49 f0       	breq	.+18     	; 0x10f6 <Enter_New_Password+0x350>
    10e4:	89 ad       	ldd	r24, Y+57	; 0x39
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	fc 01       	movw	r30, r24
    10ec:	ef 54       	subi	r30, 0x4F	; 79
    10ee:	fe 4f       	sbci	r31, 0xFE	; 254
    10f0:	80 81       	ld	r24, Z
    10f2:	8d 30       	cpi	r24, 0x0D	; 13
    10f4:	21 f4       	brne	.+8      	; 0x10fe <Enter_New_Password+0x358>
		{
			i--;
    10f6:	89 ad       	ldd	r24, Y+57	; 0x39
    10f8:	81 50       	subi	r24, 0x01	; 1
    10fa:	89 af       	std	Y+57, r24	; 0x39
    10fc:	75 c0       	rjmp	.+234    	; 0x11e8 <Enter_New_Password+0x442>
			continue;
		}
		LCD_displayCharacter('*');
    10fe:	8a e2       	ldi	r24, 0x2A	; 42
    1100:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <LCD_displayCharacter>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	aa ef       	ldi	r26, 0xFA	; 250
    110a:	b3 e4       	ldi	r27, 0x43	; 67
    110c:	89 8f       	std	Y+25, r24	; 0x19
    110e:	9a 8f       	std	Y+26, r25	; 0x1a
    1110:	ab 8f       	std	Y+27, r26	; 0x1b
    1112:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1114:	69 8d       	ldd	r22, Y+25	; 0x19
    1116:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1118:	8b 8d       	ldd	r24, Y+27	; 0x1b
    111a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	4a ef       	ldi	r20, 0xFA	; 250
    1122:	54 e4       	ldi	r21, 0x44	; 68
    1124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	8d 8b       	std	Y+21, r24	; 0x15
    112e:	9e 8b       	std	Y+22, r25	; 0x16
    1130:	af 8b       	std	Y+23, r26	; 0x17
    1132:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1134:	6d 89       	ldd	r22, Y+21	; 0x15
    1136:	7e 89       	ldd	r23, Y+22	; 0x16
    1138:	8f 89       	ldd	r24, Y+23	; 0x17
    113a:	98 8d       	ldd	r25, Y+24	; 0x18
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	5f e3       	ldi	r21, 0x3F	; 63
    1144:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1148:	88 23       	and	r24, r24
    114a:	2c f4       	brge	.+10     	; 0x1156 <Enter_New_Password+0x3b0>
		__ticks = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9c 8b       	std	Y+20, r25	; 0x14
    1152:	8b 8b       	std	Y+19, r24	; 0x13
    1154:	3f c0       	rjmp	.+126    	; 0x11d4 <Enter_New_Password+0x42e>
	else if (__tmp > 65535)
    1156:	6d 89       	ldd	r22, Y+21	; 0x15
    1158:	7e 89       	ldd	r23, Y+22	; 0x16
    115a:	8f 89       	ldd	r24, Y+23	; 0x17
    115c:	98 8d       	ldd	r25, Y+24	; 0x18
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	3f ef       	ldi	r19, 0xFF	; 255
    1162:	4f e7       	ldi	r20, 0x7F	; 127
    1164:	57 e4       	ldi	r21, 0x47	; 71
    1166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116a:	18 16       	cp	r1, r24
    116c:	4c f5       	brge	.+82     	; 0x11c0 <Enter_New_Password+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116e:	69 8d       	ldd	r22, Y+25	; 0x19
    1170:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1172:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1174:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9c 8b       	std	Y+20, r25	; 0x14
    1194:	8b 8b       	std	Y+19, r24	; 0x13
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <Enter_New_Password+0x410>
    1198:	88 ec       	ldi	r24, 0xC8	; 200
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9a 8b       	std	Y+18, r25	; 0x12
    119e:	89 8b       	std	Y+17, r24	; 0x11
    11a0:	89 89       	ldd	r24, Y+17	; 0x11
    11a2:	9a 89       	ldd	r25, Y+18	; 0x12
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <Enter_New_Password+0x3fe>
    11a8:	9a 8b       	std	Y+18, r25	; 0x12
    11aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ac:	8b 89       	ldd	r24, Y+19	; 0x13
    11ae:	9c 89       	ldd	r25, Y+20	; 0x14
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	9c 8b       	std	Y+20, r25	; 0x14
    11b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b6:	8b 89       	ldd	r24, Y+19	; 0x13
    11b8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	69 f7       	brne	.-38     	; 0x1198 <Enter_New_Password+0x3f2>
    11be:	14 c0       	rjmp	.+40     	; 0x11e8 <Enter_New_Password+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c0:	6d 89       	ldd	r22, Y+21	; 0x15
    11c2:	7e 89       	ldd	r23, Y+22	; 0x16
    11c4:	8f 89       	ldd	r24, Y+23	; 0x17
    11c6:	98 8d       	ldd	r25, Y+24	; 0x18
    11c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	9c 8b       	std	Y+20, r25	; 0x14
    11d2:	8b 8b       	std	Y+19, r24	; 0x13
    11d4:	8b 89       	ldd	r24, Y+19	; 0x13
    11d6:	9c 89       	ldd	r25, Y+20	; 0x14
    11d8:	98 8b       	std	Y+16, r25	; 0x10
    11da:	8f 87       	std	Y+15, r24	; 0x0f
    11dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11de:	98 89       	ldd	r25, Y+16	; 0x10
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <Enter_New_Password+0x43a>
    11e4:	98 8b       	std	Y+16, r25	; 0x10
    11e6:	8f 87       	std	Y+15, r24	; 0x0f
	Password[End_Point] = '#';	/*end the password array with # to identify it as registered password*/
	LCD_clearScreen();
	LCD_displayString("plz re-enter the");
	LCD_moveCursor(1,0);
	LCD_displayString("same pass: ");
	for(unsigned char i=0 ; i<PASSWORD_SIZE-1 ; i++)
    11e8:	89 ad       	ldd	r24, Y+57	; 0x39
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	89 af       	std	Y+57, r24	; 0x39
    11ee:	89 ad       	ldd	r24, Y+57	; 0x39
    11f0:	85 30       	cpi	r24, 0x05	; 5
    11f2:	08 f4       	brcc	.+2      	; 0x11f6 <Enter_New_Password+0x450>
    11f4:	41 cf       	rjmp	.-382    	; 0x1078 <Enter_New_Password+0x2d2>
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	do	/*Enter Button do while loop*/
	{
		enter = KEYPAD_getPressedKey();
    11f6:	0e 94 85 13 	call	0x270a	; 0x270a <KEYPAD_getPressedKey>
    11fa:	8b af       	std	Y+59, r24	; 0x3b
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	aa ef       	ldi	r26, 0xFA	; 250
    1202:	b3 e4       	ldi	r27, 0x43	; 67
    1204:	8b 87       	std	Y+11, r24	; 0x0b
    1206:	9c 87       	std	Y+12, r25	; 0x0c
    1208:	ad 87       	std	Y+13, r26	; 0x0d
    120a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120c:	6b 85       	ldd	r22, Y+11	; 0x0b
    120e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	9e 85       	ldd	r25, Y+14	; 0x0e
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	4a ef       	ldi	r20, 0xFA	; 250
    121a:	54 e4       	ldi	r21, 0x44	; 68
    121c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	8f 83       	std	Y+7, r24	; 0x07
    1226:	98 87       	std	Y+8, r25	; 0x08
    1228:	a9 87       	std	Y+9, r26	; 0x09
    122a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    122c:	6f 81       	ldd	r22, Y+7	; 0x07
    122e:	78 85       	ldd	r23, Y+8	; 0x08
    1230:	89 85       	ldd	r24, Y+9	; 0x09
    1232:	9a 85       	ldd	r25, Y+10	; 0x0a
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e8       	ldi	r20, 0x80	; 128
    123a:	5f e3       	ldi	r21, 0x3F	; 63
    123c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	2c f4       	brge	.+10     	; 0x124e <Enter_New_Password+0x4a8>
		__ticks = 1;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	9e 83       	std	Y+6, r25	; 0x06
    124a:	8d 83       	std	Y+5, r24	; 0x05
    124c:	3f c0       	rjmp	.+126    	; 0x12cc <Enter_New_Password+0x526>
	else if (__tmp > 65535)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f e7       	ldi	r20, 0x7F	; 127
    125c:	57 e4       	ldi	r21, 0x47	; 71
    125e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1262:	18 16       	cp	r1, r24
    1264:	4c f5       	brge	.+82     	; 0x12b8 <Enter_New_Password+0x512>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1266:	6b 85       	ldd	r22, Y+11	; 0x0b
    1268:	7c 85       	ldd	r23, Y+12	; 0x0c
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e2       	ldi	r20, 0x20	; 32
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	0f c0       	rjmp	.+30     	; 0x12ae <Enter_New_Password+0x508>
    1290:	88 ec       	ldi	r24, 0xC8	; 200
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	9c 83       	std	Y+4, r25	; 0x04
    1296:	8b 83       	std	Y+3, r24	; 0x03
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	01 97       	sbiw	r24, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <Enter_New_Password+0x4f6>
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f7       	brne	.-38     	; 0x1290 <Enter_New_Password+0x4ea>
    12b6:	14 c0       	rjmp	.+40     	; 0x12e0 <Enter_New_Password+0x53a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9e 83       	std	Y+6, r25	; 0x06
    12ca:	8d 83       	std	Y+5, r24	; 0x05
    12cc:	8d 81       	ldd	r24, Y+5	; 0x05
    12ce:	9e 81       	ldd	r25, Y+6	; 0x06
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	01 97       	sbiw	r24, 0x01	; 1
    12da:	f1 f7       	brne	.-4      	; 0x12d8 <Enter_New_Password+0x532>
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}while(enter != 13);
    12e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    12e2:	8d 30       	cpi	r24, 0x0D	; 13
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <Enter_New_Password+0x542>
    12e6:	87 cf       	rjmp	.-242    	; 0x11f6 <Enter_New_Password+0x450>
	Password_check[End_Point] = '#';	/*end the password array with # to identify it as registered password*/
    12e8:	83 e2       	ldi	r24, 0x23	; 35
    12ea:	80 93 bc 01 	sts	0x01BC, r24
}
    12ee:	eb 96       	adiw	r28, 0x3b	; 59
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <Send_New_Password>:
 * 					Function to send new password to ECU2
 * [No Inputs]:
 * [No Returns]:
 */
void Send_New_Password(void)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	00 d0       	rcall	.+0      	; 0x130a <Send_New_Password+0x6>
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(UART_SEND_OR_RECEIVE_READY);
    130e:	80 e1       	ldi	r24, 0x10	; 16
    1310:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
    1314:	1a 82       	std	Y+2, r1	; 0x02
    1316:	10 c0       	rjmp	.+32     	; 0x1338 <Send_New_Password+0x34>
	{
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
    1318:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    131c:	80 31       	cpi	r24, 0x10	; 16
    131e:	e1 f7       	brne	.-8      	; 0x1318 <Send_New_Password+0x14>
		UART_sendByte(Password[i]);
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	fc 01       	movw	r30, r24
    1328:	ef 54       	subi	r30, 0x4F	; 79
    132a:	fe 4f       	sbci	r31, 0xFE	; 254
    132c:	80 81       	ld	r24, Z
    132e:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
 * [No Returns]:
 */
void Send_New_Password(void)
{
	UART_sendByte(UART_SEND_OR_RECEIVE_READY);
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	86 30       	cpi	r24, 0x06	; 6
    133c:	68 f3       	brcs	.-38     	; 0x1318 <Send_New_Password+0x14>
	{
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
		UART_sendByte(Password[i]);
	}
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
    133e:	19 82       	std	Y+1, r1	; 0x01
    1340:	10 c0       	rjmp	.+32     	; 0x1362 <Send_New_Password+0x5e>
	{
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
    1342:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    1346:	80 31       	cpi	r24, 0x10	; 16
    1348:	e1 f7       	brne	.-8      	; 0x1342 <Send_New_Password+0x3e>
		UART_sendByte(Password_check[i]);
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	fc 01       	movw	r30, r24
    1352:	e9 54       	subi	r30, 0x49	; 73
    1354:	fe 4f       	sbci	r31, 0xFE	; 254
    1356:	80 81       	ld	r24, Z
    1358:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
	{
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
		UART_sendByte(Password[i]);
	}
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	86 30       	cpi	r24, 0x06	; 6
    1366:	68 f3       	brcs	.-38     	; 0x1342 <Send_New_Password+0x3e>
	{
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
		UART_sendByte(Password_check[i]);
	}
}
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <Main_Menu>:
 * 					Function to display main menu options to the user
 * [No Inputs]:
 * [No Returns]:
 */
void Main_Menu(void)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    137a:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
	LCD_displayString("+ : Open Door");
    137e:	84 ec       	ldi	r24, 0xC4	; 196
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
	LCD_moveCursor(1,0);
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    138e:	82 ed       	ldi	r24, 0xD2	; 210
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
}
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <Enter_Password>:
 * 					Function to get the registered password from the user
 * [No Inputs]:
 * [No Returns]:
 */
void Enter_Password(void)
{
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
    13a8:	6e 97       	sbiw	r28, 0x1e	; 30
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
	unsigned char enter = 0;
    13b4:	1e 8e       	std	Y+30, r1	; 0x1e
	LCD_clearScreen();
    13b6:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
	LCD_displayString("plz enter the");
    13ba:	82 ee       	ldi	r24, 0xE2	; 226
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
	LCD_moveCursor(1,0);
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
	LCD_displayString("password: ");
    13ca:	8c e9       	ldi	r24, 0x9C	; 156
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
	for(unsigned char i=0 ; i<PASSWORD_SIZE-1 ; i++)
    13d2:	1d 8e       	std	Y+29, r1	; 0x1d
    13d4:	bb c0       	rjmp	.+374    	; 0x154c <Enter_Password+0x1b0>
	{
		Password[i] = KEYPAD_getPressedKey();
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	08 2f       	mov	r16, r24
    13da:	10 e0       	ldi	r17, 0x00	; 0
    13dc:	0e 94 85 13 	call	0x270a	; 0x270a <KEYPAD_getPressedKey>
    13e0:	f8 01       	movw	r30, r16
    13e2:	ef 54       	subi	r30, 0x4F	; 79
    13e4:	fe 4f       	sbci	r31, 0xFE	; 254
    13e6:	80 83       	st	Z, r24
		/*to prevent entering any other character except the digits*/
		if(Password[i] == '%' || Password[i] == '*' || Password[i] == '-' || Password[i] == '=' || Password[i] == '+' || Password[i] == 13)
    13e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	fc 01       	movw	r30, r24
    13f0:	ef 54       	subi	r30, 0x4F	; 79
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	80 81       	ld	r24, Z
    13f6:	85 32       	cpi	r24, 0x25	; 37
    13f8:	69 f1       	breq	.+90     	; 0x1454 <Enter_Password+0xb8>
    13fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	fc 01       	movw	r30, r24
    1402:	ef 54       	subi	r30, 0x4F	; 79
    1404:	fe 4f       	sbci	r31, 0xFE	; 254
    1406:	80 81       	ld	r24, Z
    1408:	8a 32       	cpi	r24, 0x2A	; 42
    140a:	21 f1       	breq	.+72     	; 0x1454 <Enter_Password+0xb8>
    140c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    140e:	88 2f       	mov	r24, r24
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	fc 01       	movw	r30, r24
    1414:	ef 54       	subi	r30, 0x4F	; 79
    1416:	fe 4f       	sbci	r31, 0xFE	; 254
    1418:	80 81       	ld	r24, Z
    141a:	8d 32       	cpi	r24, 0x2D	; 45
    141c:	d9 f0       	breq	.+54     	; 0x1454 <Enter_Password+0xb8>
    141e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	fc 01       	movw	r30, r24
    1426:	ef 54       	subi	r30, 0x4F	; 79
    1428:	fe 4f       	sbci	r31, 0xFE	; 254
    142a:	80 81       	ld	r24, Z
    142c:	8d 33       	cpi	r24, 0x3D	; 61
    142e:	91 f0       	breq	.+36     	; 0x1454 <Enter_Password+0xb8>
    1430:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	fc 01       	movw	r30, r24
    1438:	ef 54       	subi	r30, 0x4F	; 79
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	80 81       	ld	r24, Z
    143e:	8b 32       	cpi	r24, 0x2B	; 43
    1440:	49 f0       	breq	.+18     	; 0x1454 <Enter_Password+0xb8>
    1442:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	fc 01       	movw	r30, r24
    144a:	ef 54       	subi	r30, 0x4F	; 79
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	80 81       	ld	r24, Z
    1450:	8d 30       	cpi	r24, 0x0D	; 13
    1452:	21 f4       	brne	.+8      	; 0x145c <Enter_Password+0xc0>
		{
			i--;
    1454:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1456:	81 50       	subi	r24, 0x01	; 1
    1458:	8d 8f       	std	Y+29, r24	; 0x1d
    145a:	75 c0       	rjmp	.+234    	; 0x1546 <Enter_Password+0x1aa>
			continue;
		}
		LCD_displayCharacter('*');
    145c:	8a e2       	ldi	r24, 0x2A	; 42
    145e:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <LCD_displayCharacter>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	aa ef       	ldi	r26, 0xFA	; 250
    1468:	b3 e4       	ldi	r27, 0x43	; 67
    146a:	89 8f       	std	Y+25, r24	; 0x19
    146c:	9a 8f       	std	Y+26, r25	; 0x1a
    146e:	ab 8f       	std	Y+27, r26	; 0x1b
    1470:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1472:	69 8d       	ldd	r22, Y+25	; 0x19
    1474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a ef       	ldi	r20, 0xFA	; 250
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8d 8b       	std	Y+21, r24	; 0x15
    148c:	9e 8b       	std	Y+22, r25	; 0x16
    148e:	af 8b       	std	Y+23, r26	; 0x17
    1490:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1492:	6d 89       	ldd	r22, Y+21	; 0x15
    1494:	7e 89       	ldd	r23, Y+22	; 0x16
    1496:	8f 89       	ldd	r24, Y+23	; 0x17
    1498:	98 8d       	ldd	r25, Y+24	; 0x18
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <Enter_Password+0x118>
		__ticks = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 8b       	std	Y+20, r25	; 0x14
    14b0:	8b 8b       	std	Y+19, r24	; 0x13
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <Enter_Password+0x196>
	else if (__tmp > 65535)
    14b4:	6d 89       	ldd	r22, Y+21	; 0x15
    14b6:	7e 89       	ldd	r23, Y+22	; 0x16
    14b8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ba:	98 8d       	ldd	r25, Y+24	; 0x18
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <Enter_Password+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	69 8d       	ldd	r22, Y+25	; 0x19
    14ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9c 8b       	std	Y+20, r25	; 0x14
    14f2:	8b 8b       	std	Y+19, r24	; 0x13
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <Enter_Password+0x178>
    14f6:	88 ec       	ldi	r24, 0xC8	; 200
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9a 8b       	std	Y+18, r25	; 0x12
    14fc:	89 8b       	std	Y+17, r24	; 0x11
    14fe:	89 89       	ldd	r24, Y+17	; 0x11
    1500:	9a 89       	ldd	r25, Y+18	; 0x12
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <Enter_Password+0x166>
    1506:	9a 8b       	std	Y+18, r25	; 0x12
    1508:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150a:	8b 89       	ldd	r24, Y+19	; 0x13
    150c:	9c 89       	ldd	r25, Y+20	; 0x14
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9c 8b       	std	Y+20, r25	; 0x14
    1512:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	8b 89       	ldd	r24, Y+19	; 0x13
    1516:	9c 89       	ldd	r25, Y+20	; 0x14
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <Enter_Password+0x15a>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <Enter_Password+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151e:	6d 89       	ldd	r22, Y+21	; 0x15
    1520:	7e 89       	ldd	r23, Y+22	; 0x16
    1522:	8f 89       	ldd	r24, Y+23	; 0x17
    1524:	98 8d       	ldd	r25, Y+24	; 0x18
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9c 8b       	std	Y+20, r25	; 0x14
    1530:	8b 8b       	std	Y+19, r24	; 0x13
    1532:	8b 89       	ldd	r24, Y+19	; 0x13
    1534:	9c 89       	ldd	r25, Y+20	; 0x14
    1536:	98 8b       	std	Y+16, r25	; 0x10
    1538:	8f 87       	std	Y+15, r24	; 0x0f
    153a:	8f 85       	ldd	r24, Y+15	; 0x0f
    153c:	98 89       	ldd	r25, Y+16	; 0x10
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <Enter_Password+0x1a2>
    1542:	98 8b       	std	Y+16, r25	; 0x10
    1544:	8f 87       	std	Y+15, r24	; 0x0f
	unsigned char enter = 0;
	LCD_clearScreen();
	LCD_displayString("plz enter the");
	LCD_moveCursor(1,0);
	LCD_displayString("password: ");
	for(unsigned char i=0 ; i<PASSWORD_SIZE-1 ; i++)
    1546:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	8d 8f       	std	Y+29, r24	; 0x1d
    154c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    154e:	85 30       	cpi	r24, 0x05	; 5
    1550:	08 f4       	brcc	.+2      	; 0x1554 <Enter_Password+0x1b8>
    1552:	41 cf       	rjmp	.-382    	; 0x13d6 <Enter_Password+0x3a>
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	do	/*Enter Button do while loop*/
	{
		enter = KEYPAD_getPressedKey();
    1554:	0e 94 85 13 	call	0x270a	; 0x270a <KEYPAD_getPressedKey>
    1558:	8e 8f       	std	Y+30, r24	; 0x1e
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	aa ef       	ldi	r26, 0xFA	; 250
    1560:	b3 e4       	ldi	r27, 0x43	; 67
    1562:	8b 87       	std	Y+11, r24	; 0x0b
    1564:	9c 87       	std	Y+12, r25	; 0x0c
    1566:	ad 87       	std	Y+13, r26	; 0x0d
    1568:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156a:	6b 85       	ldd	r22, Y+11	; 0x0b
    156c:	7c 85       	ldd	r23, Y+12	; 0x0c
    156e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1570:	9e 85       	ldd	r25, Y+14	; 0x0e
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	4a ef       	ldi	r20, 0xFA	; 250
    1578:	54 e4       	ldi	r21, 0x44	; 68
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	8f 83       	std	Y+7, r24	; 0x07
    1584:	98 87       	std	Y+8, r25	; 0x08
    1586:	a9 87       	std	Y+9, r26	; 0x09
    1588:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e8       	ldi	r20, 0x80	; 128
    1598:	5f e3       	ldi	r21, 0x3F	; 63
    159a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159e:	88 23       	and	r24, r24
    15a0:	2c f4       	brge	.+10     	; 0x15ac <Enter_Password+0x210>
		__ticks = 1;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	3f c0       	rjmp	.+126    	; 0x162a <Enter_Password+0x28e>
	else if (__tmp > 65535)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	3f ef       	ldi	r19, 0xFF	; 255
    15b8:	4f e7       	ldi	r20, 0x7F	; 127
    15ba:	57 e4       	ldi	r21, 0x47	; 71
    15bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f5       	brge	.+82     	; 0x1616 <Enter_Password+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	51 e4       	ldi	r21, 0x41	; 65
    15d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	bc 01       	movw	r22, r24
    15de:	cd 01       	movw	r24, r26
    15e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
    15ec:	0f c0       	rjmp	.+30     	; 0x160c <Enter_Password+0x270>
    15ee:	88 ec       	ldi	r24, 0xC8	; 200
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	f1 f7       	brne	.-4      	; 0x15fa <Enter_Password+0x25e>
    15fe:	9c 83       	std	Y+4, r25	; 0x04
    1600:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	69 f7       	brne	.-38     	; 0x15ee <Enter_Password+0x252>
    1614:	14 c0       	rjmp	.+40     	; 0x163e <Enter_Password+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1616:	6f 81       	ldd	r22, Y+7	; 0x07
    1618:	78 85       	ldd	r23, Y+8	; 0x08
    161a:	89 85       	ldd	r24, Y+9	; 0x09
    161c:	9a 85       	ldd	r25, Y+10	; 0x0a
    161e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <Enter_Password+0x29a>
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
	}while(enter != 13);
    163e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1640:	8d 30       	cpi	r24, 0x0D	; 13
    1642:	09 f0       	breq	.+2      	; 0x1646 <Enter_Password+0x2aa>
    1644:	87 cf       	rjmp	.-242    	; 0x1554 <Enter_Password+0x1b8>
	Password[End_Point] = '#';	/*end the password array with # to identify it as registered password*/
    1646:	83 e2       	ldi	r24, 0x23	; 35
    1648:	80 93 b6 01 	sts	0x01B6, r24
}
    164c:	6e 96       	adiw	r28, 0x1e	; 30
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <Send_Password>:
 * 					Function to send the registered password to ECU2
 * [No Inputs]:
 * [No Returns]:
 */
void Send_Password(void)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	0f 92       	push	r0
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(UART_SEND_OR_RECEIVE_READY);
    166c:	80 e1       	ldi	r24, 0x10	; 16
    166e:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
    1672:	19 82       	std	Y+1, r1	; 0x01
    1674:	10 c0       	rjmp	.+32     	; 0x1696 <Send_Password+0x34>
	{
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
    1676:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    167a:	80 31       	cpi	r24, 0x10	; 16
    167c:	e1 f7       	brne	.-8      	; 0x1676 <Send_Password+0x14>
		UART_sendByte(Password[i]);
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	fc 01       	movw	r30, r24
    1686:	ef 54       	subi	r30, 0x4F	; 79
    1688:	fe 4f       	sbci	r31, 0xFE	; 254
    168a:	80 81       	ld	r24, Z
    168c:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
 * [No Returns]:
 */
void Send_Password(void)
{
	UART_sendByte(UART_SEND_OR_RECEIVE_READY);
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	8f 5f       	subi	r24, 0xFF	; 255
    1694:	89 83       	std	Y+1, r24	; 0x01
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	86 30       	cpi	r24, 0x06	; 6
    169a:	68 f3       	brcs	.-38     	; 0x1676 <Send_Password+0x14>
	{
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
		UART_sendByte(Password[i]);
	}
}
    169c:	0f 90       	pop	r0
    169e:	cf 91       	pop	r28
    16a0:	df 91       	pop	r29
    16a2:	08 95       	ret

000016a4 <main>:
/*===================================================MAIN========================================================*/
int main(void)
{
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	c4 55       	subi	r28, 0x54	; 84
    16b2:	d0 40       	sbci	r29, 0x00	; 0
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
	HMIECU1_init();								/*Initialization Function*/
    16be:	0e 94 b9 05 	call	0xb72	; 0xb72 <HMIECU1_init>
	Hello_Message();							/*Show hello message on the LCD*/
    16c2:	0e 94 cb 05 	call	0xb96	; 0xb96 <Hello_Message>
	/*---------------------------------------------------------------------------------------------------*/
	UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Polling until ECU2 is Synchronized*/
    16c6:	80 e1       	ldi	r24, 0x10	; 16
    16c8:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
	Password [End_Point] = UART_receiveByte();	/*Get password last element*/
    16cc:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    16d0:	80 93 b6 01 	sts	0x01B6, r24
	/*---------------------------------------------------------------------------------------------------*/
	if(Password [End_Point] != '#')		/*if last element is not # means no password is registered before*/
    16d4:	80 91 b6 01 	lds	r24, 0x01B6
    16d8:	83 32       	cpi	r24, 0x23	; 35
    16da:	09 f4       	brne	.+2      	; 0x16de <main+0x3a>
    16dc:	72 c1       	rjmp	.+740    	; 0x19c2 <main+0x31e>
    16de:	6a c1       	rjmp	.+724    	; 0x19b4 <main+0x310>
	{
		while(password_match != 1)
		{
			Enter_New_Password();	/*Ask the user to enter the new password*/
    16e0:	0e 94 d3 06 	call	0xda6	; 0xda6 <Enter_New_Password>
			Send_New_Password();		/*Send the new password to ECU2*/
    16e4:	0e 94 82 09 	call	0x1304	; 0x1304 <Send_New_Password>
			while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU2 is Synchronized*/
    16e8:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    16ec:	80 31       	cpi	r24, 0x10	; 16
    16ee:	e1 f7       	brne	.-8      	; 0x16e8 <main+0x44>
			/*Beware at this point*/
			UART_sendByte(UART_SEND_OR_RECEIVE_READY); /*Send that this ECU is Synchronized*/
    16f0:	80 e1       	ldi	r24, 0x10	; 16
    16f2:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
			password_match = UART_receiveByte(); /*Receive password matching*/
    16f6:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    16fa:	80 93 a0 01 	sts	0x01A0, r24
			if(password_match != 1)
    16fe:	80 91 a0 01 	lds	r24, 0x01A0
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	09 f4       	brne	.+2      	; 0x1708 <main+0x64>
    1706:	c3 c0       	rjmp	.+390    	; 0x188e <main+0x1ea>
			{
				LCD_clearScreen();
    1708:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
				LCD_displayString("password entered");
    170c:	80 ef       	ldi	r24, 0xF0	; 240
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
				LCD_moveCursor(1,0);
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
				LCD_displayString("isn't matched");
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
    1724:	fe 01       	movw	r30, r28
    1726:	ef 5a       	subi	r30, 0xAF	; 175
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	aa e7       	ldi	r26, 0x7A	; 122
    1730:	b4 e4       	ldi	r27, 0x44	; 68
    1732:	80 83       	st	Z, r24
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	a2 83       	std	Z+2, r26	; 0x02
    1738:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173a:	8e 01       	movw	r16, r28
    173c:	03 5b       	subi	r16, 0xB3	; 179
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	fe 01       	movw	r30, r28
    1742:	ef 5a       	subi	r30, 0xAF	; 175
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4a ef       	ldi	r20, 0xFA	; 250
    1754:	54 e4       	ldi	r21, 0x44	; 68
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	f8 01       	movw	r30, r16
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1768:	fe 01       	movw	r30, r28
    176a:	e3 5b       	subi	r30, 0xB3	; 179
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	44 f4       	brge	.+16     	; 0x1796 <main+0xf2>
		__ticks = 1;
    1786:	fe 01       	movw	r30, r28
    1788:	e5 5b       	subi	r30, 0xB5	; 181
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	80 83       	st	Z, r24
    1794:	64 c0       	rjmp	.+200    	; 0x185e <main+0x1ba>
	else if (__tmp > 65535)
    1796:	fe 01       	movw	r30, r28
    1798:	e3 5b       	subi	r30, 0xB3	; 179
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	3f ef       	ldi	r19, 0xFF	; 255
    17a8:	4f e7       	ldi	r20, 0x7F	; 127
    17aa:	57 e4       	ldi	r21, 0x47	; 71
    17ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b0:	18 16       	cp	r1, r24
    17b2:	0c f0       	brlt	.+2      	; 0x17b6 <main+0x112>
    17b4:	43 c0       	rjmp	.+134    	; 0x183c <main+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b6:	fe 01       	movw	r30, r28
    17b8:	ef 5a       	subi	r30, 0xAF	; 175
    17ba:	ff 4f       	sbci	r31, 0xFF	; 255
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	8e 01       	movw	r16, r28
    17d6:	05 5b       	subi	r16, 0xB5	; 181
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	f8 01       	movw	r30, r16
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	80 83       	st	Z, r24
    17ec:	1f c0       	rjmp	.+62     	; 0x182c <main+0x188>
    17ee:	fe 01       	movw	r30, r28
    17f0:	e7 5b       	subi	r30, 0xB7	; 183
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	80 83       	st	Z, r24
    17fc:	fe 01       	movw	r30, r28
    17fe:	e7 5b       	subi	r30, 0xB7	; 183
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	80 81       	ld	r24, Z
    1804:	91 81       	ldd	r25, Z+1	; 0x01
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <main+0x162>
    180a:	fe 01       	movw	r30, r28
    180c:	e7 5b       	subi	r30, 0xB7	; 183
    180e:	ff 4f       	sbci	r31, 0xFF	; 255
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	de 01       	movw	r26, r28
    1816:	a5 5b       	subi	r26, 0xB5	; 181
    1818:	bf 4f       	sbci	r27, 0xFF	; 255
    181a:	fe 01       	movw	r30, r28
    181c:	e5 5b       	subi	r30, 0xB5	; 181
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	9c 93       	st	X, r25
    182a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182c:	fe 01       	movw	r30, r28
    182e:	e5 5b       	subi	r30, 0xB5	; 181
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	80 81       	ld	r24, Z
    1834:	91 81       	ldd	r25, Z+1	; 0x01
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	d1 f6       	brne	.-76     	; 0x17ee <main+0x14a>
    183a:	bc c0       	rjmp	.+376    	; 0x19b4 <main+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183c:	8e 01       	movw	r16, r28
    183e:	05 5b       	subi	r16, 0xB5	; 181
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	fe 01       	movw	r30, r28
    1844:	e3 5b       	subi	r30, 0xB3	; 179
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1854:	dc 01       	movw	r26, r24
    1856:	cb 01       	movw	r24, r22
    1858:	f8 01       	movw	r30, r16
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
    185e:	de 01       	movw	r26, r28
    1860:	a9 5b       	subi	r26, 0xB9	; 185
    1862:	bf 4f       	sbci	r27, 0xFF	; 255
    1864:	fe 01       	movw	r30, r28
    1866:	e5 5b       	subi	r30, 0xB5	; 181
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	11 96       	adiw	r26, 0x01	; 1
    1870:	9c 93       	st	X, r25
    1872:	8e 93       	st	-X, r24
    1874:	fe 01       	movw	r30, r28
    1876:	e9 5b       	subi	r30, 0xB9	; 185
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	80 81       	ld	r24, Z
    187c:	91 81       	ldd	r25, Z+1	; 0x01
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <main+0x1da>
    1882:	fe 01       	movw	r30, r28
    1884:	e9 5b       	subi	r30, 0xB9	; 185
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	93 c0       	rjmp	.+294    	; 0x19b4 <main+0x310>
				_delay_ms(1000);
			}
			else
			{
				LCD_clearScreen();
    188e:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
				LCD_displayString("password entered");
    1892:	80 ef       	ldi	r24, 0xF0	; 240
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
				LCD_moveCursor(1,0);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
				LCD_displayString("successfully");
    18a2:	8f e0       	ldi	r24, 0x0F	; 15
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
    18aa:	fe 01       	movw	r30, r28
    18ac:	ed 5b       	subi	r30, 0xBD	; 189
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	aa e7       	ldi	r26, 0x7A	; 122
    18b6:	b4 e4       	ldi	r27, 0x44	; 68
    18b8:	80 83       	st	Z, r24
    18ba:	91 83       	std	Z+1, r25	; 0x01
    18bc:	a2 83       	std	Z+2, r26	; 0x02
    18be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c0:	8e 01       	movw	r16, r28
    18c2:	01 5c       	subi	r16, 0xC1	; 193
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	fe 01       	movw	r30, r28
    18c8:	ed 5b       	subi	r30, 0xBD	; 189
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	60 81       	ld	r22, Z
    18ce:	71 81       	ldd	r23, Z+1	; 0x01
    18d0:	82 81       	ldd	r24, Z+2	; 0x02
    18d2:	93 81       	ldd	r25, Z+3	; 0x03
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	4a ef       	ldi	r20, 0xFA	; 250
    18da:	54 e4       	ldi	r21, 0x44	; 68
    18dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	f8 01       	movw	r30, r16
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18ee:	fe 01       	movw	r30, r28
    18f0:	ff 96       	adiw	r30, 0x3f	; 63
    18f2:	60 81       	ld	r22, Z
    18f4:	71 81       	ldd	r23, Z+1	; 0x01
    18f6:	82 81       	ldd	r24, Z+2	; 0x02
    18f8:	93 81       	ldd	r25, Z+3	; 0x03
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <main+0x270>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9e af       	std	Y+62, r25	; 0x3e
    1910:	8d af       	std	Y+61, r24	; 0x3d
    1912:	46 c0       	rjmp	.+140    	; 0x19a0 <main+0x2fc>
	else if (__tmp > 65535)
    1914:	fe 01       	movw	r30, r28
    1916:	ff 96       	adiw	r30, 0x3f	; 63
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	64 f5       	brge	.+88     	; 0x1988 <main+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1930:	fe 01       	movw	r30, r28
    1932:	ed 5b       	subi	r30, 0xBD	; 189
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	60 81       	ld	r22, Z
    1938:	71 81       	ldd	r23, Z+1	; 0x01
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9e af       	std	Y+62, r25	; 0x3e
    195c:	8d af       	std	Y+61, r24	; 0x3d
    195e:	0f c0       	rjmp	.+30     	; 0x197e <main+0x2da>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9c af       	std	Y+60, r25	; 0x3c
    1966:	8b af       	std	Y+59, r24	; 0x3b
    1968:	8b ad       	ldd	r24, Y+59	; 0x3b
    196a:	9c ad       	ldd	r25, Y+60	; 0x3c
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <main+0x2c8>
    1970:	9c af       	std	Y+60, r25	; 0x3c
    1972:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8d ad       	ldd	r24, Y+61	; 0x3d
    1976:	9e ad       	ldd	r25, Y+62	; 0x3e
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	9e af       	std	Y+62, r25	; 0x3e
    197c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1980:	9e ad       	ldd	r25, Y+62	; 0x3e
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <main+0x2bc>
    1986:	16 c0       	rjmp	.+44     	; 0x19b4 <main+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	fe 01       	movw	r30, r28
    198a:	ff 96       	adiw	r30, 0x3f	; 63
    198c:	60 81       	ld	r22, Z
    198e:	71 81       	ldd	r23, Z+1	; 0x01
    1990:	82 81       	ldd	r24, Z+2	; 0x02
    1992:	93 81       	ldd	r25, Z+3	; 0x03
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e af       	std	Y+62, r25	; 0x3e
    199e:	8d af       	std	Y+61, r24	; 0x3d
    19a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a4:	9a af       	std	Y+58, r25	; 0x3a
    19a6:	89 af       	std	Y+57, r24	; 0x39
    19a8:	89 ad       	ldd	r24, Y+57	; 0x39
    19aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <main+0x308>
    19b0:	9a af       	std	Y+58, r25	; 0x3a
    19b2:	89 af       	std	Y+57, r24	; 0x39
	UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Polling until ECU2 is Synchronized*/
	Password [End_Point] = UART_receiveByte();	/*Get password last element*/
	/*---------------------------------------------------------------------------------------------------*/
	if(Password [End_Point] != '#')		/*if last element is not # means no password is registered before*/
	{
		while(password_match != 1)
    19b4:	80 91 a0 01 	lds	r24, 0x01A0
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	09 f0       	breq	.+2      	; 0x19be <main+0x31a>
    19bc:	91 ce       	rjmp	.-734    	; 0x16e0 <main+0x3c>
				LCD_moveCursor(1,0);
				LCD_displayString("successfully");
				_delay_ms(1000);
			}
		}
		password_match = 0; /*End Matching Case*/
    19be:	10 92 a0 01 	sts	0x01A0, r1
	}
	/*---------------------------------------------------------------------------------------------------*/
	while(1)
	{
		Main_Menu();										/*Display Main Menu*/
    19c2:	0e 94 b9 09 	call	0x1372	; 0x1372 <Main_Menu>
		Main_Menu_Choice = KEYPAD_getPressedKey();			/*get Main Menu choice option*/
    19c6:	0e 94 85 13 	call	0x270a	; 0x270a <KEYPAD_getPressedKey>
    19ca:	80 93 a1 01 	sts	0x01A1, r24
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);			/*Send that this ECU is Synchronized*/
    19ce:	80 e1       	ldi	r24, 0x10	; 16
    19d0:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};	/*Polling until ECU2 is Synchronized*/
    19d4:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    19d8:	80 31       	cpi	r24, 0x10	; 16
    19da:	e1 f7       	brne	.-8      	; 0x19d4 <main+0x330>
		UART_sendByte(Main_Menu_Choice);
    19dc:	80 91 a1 01 	lds	r24, 0x01A1
    19e0:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
		if(Main_Menu_Choice == '+')
    19e4:	80 91 a1 01 	lds	r24, 0x01A1
    19e8:	8b 32       	cpi	r24, 0x2B	; 43
    19ea:	09 f0       	breq	.+2      	; 0x19ee <main+0x34a>
    19ec:	45 c1       	rjmp	.+650    	; 0x1c78 <main+0x5d4>
		{
			while(1)
			{
				Enter_Password();
    19ee:	0e 94 ce 09 	call	0x139c	; 0x139c <Enter_Password>
				Send_Password();
    19f2:	0e 94 31 0b 	call	0x1662	; 0x1662 <Send_Password>
				while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU2 is Synchronized*/
    19f6:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    19fa:	80 31       	cpi	r24, 0x10	; 16
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <main+0x352>
				/*Beware at this point*/
				UART_sendByte(UART_SEND_OR_RECEIVE_READY); /*Send that this ECU is Synchronized*/
    19fe:	80 e1       	ldi	r24, 0x10	; 16
    1a00:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
				password_match = UART_receiveByte(); /*Receive password matching*/
    1a04:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    1a08:	80 93 a0 01 	sts	0x01A0, r24
				if(password_match == 1)
    1a0c:	80 91 a0 01 	lds	r24, 0x01A0
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	09 f0       	breq	.+2      	; 0x1a16 <main+0x372>
    1a14:	61 c0       	rjmp	.+194    	; 0x1ad8 <main+0x434>
				{
					UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
    1a16:	80 e1       	ldi	r24, 0x10	; 16
    1a18:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
					while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU2 is Synchronized*/
    1a1c:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    1a20:	80 31       	cpi	r24, 0x10	; 16
    1a22:	e1 f7       	brne	.-8      	; 0x1a1c <main+0x378>
					/*-------------------------------------------------------------------------*/
					TIMER1_Config.Compare_Value16 = Compare_Value_For_15_Seconds;
    1a24:	8b e1       	ldi	r24, 0x1B	; 27
    1a26:	97 eb       	ldi	r25, 0xB7	; 183
    1a28:	90 93 9c 01 	sts	0x019C, r25
    1a2c:	80 93 9b 01 	sts	0x019B, r24
					TIMER1_init(&TIMER1_Config);
    1a30:	87 e9       	ldi	r24, 0x97	; 151
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
					Timer1_ON = 1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	80 93 a2 01 	sts	0x01A2, r24
					LCD_clearScreen();
    1a3e:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
					LCD_displayString("Door is");
    1a42:	8c e1       	ldi	r24, 0x1C	; 28
    1a44:	91 e0       	ldi	r25, 0x01	; 1
    1a46:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
					LCD_moveCursor(1,0);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
					LCD_displayString("Unlocking ...");
    1a52:	84 e2       	ldi	r24, 0x24	; 36
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
					while(Timer1_ON == 1){};	/*Polling Until Timer1 is OFF*/
    1a5a:	80 91 a2 01 	lds	r24, 0x01A2
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	e1 f3       	breq	.-8      	; 0x1a5a <main+0x3b6>
					/*-------------------------------------------------------------------------*/
					TIMER1_Config.Compare_Value16 = Compare_Value_For_3_Seconds;
    1a62:	8f e9       	ldi	r24, 0x9F	; 159
    1a64:	94 e2       	ldi	r25, 0x24	; 36
    1a66:	90 93 9c 01 	sts	0x019C, r25
    1a6a:	80 93 9b 01 	sts	0x019B, r24
					TIMER1_init(&TIMER1_Config);
    1a6e:	87 e9       	ldi	r24, 0x97	; 151
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
					Timer1_ON = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	80 93 a2 01 	sts	0x01A2, r24
					LCD_clearScreen();
    1a7c:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
					LCD_displayString("Door is Opened");
    1a80:	82 e3       	ldi	r24, 0x32	; 50
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
					while(Timer1_ON == 1){};
    1a88:	80 91 a2 01 	lds	r24, 0x01A2
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	e1 f3       	breq	.-8      	; 0x1a88 <main+0x3e4>
					/*-------------------------------------------------------------------------*/
					TIMER1_Config.Compare_Value16 = Compare_Value_For_15_Seconds;
    1a90:	8b e1       	ldi	r24, 0x1B	; 27
    1a92:	97 eb       	ldi	r25, 0xB7	; 183
    1a94:	90 93 9c 01 	sts	0x019C, r25
    1a98:	80 93 9b 01 	sts	0x019B, r24
					TIMER1_init(&TIMER1_Config);
    1a9c:	87 e9       	ldi	r24, 0x97	; 151
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
					Timer1_ON = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	80 93 a2 01 	sts	0x01A2, r24
					LCD_clearScreen();
    1aaa:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
					LCD_displayString("Door is");
    1aae:	8c e1       	ldi	r24, 0x1C	; 28
    1ab0:	91 e0       	ldi	r25, 0x01	; 1
    1ab2:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
					LCD_moveCursor(1,0);
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
					LCD_displayString("Locking ...");
    1abe:	81 e4       	ldi	r24, 0x41	; 65
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
					while(Timer1_ON == 1){};
    1ac6:	80 91 a2 01 	lds	r24, 0x01A2
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	e1 f3       	breq	.-8      	; 0x1ac6 <main+0x422>
					/*-------------------------------------------------------------------------*/
					Wrong_Entries_Number = 0;	/*Reset number of wrong entries*/
    1ace:	10 92 a4 01 	sts	0x01A4, r1
					password_match = 0;			/*End Matching Case*/
    1ad2:	10 92 a0 01 	sts	0x01A0, r1
    1ad6:	cd c0       	rjmp	.+410    	; 0x1c72 <main+0x5ce>
					break; /*Exit the While Loop and ask again for options*/
				}
				else if (password_match == 0)
    1ad8:	80 91 a0 01 	lds	r24, 0x01A0
    1adc:	88 23       	and	r24, r24
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <main+0x43e>
    1ae0:	86 cf       	rjmp	.-244    	; 0x19ee <main+0x34a>
				{
					Wrong_Entries_Number++;
    1ae2:	80 91 a4 01 	lds	r24, 0x01A4
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	80 93 a4 01 	sts	0x01A4, r24
					LCD_clearScreen();
    1aec:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
					LCD_displayString("Password Entered");
    1af0:	8d e4       	ldi	r24, 0x4D	; 77
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
					LCD_moveCursor(1,0);
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	60 e0       	ldi	r22, 0x00	; 0
    1afc:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
					LCD_displayString("is Wrong");
    1b00:	8e e5       	ldi	r24, 0x5E	; 94
    1b02:	91 e0       	ldi	r25, 0x01	; 1
    1b04:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	aa e7       	ldi	r26, 0x7A	; 122
    1b0e:	b4 e4       	ldi	r27, 0x44	; 68
    1b10:	8d ab       	std	Y+53, r24	; 0x35
    1b12:	9e ab       	std	Y+54, r25	; 0x36
    1b14:	af ab       	std	Y+55, r26	; 0x37
    1b16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	89 ab       	std	Y+49, r24	; 0x31
    1b32:	9a ab       	std	Y+50, r25	; 0x32
    1b34:	ab ab       	std	Y+51, r26	; 0x33
    1b36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b38:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <main+0x4b6>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	98 ab       	std	Y+48, r25	; 0x30
    1b56:	8f a7       	std	Y+47, r24	; 0x2f
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <main+0x534>
	else if (__tmp > 65535)
    1b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b60:	9c a9       	ldd	r25, Y+52	; 0x34
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <main+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6d a9       	ldd	r22, Y+53	; 0x35
    1b74:	7e a9       	ldd	r23, Y+54	; 0x36
    1b76:	8f a9       	ldd	r24, Y+55	; 0x37
    1b78:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <main+0x516>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9e a7       	std	Y+46, r25	; 0x2e
    1ba2:	8d a7       	std	Y+45, r24	; 0x2d
    1ba4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <main+0x504>
    1bac:	9e a7       	std	Y+46, r25	; 0x2e
    1bae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	98 ab       	std	Y+48, r25	; 0x30
    1bb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <main+0x4f8>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <main+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bca:	9c a9       	ldd	r25, Y+52	; 0x34
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	98 ab       	std	Y+48, r25	; 0x30
    1bd6:	8f a7       	std	Y+47, r24	; 0x2f
    1bd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bda:	98 a9       	ldd	r25, Y+48	; 0x30
    1bdc:	9c a7       	std	Y+44, r25	; 0x2c
    1bde:	8b a7       	std	Y+43, r24	; 0x2b
    1be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <main+0x540>
    1be8:	9c a7       	std	Y+44, r25	; 0x2c
    1bea:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					if(Wrong_Entries_Number == 3)
    1bec:	80 91 a4 01 	lds	r24, 0x01A4
    1bf0:	83 30       	cpi	r24, 0x03	; 3
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <main+0x552>
    1bf4:	fc ce       	rjmp	.-520    	; 0x19ee <main+0x34a>
					{
						UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
    1bf6:	80 e1       	ldi	r24, 0x10	; 16
    1bf8:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
						while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU2 is Synchronized*/
    1bfc:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    1c00:	80 31       	cpi	r24, 0x10	; 16
    1c02:	e1 f7       	brne	.-8      	; 0x1bfc <main+0x558>
						TIMER1_Config.Compare_Value16 = Compare_Value_For_60_Seconds;
    1c04:	84 e2       	ldi	r24, 0x24	; 36
    1c06:	94 ef       	ldi	r25, 0xF4	; 244
    1c08:	90 93 9c 01 	sts	0x019C, r25
    1c0c:	80 93 9b 01 	sts	0x019B, r24
						/*3 times - 20secondsx3 times = 60 seconds*/
						TIMER1_init(&TIMER1_Config);
    1c10:	87 e9       	ldi	r24, 0x97	; 151
    1c12:	91 e0       	ldi	r25, 0x01	; 1
    1c14:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
						Timer1_ON = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	80 93 a2 01 	sts	0x01A2, r24
						LCD_clearScreen();
    1c1e:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
						LCD_displayString("     ERROR     ");
    1c22:	87 e6       	ldi	r24, 0x67	; 103
    1c24:	91 e0       	ldi	r25, 0x01	; 1
    1c26:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
						LCD_moveCursor(1,0);
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
						LCD_displayString("     ALARM     ");
    1c32:	87 e7       	ldi	r24, 0x77	; 119
    1c34:	91 e0       	ldi	r25, 0x01	; 1
    1c36:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
						while(Timer1_ON == 1){};
    1c3a:	80 91 a2 01 	lds	r24, 0x01A2
    1c3e:	81 30       	cpi	r24, 0x01	; 1
    1c40:	e1 f3       	breq	.-8      	; 0x1c3a <main+0x596>
						TIMER1_init(&TIMER1_Config);
    1c42:	87 e9       	ldi	r24, 0x97	; 151
    1c44:	91 e0       	ldi	r25, 0x01	; 1
    1c46:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
						Timer1_ON = 1;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	80 93 a2 01 	sts	0x01A2, r24
						while(Timer1_ON == 1){};
    1c50:	80 91 a2 01 	lds	r24, 0x01A2
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	e1 f3       	breq	.-8      	; 0x1c50 <main+0x5ac>
						TIMER1_init(&TIMER1_Config);
    1c58:	87 e9       	ldi	r24, 0x97	; 151
    1c5a:	91 e0       	ldi	r25, 0x01	; 1
    1c5c:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
						Timer1_ON = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 a2 01 	sts	0x01A2, r24
						while(Timer1_ON == 1){};
    1c66:	80 91 a2 01 	lds	r24, 0x01A2
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	e1 f3       	breq	.-8      	; 0x1c66 <main+0x5c2>
						/*-------------------------------------------------------------------------*/
						Wrong_Entries_Number = 0;	/*Reset number of wrong entries*/
    1c6e:	10 92 a4 01 	sts	0x01A4, r1
						break; /*Exit the While Loop and ask again for options*/
					}
				}
			}
			Main_Menu_Choice = 0;	/*Reset main menu choice*/
    1c72:	10 92 a1 01 	sts	0x01A1, r1
    1c76:	a5 ce       	rjmp	.-694    	; 0x19c2 <main+0x31e>
		}
		else if (Main_Menu_Choice == '-')
    1c78:	80 91 a1 01 	lds	r24, 0x01A1
    1c7c:	8d 32       	cpi	r24, 0x2D	; 45
    1c7e:	09 f0       	breq	.+2      	; 0x1c82 <main+0x5de>
    1c80:	a0 ce       	rjmp	.-704    	; 0x19c2 <main+0x31e>
		{
			while(1)
			{
				Enter_Password();
    1c82:	0e 94 ce 09 	call	0x139c	; 0x139c <Enter_Password>
				Send_Password();
    1c86:	0e 94 31 0b 	call	0x1662	; 0x1662 <Send_Password>
				while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU2 is Synchronized*/
    1c8a:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    1c8e:	80 31       	cpi	r24, 0x10	; 16
    1c90:	e1 f7       	brne	.-8      	; 0x1c8a <main+0x5e6>
				/*Beware at this point*/
				UART_sendByte(UART_SEND_OR_RECEIVE_READY); /*Send that this ECU is Synchronized*/
    1c92:	80 e1       	ldi	r24, 0x10	; 16
    1c94:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
				password_match = UART_receiveByte(); /*Receive password matching*/
    1c98:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    1c9c:	80 93 a0 01 	sts	0x01A0, r24
				if(password_match == 1)	/*If matched*/
    1ca0:	80 91 a0 01 	lds	r24, 0x01A0
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	09 f0       	breq	.+2      	; 0x1caa <main+0x606>
    1ca8:	22 c1       	rjmp	.+580    	; 0x1eee <main+0x84a>
				{
					password_match = 0;	/*End Matching Case*/
    1caa:	10 92 a0 01 	sts	0x01A0, r1
    1cae:	15 c1       	rjmp	.+554    	; 0x1eda <main+0x836>
					while(password_match != 1)
					{
						Enter_New_Password();	/*Ask the user to enter the new password*/
    1cb0:	0e 94 d3 06 	call	0xda6	; 0xda6 <Enter_New_Password>
						Send_New_Password();		/*Send the new password to ECU2*/
    1cb4:	0e 94 82 09 	call	0x1304	; 0x1304 <Send_New_Password>
						while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU2 is Synchronized*/
    1cb8:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    1cbc:	80 31       	cpi	r24, 0x10	; 16
    1cbe:	e1 f7       	brne	.-8      	; 0x1cb8 <main+0x614>
						/*Beware at this point*/
						UART_sendByte(UART_SEND_OR_RECEIVE_READY); /*Send that this ECU is Synchronized*/
    1cc0:	80 e1       	ldi	r24, 0x10	; 16
    1cc2:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
						password_match = UART_receiveByte(); /*Receive password matching*/
    1cc6:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    1cca:	80 93 a0 01 	sts	0x01A0, r24
						if(password_match != 1)
    1cce:	80 91 a0 01 	lds	r24, 0x01A0
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <main+0x634>
    1cd6:	81 c0       	rjmp	.+258    	; 0x1dda <main+0x736>
						{
							LCD_clearScreen();
    1cd8:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
							LCD_displayString("password entered");
    1cdc:	80 ef       	ldi	r24, 0xF0	; 240
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
							LCD_moveCursor(1,0);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	60 e0       	ldi	r22, 0x00	; 0
    1ce8:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
							LCD_displayString("isn't matched");
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	91 e0       	ldi	r25, 0x01	; 1
    1cf0:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	aa e7       	ldi	r26, 0x7A	; 122
    1cfa:	b4 e4       	ldi	r27, 0x44	; 68
    1cfc:	8f a3       	std	Y+39, r24	; 0x27
    1cfe:	98 a7       	std	Y+40, r25	; 0x28
    1d00:	a9 a7       	std	Y+41, r26	; 0x29
    1d02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d04:	6f a1       	ldd	r22, Y+39	; 0x27
    1d06:	78 a5       	ldd	r23, Y+40	; 0x28
    1d08:	89 a5       	ldd	r24, Y+41	; 0x29
    1d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4a ef       	ldi	r20, 0xFA	; 250
    1d12:	54 e4       	ldi	r21, 0x44	; 68
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8b a3       	std	Y+35, r24	; 0x23
    1d1e:	9c a3       	std	Y+36, r25	; 0x24
    1d20:	ad a3       	std	Y+37, r26	; 0x25
    1d22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d24:	6b a1       	ldd	r22, Y+35	; 0x23
    1d26:	7c a1       	ldd	r23, Y+36	; 0x24
    1d28:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	2c f4       	brge	.+10     	; 0x1d46 <main+0x6a2>
		__ticks = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	9a a3       	std	Y+34, r25	; 0x22
    1d42:	89 a3       	std	Y+33, r24	; 0x21
    1d44:	3f c0       	rjmp	.+126    	; 0x1dc4 <main+0x720>
	else if (__tmp > 65535)
    1d46:	6b a1       	ldd	r22, Y+35	; 0x23
    1d48:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	3f ef       	ldi	r19, 0xFF	; 255
    1d52:	4f e7       	ldi	r20, 0x7F	; 127
    1d54:	57 e4       	ldi	r21, 0x47	; 71
    1d56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5a:	18 16       	cp	r1, r24
    1d5c:	4c f5       	brge	.+82     	; 0x1db0 <main+0x70c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d60:	78 a5       	ldd	r23, Y+40	; 0x28
    1d62:	89 a5       	ldd	r24, Y+41	; 0x29
    1d64:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	bc 01       	movw	r22, r24
    1d78:	cd 01       	movw	r24, r26
    1d7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	9a a3       	std	Y+34, r25	; 0x22
    1d84:	89 a3       	std	Y+33, r24	; 0x21
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <main+0x702>
    1d88:	88 ec       	ldi	r24, 0xC8	; 200
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	98 a3       	std	Y+32, r25	; 0x20
    1d8e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d92:	98 a1       	ldd	r25, Y+32	; 0x20
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	f1 f7       	brne	.-4      	; 0x1d94 <main+0x6f0>
    1d98:	98 a3       	std	Y+32, r25	; 0x20
    1d9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	9a a3       	std	Y+34, r25	; 0x22
    1da4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da6:	89 a1       	ldd	r24, Y+33	; 0x21
    1da8:	9a a1       	ldd	r25, Y+34	; 0x22
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	69 f7       	brne	.-38     	; 0x1d88 <main+0x6e4>
    1dae:	95 c0       	rjmp	.+298    	; 0x1eda <main+0x836>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db0:	6b a1       	ldd	r22, Y+35	; 0x23
    1db2:	7c a1       	ldd	r23, Y+36	; 0x24
    1db4:	8d a1       	ldd	r24, Y+37	; 0x25
    1db6:	9e a1       	ldd	r25, Y+38	; 0x26
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	9a a3       	std	Y+34, r25	; 0x22
    1dc2:	89 a3       	std	Y+33, r24	; 0x21
    1dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dca:	8d 8f       	std	Y+29, r24	; 0x1d
    1dcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <main+0x72c>
    1dd4:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd6:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd8:	80 c0       	rjmp	.+256    	; 0x1eda <main+0x836>
							_delay_ms(1000);
						}
						else
						{
							LCD_clearScreen();
    1dda:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
							LCD_displayString("password entered");
    1dde:	80 ef       	ldi	r24, 0xF0	; 240
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
							LCD_moveCursor(1,0);
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
							LCD_displayString("successfully");
    1dee:	8f e0       	ldi	r24, 0x0F	; 15
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	aa e7       	ldi	r26, 0x7A	; 122
    1dfc:	b4 e4       	ldi	r27, 0x44	; 68
    1dfe:	89 8f       	std	Y+25, r24	; 0x19
    1e00:	9a 8f       	std	Y+26, r25	; 0x1a
    1e02:	ab 8f       	std	Y+27, r26	; 0x1b
    1e04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e06:	69 8d       	ldd	r22, Y+25	; 0x19
    1e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	4a ef       	ldi	r20, 0xFA	; 250
    1e14:	54 e4       	ldi	r21, 0x44	; 68
    1e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	8d 8b       	std	Y+21, r24	; 0x15
    1e20:	9e 8b       	std	Y+22, r25	; 0x16
    1e22:	af 8b       	std	Y+23, r26	; 0x17
    1e24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e26:	6d 89       	ldd	r22, Y+21	; 0x15
    1e28:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e8       	ldi	r20, 0x80	; 128
    1e34:	5f e3       	ldi	r21, 0x3F	; 63
    1e36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e3a:	88 23       	and	r24, r24
    1e3c:	2c f4       	brge	.+10     	; 0x1e48 <main+0x7a4>
		__ticks = 1;
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
    1e46:	3f c0       	rjmp	.+126    	; 0x1ec6 <main+0x822>
	else if (__tmp > 65535)
    1e48:	6d 89       	ldd	r22, Y+21	; 0x15
    1e4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	3f ef       	ldi	r19, 0xFF	; 255
    1e54:	4f e7       	ldi	r20, 0x7F	; 127
    1e56:	57 e4       	ldi	r21, 0x47	; 71
    1e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e5c:	18 16       	cp	r1, r24
    1e5e:	4c f5       	brge	.+82     	; 0x1eb2 <main+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e60:	69 8d       	ldd	r22, Y+25	; 0x19
    1e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e2       	ldi	r20, 0x20	; 32
    1e6e:	51 e4       	ldi	r21, 0x41	; 65
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	9c 8b       	std	Y+20, r25	; 0x14
    1e86:	8b 8b       	std	Y+19, r24	; 0x13
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <main+0x804>
    1e8a:	88 ec       	ldi	r24, 0xC8	; 200
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9a 8b       	std	Y+18, r25	; 0x12
    1e90:	89 8b       	std	Y+17, r24	; 0x11
    1e92:	89 89       	ldd	r24, Y+17	; 0x11
    1e94:	9a 89       	ldd	r25, Y+18	; 0x12
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <main+0x7f2>
    1e9a:	9a 8b       	std	Y+18, r25	; 0x12
    1e9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	9c 8b       	std	Y+20, r25	; 0x14
    1ea6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1eac:	00 97       	sbiw	r24, 0x00	; 0
    1eae:	69 f7       	brne	.-38     	; 0x1e8a <main+0x7e6>
    1eb0:	14 c0       	rjmp	.+40     	; 0x1eda <main+0x836>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb2:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb4:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb6:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	9c 8b       	std	Y+20, r25	; 0x14
    1ec4:	8b 8b       	std	Y+19, r24	; 0x13
    1ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eca:	98 8b       	std	Y+16, r25	; 0x10
    1ecc:	8f 87       	std	Y+15, r24	; 0x0f
    1ece:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed0:	98 89       	ldd	r25, Y+16	; 0x10
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	f1 f7       	brne	.-4      	; 0x1ed2 <main+0x82e>
    1ed6:	98 8b       	std	Y+16, r25	; 0x10
    1ed8:	8f 87       	std	Y+15, r24	; 0x0f
				UART_sendByte(UART_SEND_OR_RECEIVE_READY); /*Send that this ECU is Synchronized*/
				password_match = UART_receiveByte(); /*Receive password matching*/
				if(password_match == 1)	/*If matched*/
				{
					password_match = 0;	/*End Matching Case*/
					while(password_match != 1)
    1eda:	80 91 a0 01 	lds	r24, 0x01A0
    1ede:	81 30       	cpi	r24, 0x01	; 1
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <main+0x840>
    1ee2:	e6 ce       	rjmp	.-564    	; 0x1cb0 <main+0x60c>
							LCD_moveCursor(1,0);
							LCD_displayString("successfully");
							_delay_ms(1000);
						}
					}
					Wrong_Entries_Number = 0;	/*Reset number of wrong entries*/
    1ee4:	10 92 a4 01 	sts	0x01A4, r1
					password_match = 0;			/*End Matching Case*/
    1ee8:	10 92 a0 01 	sts	0x01A0, r1
    1eec:	cd c0       	rjmp	.+410    	; 0x2088 <main+0x9e4>
					break; /*Exit the While Loop and ask again for options*/
				}
				else if (password_match == 0)
    1eee:	80 91 a0 01 	lds	r24, 0x01A0
    1ef2:	88 23       	and	r24, r24
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <main+0x854>
    1ef6:	c5 ce       	rjmp	.-630    	; 0x1c82 <main+0x5de>
				{
					Wrong_Entries_Number++;
    1ef8:	80 91 a4 01 	lds	r24, 0x01A4
    1efc:	8f 5f       	subi	r24, 0xFF	; 255
    1efe:	80 93 a4 01 	sts	0x01A4, r24
					LCD_clearScreen();
    1f02:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
					LCD_displayString("Password Entered");
    1f06:	8d e4       	ldi	r24, 0x4D	; 77
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
					LCD_moveCursor(1,0);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
					LCD_displayString("is Wrong");
    1f16:	8e e5       	ldi	r24, 0x5E	; 94
    1f18:	91 e0       	ldi	r25, 0x01	; 1
    1f1a:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	aa e7       	ldi	r26, 0x7A	; 122
    1f24:	b4 e4       	ldi	r27, 0x44	; 68
    1f26:	8b 87       	std	Y+11, r24	; 0x0b
    1f28:	9c 87       	std	Y+12, r25	; 0x0c
    1f2a:	ad 87       	std	Y+13, r26	; 0x0d
    1f2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f30:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f32:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f34:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	4a ef       	ldi	r20, 0xFA	; 250
    1f3c:	54 e4       	ldi	r21, 0x44	; 68
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	8f 83       	std	Y+7, r24	; 0x07
    1f48:	98 87       	std	Y+8, r25	; 0x08
    1f4a:	a9 87       	std	Y+9, r26	; 0x09
    1f4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f50:	78 85       	ldd	r23, Y+8	; 0x08
    1f52:	89 85       	ldd	r24, Y+9	; 0x09
    1f54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e8       	ldi	r20, 0x80	; 128
    1f5c:	5f e3       	ldi	r21, 0x3F	; 63
    1f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f62:	88 23       	and	r24, r24
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <main+0x8cc>
		__ticks = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9e 83       	std	Y+6, r25	; 0x06
    1f6c:	8d 83       	std	Y+5, r24	; 0x05
    1f6e:	3f c0       	rjmp	.+126    	; 0x1fee <main+0x94a>
	else if (__tmp > 65535)
    1f70:	6f 81       	ldd	r22, Y+7	; 0x07
    1f72:	78 85       	ldd	r23, Y+8	; 0x08
    1f74:	89 85       	ldd	r24, Y+9	; 0x09
    1f76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	3f ef       	ldi	r19, 0xFF	; 255
    1f7c:	4f e7       	ldi	r20, 0x7F	; 127
    1f7e:	57 e4       	ldi	r21, 0x47	; 71
    1f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f84:	18 16       	cp	r1, r24
    1f86:	4c f5       	brge	.+82     	; 0x1fda <main+0x936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	0f c0       	rjmp	.+30     	; 0x1fd0 <main+0x92c>
    1fb2:	88 ec       	ldi	r24, 0xC8	; 200
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <main+0x91a>
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	69 f7       	brne	.-38     	; 0x1fb2 <main+0x90e>
    1fd8:	14 c0       	rjmp	.+40     	; 0x2002 <main+0x95e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fda:	6f 81       	ldd	r22, Y+7	; 0x07
    1fdc:	78 85       	ldd	r23, Y+8	; 0x08
    1fde:	89 85       	ldd	r24, Y+9	; 0x09
    1fe0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	9e 83       	std	Y+6, r25	; 0x06
    1fec:	8d 83       	std	Y+5, r24	; 0x05
    1fee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <main+0x956>
    1ffe:	9a 83       	std	Y+2, r25	; 0x02
    2000:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					if(Wrong_Entries_Number == 3)
    2002:	80 91 a4 01 	lds	r24, 0x01A4
    2006:	83 30       	cpi	r24, 0x03	; 3
    2008:	09 f0       	breq	.+2      	; 0x200c <main+0x968>
    200a:	3b ce       	rjmp	.-906    	; 0x1c82 <main+0x5de>
					{
						UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
    200c:	80 e1       	ldi	r24, 0x10	; 16
    200e:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
						while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU2 is Synchronized*/
    2012:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    2016:	80 31       	cpi	r24, 0x10	; 16
    2018:	e1 f7       	brne	.-8      	; 0x2012 <main+0x96e>
						TIMER1_Config.Compare_Value16 = Compare_Value_For_60_Seconds;
    201a:	84 e2       	ldi	r24, 0x24	; 36
    201c:	94 ef       	ldi	r25, 0xF4	; 244
    201e:	90 93 9c 01 	sts	0x019C, r25
    2022:	80 93 9b 01 	sts	0x019B, r24
						/*3 times - 20secondsx3 times = 60 seconds*/
						TIMER1_init(&TIMER1_Config);
    2026:	87 e9       	ldi	r24, 0x97	; 151
    2028:	91 e0       	ldi	r25, 0x01	; 1
    202a:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
						Timer1_ON = 1;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	80 93 a2 01 	sts	0x01A2, r24
						LCD_clearScreen();
    2034:	0e 94 0d 1a 	call	0x341a	; 0x341a <LCD_clearScreen>
						LCD_displayString("     ERROR     ");
    2038:	87 e6       	ldi	r24, 0x67	; 103
    203a:	91 e0       	ldi	r25, 0x01	; 1
    203c:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
						LCD_moveCursor(1,0);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	60 e0       	ldi	r22, 0x00	; 0
    2044:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
						LCD_displayString("     ALARM     ");
    2048:	87 e7       	ldi	r24, 0x77	; 119
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
						while(Timer1_ON == 1){};
    2050:	80 91 a2 01 	lds	r24, 0x01A2
    2054:	81 30       	cpi	r24, 0x01	; 1
    2056:	e1 f3       	breq	.-8      	; 0x2050 <main+0x9ac>
						TIMER1_init(&TIMER1_Config);
    2058:	87 e9       	ldi	r24, 0x97	; 151
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
						Timer1_ON = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	80 93 a2 01 	sts	0x01A2, r24
						while(Timer1_ON == 1){};
    2066:	80 91 a2 01 	lds	r24, 0x01A2
    206a:	81 30       	cpi	r24, 0x01	; 1
    206c:	e1 f3       	breq	.-8      	; 0x2066 <main+0x9c2>
						TIMER1_init(&TIMER1_Config);
    206e:	87 e9       	ldi	r24, 0x97	; 151
    2070:	91 e0       	ldi	r25, 0x01	; 1
    2072:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <TIMER1_init>
						Timer1_ON = 1;
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	80 93 a2 01 	sts	0x01A2, r24
						while(Timer1_ON == 1){};
    207c:	80 91 a2 01 	lds	r24, 0x01A2
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	e1 f3       	breq	.-8      	; 0x207c <main+0x9d8>
						/*-------------------------------------------------------------------------*/
						Wrong_Entries_Number = 0;	/*Reset number of wrong entries*/
    2084:	10 92 a4 01 	sts	0x01A4, r1
						break; /*Exit the While Loop and ask again for options*/
					}
				}
			}
			Main_Menu_Choice = 0;	/*Reset main menu choice*/
    2088:	10 92 a1 01 	sts	0x01A1, r1
    208c:	9a cc       	rjmp	.-1740   	; 0x19c2 <main+0x31e>

0000208e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	00 d0       	rcall	.+0      	; 0x2094 <GPIO_setupPinDirection+0x6>
    2094:	00 d0       	rcall	.+0      	; 0x2096 <GPIO_setupPinDirection+0x8>
    2096:	0f 92       	push	r0
    2098:	cd b7       	in	r28, 0x3d	; 61
    209a:	de b7       	in	r29, 0x3e	; 62
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	6a 83       	std	Y+2, r22	; 0x02
    20a0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	88 30       	cpi	r24, 0x08	; 8
    20a6:	08 f0       	brcs	.+2      	; 0x20aa <GPIO_setupPinDirection+0x1c>
    20a8:	d5 c0       	rjmp	.+426    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	84 30       	cpi	r24, 0x04	; 4
    20ae:	08 f0       	brcs	.+2      	; 0x20b2 <GPIO_setupPinDirection+0x24>
    20b0:	d1 c0       	rjmp	.+418    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	3d 83       	std	Y+5, r19	; 0x05
    20ba:	2c 83       	std	Y+4, r18	; 0x04
    20bc:	8c 81       	ldd	r24, Y+4	; 0x04
    20be:	9d 81       	ldd	r25, Y+5	; 0x05
    20c0:	81 30       	cpi	r24, 0x01	; 1
    20c2:	91 05       	cpc	r25, r1
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <GPIO_setupPinDirection+0x3a>
    20c6:	43 c0       	rjmp	.+134    	; 0x214e <GPIO_setupPinDirection+0xc0>
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	3d 81       	ldd	r19, Y+5	; 0x05
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	2c f4       	brge	.+10     	; 0x20dc <GPIO_setupPinDirection+0x4e>
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	71 f0       	breq	.+28     	; 0x20f6 <GPIO_setupPinDirection+0x68>
    20da:	bc c0       	rjmp	.+376    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
    20dc:	2c 81       	ldd	r18, Y+4	; 0x04
    20de:	3d 81       	ldd	r19, Y+5	; 0x05
    20e0:	22 30       	cpi	r18, 0x02	; 2
    20e2:	31 05       	cpc	r19, r1
    20e4:	09 f4       	brne	.+2      	; 0x20e8 <GPIO_setupPinDirection+0x5a>
    20e6:	5f c0       	rjmp	.+190    	; 0x21a6 <GPIO_setupPinDirection+0x118>
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	83 30       	cpi	r24, 0x03	; 3
    20ee:	91 05       	cpc	r25, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <GPIO_setupPinDirection+0x66>
    20f2:	85 c0       	rjmp	.+266    	; 0x21fe <GPIO_setupPinDirection+0x170>
    20f4:	af c0       	rjmp	.+350    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    20f6:	8b 81       	ldd	r24, Y+3	; 0x03
    20f8:	81 30       	cpi	r24, 0x01	; 1
    20fa:	a1 f4       	brne	.+40     	; 0x2124 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    20fc:	aa e3       	ldi	r26, 0x3A	; 58
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	ea e3       	ldi	r30, 0x3A	; 58
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	48 2f       	mov	r20, r24
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	02 2e       	mov	r0, r18
    2114:	02 c0       	rjmp	.+4      	; 0x211a <GPIO_setupPinDirection+0x8c>
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	0a 94       	dec	r0
    211c:	e2 f7       	brpl	.-8      	; 0x2116 <GPIO_setupPinDirection+0x88>
    211e:	84 2b       	or	r24, r20
    2120:	8c 93       	st	X, r24
    2122:	98 c0       	rjmp	.+304    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2124:	aa e3       	ldi	r26, 0x3A	; 58
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	ea e3       	ldi	r30, 0x3A	; 58
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	48 2f       	mov	r20, r24
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	02 2e       	mov	r0, r18
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <GPIO_setupPinDirection+0xb4>
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	0a 94       	dec	r0
    2144:	e2 f7       	brpl	.-8      	; 0x213e <GPIO_setupPinDirection+0xb0>
    2146:	80 95       	com	r24
    2148:	84 23       	and	r24, r20
    214a:	8c 93       	st	X, r24
    214c:	83 c0       	rjmp	.+262    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	81 30       	cpi	r24, 0x01	; 1
    2152:	a1 f4       	brne	.+40     	; 0x217c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    2154:	a7 e3       	ldi	r26, 0x37	; 55
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e7 e3       	ldi	r30, 0x37	; 55
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	48 2f       	mov	r20, r24
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	02 2e       	mov	r0, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <GPIO_setupPinDirection+0xe4>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	0a 94       	dec	r0
    2174:	e2 f7       	brpl	.-8      	; 0x216e <GPIO_setupPinDirection+0xe0>
    2176:	84 2b       	or	r24, r20
    2178:	8c 93       	st	X, r24
    217a:	6c c0       	rjmp	.+216    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    217c:	a7 e3       	ldi	r26, 0x37	; 55
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e7 e3       	ldi	r30, 0x37	; 55
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <GPIO_setupPinDirection+0x10c>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <GPIO_setupPinDirection+0x108>
    219e:	80 95       	com	r24
    21a0:	84 23       	and	r24, r20
    21a2:	8c 93       	st	X, r24
    21a4:	57 c0       	rjmp	.+174    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	a1 f4       	brne	.+40     	; 0x21d4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    21ac:	a4 e3       	ldi	r26, 0x34	; 52
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e4 e3       	ldi	r30, 0x34	; 52
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	48 2f       	mov	r20, r24
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	02 2e       	mov	r0, r18
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <GPIO_setupPinDirection+0x13c>
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	0a 94       	dec	r0
    21cc:	e2 f7       	brpl	.-8      	; 0x21c6 <GPIO_setupPinDirection+0x138>
    21ce:	84 2b       	or	r24, r20
    21d0:	8c 93       	st	X, r24
    21d2:	40 c0       	rjmp	.+128    	; 0x2254 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    21d4:	a4 e3       	ldi	r26, 0x34	; 52
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e4 e3       	ldi	r30, 0x34	; 52
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	48 2f       	mov	r20, r24
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	02 2e       	mov	r0, r18
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <GPIO_setupPinDirection+0x164>
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	0a 94       	dec	r0
    21f4:	e2 f7       	brpl	.-8      	; 0x21ee <GPIO_setupPinDirection+0x160>
    21f6:	80 95       	com	r24
    21f8:	84 23       	and	r24, r20
    21fa:	8c 93       	st	X, r24
    21fc:	2b c0       	rjmp	.+86     	; 0x2254 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	81 30       	cpi	r24, 0x01	; 1
    2202:	a1 f4       	brne	.+40     	; 0x222c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2204:	a1 e3       	ldi	r26, 0x31	; 49
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e1 e3       	ldi	r30, 0x31	; 49
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	48 2f       	mov	r20, r24
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	02 2e       	mov	r0, r18
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <GPIO_setupPinDirection+0x194>
    221e:	88 0f       	add	r24, r24
    2220:	99 1f       	adc	r25, r25
    2222:	0a 94       	dec	r0
    2224:	e2 f7       	brpl	.-8      	; 0x221e <GPIO_setupPinDirection+0x190>
    2226:	84 2b       	or	r24, r20
    2228:	8c 93       	st	X, r24
    222a:	14 c0       	rjmp	.+40     	; 0x2254 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    222c:	a1 e3       	ldi	r26, 0x31	; 49
    222e:	b0 e0       	ldi	r27, 0x00	; 0
    2230:	e1 e3       	ldi	r30, 0x31	; 49
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	48 2f       	mov	r20, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	02 2e       	mov	r0, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <GPIO_setupPinDirection+0x1bc>
    2246:	88 0f       	add	r24, r24
    2248:	99 1f       	adc	r25, r25
    224a:	0a 94       	dec	r0
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <GPIO_setupPinDirection+0x1b8>
    224e:	80 95       	com	r24
    2250:	84 23       	and	r24, r20
    2252:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <GPIO_writePin+0x6>
    226a:	00 d0       	rcall	.+0      	; 0x226c <GPIO_writePin+0x8>
    226c:	0f 92       	push	r0
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	6a 83       	std	Y+2, r22	; 0x02
    2276:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= 4 || pin_num >= 8)
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	84 30       	cpi	r24, 0x04	; 4
    227c:	08 f0       	brcs	.+2      	; 0x2280 <GPIO_writePin+0x1c>
    227e:	d5 c0       	rjmp	.+426    	; 0x242a <GPIO_writePin+0x1c6>
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	88 30       	cpi	r24, 0x08	; 8
    2284:	08 f0       	brcs	.+2      	; 0x2288 <GPIO_writePin+0x24>
    2286:	d1 c0       	rjmp	.+418    	; 0x242a <GPIO_writePin+0x1c6>
		{
			/*do nothing*/
		}
		else
		{
			switch (port_num)
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	3d 83       	std	Y+5, r19	; 0x05
    2290:	2c 83       	std	Y+4, r18	; 0x04
    2292:	8c 81       	ldd	r24, Y+4	; 0x04
    2294:	9d 81       	ldd	r25, Y+5	; 0x05
    2296:	81 30       	cpi	r24, 0x01	; 1
    2298:	91 05       	cpc	r25, r1
    229a:	09 f4       	brne	.+2      	; 0x229e <GPIO_writePin+0x3a>
    229c:	43 c0       	rjmp	.+134    	; 0x2324 <GPIO_writePin+0xc0>
    229e:	2c 81       	ldd	r18, Y+4	; 0x04
    22a0:	3d 81       	ldd	r19, Y+5	; 0x05
    22a2:	22 30       	cpi	r18, 0x02	; 2
    22a4:	31 05       	cpc	r19, r1
    22a6:	2c f4       	brge	.+10     	; 0x22b2 <GPIO_writePin+0x4e>
    22a8:	8c 81       	ldd	r24, Y+4	; 0x04
    22aa:	9d 81       	ldd	r25, Y+5	; 0x05
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	71 f0       	breq	.+28     	; 0x22cc <GPIO_writePin+0x68>
    22b0:	bc c0       	rjmp	.+376    	; 0x242a <GPIO_writePin+0x1c6>
    22b2:	2c 81       	ldd	r18, Y+4	; 0x04
    22b4:	3d 81       	ldd	r19, Y+5	; 0x05
    22b6:	22 30       	cpi	r18, 0x02	; 2
    22b8:	31 05       	cpc	r19, r1
    22ba:	09 f4       	brne	.+2      	; 0x22be <GPIO_writePin+0x5a>
    22bc:	5f c0       	rjmp	.+190    	; 0x237c <GPIO_writePin+0x118>
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	9d 81       	ldd	r25, Y+5	; 0x05
    22c2:	83 30       	cpi	r24, 0x03	; 3
    22c4:	91 05       	cpc	r25, r1
    22c6:	09 f4       	brne	.+2      	; 0x22ca <GPIO_writePin+0x66>
    22c8:	85 c0       	rjmp	.+266    	; 0x23d4 <GPIO_writePin+0x170>
    22ca:	af c0       	rjmp	.+350    	; 0x242a <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if(value == LOGIC_HIGH)
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	81 30       	cpi	r24, 0x01	; 1
    22d0:	a1 f4       	brne	.+40     	; 0x22fa <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA,pin_num);
    22d2:	ab e3       	ldi	r26, 0x3B	; 59
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	eb e3       	ldi	r30, 0x3B	; 59
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <GPIO_writePin+0x8c>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <GPIO_writePin+0x88>
    22f4:	84 2b       	or	r24, r20
    22f6:	8c 93       	st	X, r24
    22f8:	98 c0       	rjmp	.+304    	; 0x242a <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA,pin_num);
    22fa:	ab e3       	ldi	r26, 0x3B	; 59
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	eb e3       	ldi	r30, 0x3B	; 59
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <GPIO_writePin+0xb4>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <GPIO_writePin+0xb0>
    231c:	80 95       	com	r24
    231e:	84 23       	and	r24, r20
    2320:	8c 93       	st	X, r24
    2322:	83 c0       	rjmp	.+262    	; 0x242a <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_HIGH)
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	81 30       	cpi	r24, 0x01	; 1
    2328:	a1 f4       	brne	.+40     	; 0x2352 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB,pin_num);
    232a:	a8 e3       	ldi	r26, 0x38	; 56
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e8 e3       	ldi	r30, 0x38	; 56
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	48 2f       	mov	r20, r24
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	02 2e       	mov	r0, r18
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <GPIO_writePin+0xe4>
    2344:	88 0f       	add	r24, r24
    2346:	99 1f       	adc	r25, r25
    2348:	0a 94       	dec	r0
    234a:	e2 f7       	brpl	.-8      	; 0x2344 <GPIO_writePin+0xe0>
    234c:	84 2b       	or	r24, r20
    234e:	8c 93       	st	X, r24
    2350:	6c c0       	rjmp	.+216    	; 0x242a <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB,pin_num);
    2352:	a8 e3       	ldi	r26, 0x38	; 56
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e8 e3       	ldi	r30, 0x38	; 56
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	48 2f       	mov	r20, r24
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	02 2e       	mov	r0, r18
    236a:	02 c0       	rjmp	.+4      	; 0x2370 <GPIO_writePin+0x10c>
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	0a 94       	dec	r0
    2372:	e2 f7       	brpl	.-8      	; 0x236c <GPIO_writePin+0x108>
    2374:	80 95       	com	r24
    2376:	84 23       	and	r24, r20
    2378:	8c 93       	st	X, r24
    237a:	57 c0       	rjmp	.+174    	; 0x242a <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_HIGH)
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	81 30       	cpi	r24, 0x01	; 1
    2380:	a1 f4       	brne	.+40     	; 0x23aa <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC,pin_num);
    2382:	a5 e3       	ldi	r26, 0x35	; 53
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	e5 e3       	ldi	r30, 0x35	; 53
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	80 81       	ld	r24, Z
    238c:	48 2f       	mov	r20, r24
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	02 2e       	mov	r0, r18
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <GPIO_writePin+0x13c>
    239c:	88 0f       	add	r24, r24
    239e:	99 1f       	adc	r25, r25
    23a0:	0a 94       	dec	r0
    23a2:	e2 f7       	brpl	.-8      	; 0x239c <GPIO_writePin+0x138>
    23a4:	84 2b       	or	r24, r20
    23a6:	8c 93       	st	X, r24
    23a8:	40 c0       	rjmp	.+128    	; 0x242a <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC,pin_num);
    23aa:	a5 e3       	ldi	r26, 0x35	; 53
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	e5 e3       	ldi	r30, 0x35	; 53
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	48 2f       	mov	r20, r24
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 2e       	mov	r0, r18
    23c2:	02 c0       	rjmp	.+4      	; 0x23c8 <GPIO_writePin+0x164>
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	0a 94       	dec	r0
    23ca:	e2 f7       	brpl	.-8      	; 0x23c4 <GPIO_writePin+0x160>
    23cc:	80 95       	com	r24
    23ce:	84 23       	and	r24, r20
    23d0:	8c 93       	st	X, r24
    23d2:	2b c0       	rjmp	.+86     	; 0x242a <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_HIGH)
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	a1 f4       	brne	.+40     	; 0x2402 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD,pin_num);
    23da:	a2 e3       	ldi	r26, 0x32	; 50
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e2 e3       	ldi	r30, 0x32	; 50
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	48 2f       	mov	r20, r24
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	02 2e       	mov	r0, r18
    23f2:	02 c0       	rjmp	.+4      	; 0x23f8 <GPIO_writePin+0x194>
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	0a 94       	dec	r0
    23fa:	e2 f7       	brpl	.-8      	; 0x23f4 <GPIO_writePin+0x190>
    23fc:	84 2b       	or	r24, r20
    23fe:	8c 93       	st	X, r24
    2400:	14 c0       	rjmp	.+40     	; 0x242a <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD,pin_num);
    2402:	a2 e3       	ldi	r26, 0x32	; 50
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e2 e3       	ldi	r30, 0x32	; 50
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	80 81       	ld	r24, Z
    240c:	48 2f       	mov	r20, r24
    240e:	8a 81       	ldd	r24, Y+2	; 0x02
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	02 2e       	mov	r0, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <GPIO_writePin+0x1bc>
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	0a 94       	dec	r0
    2422:	e2 f7       	brpl	.-8      	; 0x241c <GPIO_writePin+0x1b8>
    2424:	80 95       	com	r24
    2426:	84 23       	and	r24, r20
    2428:	8c 93       	st	X, r24
				}
				break;
		}
		}
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	00 d0       	rcall	.+0      	; 0x2440 <GPIO_readPin+0x6>
    2440:	00 d0       	rcall	.+0      	; 0x2442 <GPIO_readPin+0x8>
    2442:	0f 92       	push	r0
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	8a 83       	std	Y+2, r24	; 0x02
    244a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	if(port_num >= 4 || pin_num >= 8)
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	84 30       	cpi	r24, 0x04	; 4
    2450:	18 f4       	brcc	.+6      	; 0x2458 <GPIO_readPin+0x1e>
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	88 30       	cpi	r24, 0x08	; 8
    2456:	10 f0       	brcs	.+4      	; 0x245c <GPIO_readPin+0x22>
	{
		value = LOGIC_LOW;
    2458:	19 82       	std	Y+1, r1	; 0x01
    245a:	80 c0       	rjmp	.+256    	; 0x255c <GPIO_readPin+0x122>
	}
	else
	{
		switch (port_num)
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	3d 83       	std	Y+5, r19	; 0x05
    2464:	2c 83       	std	Y+4, r18	; 0x04
    2466:	4c 81       	ldd	r20, Y+4	; 0x04
    2468:	5d 81       	ldd	r21, Y+5	; 0x05
    246a:	41 30       	cpi	r20, 0x01	; 1
    246c:	51 05       	cpc	r21, r1
    246e:	79 f1       	breq	.+94     	; 0x24ce <GPIO_readPin+0x94>
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	9d 81       	ldd	r25, Y+5	; 0x05
    2474:	82 30       	cpi	r24, 0x02	; 2
    2476:	91 05       	cpc	r25, r1
    2478:	34 f4       	brge	.+12     	; 0x2486 <GPIO_readPin+0x4c>
    247a:	2c 81       	ldd	r18, Y+4	; 0x04
    247c:	3d 81       	ldd	r19, Y+5	; 0x05
    247e:	21 15       	cp	r18, r1
    2480:	31 05       	cpc	r19, r1
    2482:	69 f0       	breq	.+26     	; 0x249e <GPIO_readPin+0x64>
    2484:	6b c0       	rjmp	.+214    	; 0x255c <GPIO_readPin+0x122>
    2486:	4c 81       	ldd	r20, Y+4	; 0x04
    2488:	5d 81       	ldd	r21, Y+5	; 0x05
    248a:	42 30       	cpi	r20, 0x02	; 2
    248c:	51 05       	cpc	r21, r1
    248e:	b9 f1       	breq	.+110    	; 0x24fe <GPIO_readPin+0xc4>
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	9d 81       	ldd	r25, Y+5	; 0x05
    2494:	83 30       	cpi	r24, 0x03	; 3
    2496:	91 05       	cpc	r25, r1
    2498:	09 f4       	brne	.+2      	; 0x249c <GPIO_readPin+0x62>
    249a:	49 c0       	rjmp	.+146    	; 0x252e <GPIO_readPin+0xf4>
    249c:	5f c0       	rjmp	.+190    	; 0x255c <GPIO_readPin+0x122>
	{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    249e:	e9 e3       	ldi	r30, 0x39	; 57
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	a9 01       	movw	r20, r18
    24b0:	02 c0       	rjmp	.+4      	; 0x24b6 <GPIO_readPin+0x7c>
    24b2:	55 95       	asr	r21
    24b4:	47 95       	ror	r20
    24b6:	8a 95       	dec	r24
    24b8:	e2 f7       	brpl	.-8      	; 0x24b2 <GPIO_readPin+0x78>
    24ba:	ca 01       	movw	r24, r20
    24bc:	81 70       	andi	r24, 0x01	; 1
    24be:	90 70       	andi	r25, 0x00	; 0
    24c0:	88 23       	and	r24, r24
    24c2:	19 f0       	breq	.+6      	; 0x24ca <GPIO_readPin+0x90>
			{
				value =  LOGIC_HIGH;
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	89 83       	std	Y+1, r24	; 0x01
    24c8:	49 c0       	rjmp	.+146    	; 0x255c <GPIO_readPin+0x122>
			}
			else
				value = LOGIC_LOW;
    24ca:	19 82       	std	Y+1, r1	; 0x01
    24cc:	47 c0       	rjmp	.+142    	; 0x255c <GPIO_readPin+0x122>
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    24ce:	e6 e3       	ldi	r30, 0x36	; 54
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	88 2f       	mov	r24, r24
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a9 01       	movw	r20, r18
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <GPIO_readPin+0xac>
    24e2:	55 95       	asr	r21
    24e4:	47 95       	ror	r20
    24e6:	8a 95       	dec	r24
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <GPIO_readPin+0xa8>
    24ea:	ca 01       	movw	r24, r20
    24ec:	81 70       	andi	r24, 0x01	; 1
    24ee:	90 70       	andi	r25, 0x00	; 0
    24f0:	88 23       	and	r24, r24
    24f2:	19 f0       	breq	.+6      	; 0x24fa <GPIO_readPin+0xc0>
			{
				value = LOGIC_HIGH;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	89 83       	std	Y+1, r24	; 0x01
    24f8:	31 c0       	rjmp	.+98     	; 0x255c <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	2f c0       	rjmp	.+94     	; 0x255c <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    24fe:	e3 e3       	ldi	r30, 0x33	; 51
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	80 81       	ld	r24, Z
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	88 2f       	mov	r24, r24
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	a9 01       	movw	r20, r18
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <GPIO_readPin+0xdc>
    2512:	55 95       	asr	r21
    2514:	47 95       	ror	r20
    2516:	8a 95       	dec	r24
    2518:	e2 f7       	brpl	.-8      	; 0x2512 <GPIO_readPin+0xd8>
    251a:	ca 01       	movw	r24, r20
    251c:	81 70       	andi	r24, 0x01	; 1
    251e:	90 70       	andi	r25, 0x00	; 0
    2520:	88 23       	and	r24, r24
    2522:	19 f0       	breq	.+6      	; 0x252a <GPIO_readPin+0xf0>
			{
				value = LOGIC_HIGH;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	19 c0       	rjmp	.+50     	; 0x255c <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    252a:	19 82       	std	Y+1, r1	; 0x01
    252c:	17 c0       	rjmp	.+46     	; 0x255c <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    252e:	e0 e3       	ldi	r30, 0x30	; 48
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	a9 01       	movw	r20, r18
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <GPIO_readPin+0x10c>
    2542:	55 95       	asr	r21
    2544:	47 95       	ror	r20
    2546:	8a 95       	dec	r24
    2548:	e2 f7       	brpl	.-8      	; 0x2542 <GPIO_readPin+0x108>
    254a:	ca 01       	movw	r24, r20
    254c:	81 70       	andi	r24, 0x01	; 1
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	88 23       	and	r24, r24
    2552:	19 f0       	breq	.+6      	; 0x255a <GPIO_readPin+0x120>
			{
				value = LOGIC_HIGH;
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	01 c0       	rjmp	.+2      	; 0x255c <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
    255a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	}
	return value;
    255c:	89 81       	ldd	r24, Y+1	; 0x01
}
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	cf 91       	pop	r28
    256a:	df 91       	pop	r29
    256c:	08 95       	ret

0000256e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    256e:	df 93       	push	r29
    2570:	cf 93       	push	r28
    2572:	00 d0       	rcall	.+0      	; 0x2574 <GPIO_setupPortDirection+0x6>
    2574:	00 d0       	rcall	.+0      	; 0x2576 <GPIO_setupPortDirection+0x8>
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	84 30       	cpi	r24, 0x04	; 4
    2582:	90 f5       	brcc	.+100    	; 0x25e8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	28 2f       	mov	r18, r24
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	3c 83       	std	Y+4, r19	; 0x04
    258c:	2b 83       	std	Y+3, r18	; 0x03
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	9c 81       	ldd	r25, Y+4	; 0x04
    2592:	81 30       	cpi	r24, 0x01	; 1
    2594:	91 05       	cpc	r25, r1
    2596:	d1 f0       	breq	.+52     	; 0x25cc <GPIO_setupPortDirection+0x5e>
    2598:	2b 81       	ldd	r18, Y+3	; 0x03
    259a:	3c 81       	ldd	r19, Y+4	; 0x04
    259c:	22 30       	cpi	r18, 0x02	; 2
    259e:	31 05       	cpc	r19, r1
    25a0:	2c f4       	brge	.+10     	; 0x25ac <GPIO_setupPortDirection+0x3e>
    25a2:	8b 81       	ldd	r24, Y+3	; 0x03
    25a4:	9c 81       	ldd	r25, Y+4	; 0x04
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	61 f0       	breq	.+24     	; 0x25c2 <GPIO_setupPortDirection+0x54>
    25aa:	1e c0       	rjmp	.+60     	; 0x25e8 <GPIO_setupPortDirection+0x7a>
    25ac:	2b 81       	ldd	r18, Y+3	; 0x03
    25ae:	3c 81       	ldd	r19, Y+4	; 0x04
    25b0:	22 30       	cpi	r18, 0x02	; 2
    25b2:	31 05       	cpc	r19, r1
    25b4:	81 f0       	breq	.+32     	; 0x25d6 <GPIO_setupPortDirection+0x68>
    25b6:	8b 81       	ldd	r24, Y+3	; 0x03
    25b8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ba:	83 30       	cpi	r24, 0x03	; 3
    25bc:	91 05       	cpc	r25, r1
    25be:	81 f0       	breq	.+32     	; 0x25e0 <GPIO_setupPortDirection+0x72>
    25c0:	13 c0       	rjmp	.+38     	; 0x25e8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    25c2:	ea e3       	ldi	r30, 0x3A	; 58
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	80 83       	st	Z, r24
    25ca:	0e c0       	rjmp	.+28     	; 0x25e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    25cc:	e7 e3       	ldi	r30, 0x37	; 55
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	80 83       	st	Z, r24
    25d4:	09 c0       	rjmp	.+18     	; 0x25e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    25d6:	e4 e3       	ldi	r30, 0x34	; 52
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	80 83       	st	Z, r24
    25de:	04 c0       	rjmp	.+8      	; 0x25e8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    25e0:	e1 e3       	ldi	r30, 0x31	; 49
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	8a 81       	ldd	r24, Y+2	; 0x02
    25e6:	80 83       	st	Z, r24
			break;
		}
	}
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <GPIO_writePort+0x6>
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <GPIO_writePort+0x8>
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= 4)
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	84 30       	cpi	r24, 0x04	; 4
    260a:	90 f5       	brcc	.+100    	; 0x2670 <GPIO_writePort+0x7a>
	{
		/* do nothing */
	}
	else
	{
		switch (port_num)
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	28 2f       	mov	r18, r24
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	3c 83       	std	Y+4, r19	; 0x04
    2614:	2b 83       	std	Y+3, r18	; 0x03
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	81 30       	cpi	r24, 0x01	; 1
    261c:	91 05       	cpc	r25, r1
    261e:	d1 f0       	breq	.+52     	; 0x2654 <GPIO_writePort+0x5e>
    2620:	2b 81       	ldd	r18, Y+3	; 0x03
    2622:	3c 81       	ldd	r19, Y+4	; 0x04
    2624:	22 30       	cpi	r18, 0x02	; 2
    2626:	31 05       	cpc	r19, r1
    2628:	2c f4       	brge	.+10     	; 0x2634 <GPIO_writePort+0x3e>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	00 97       	sbiw	r24, 0x00	; 0
    2630:	61 f0       	breq	.+24     	; 0x264a <GPIO_writePort+0x54>
    2632:	1e c0       	rjmp	.+60     	; 0x2670 <GPIO_writePort+0x7a>
    2634:	2b 81       	ldd	r18, Y+3	; 0x03
    2636:	3c 81       	ldd	r19, Y+4	; 0x04
    2638:	22 30       	cpi	r18, 0x02	; 2
    263a:	31 05       	cpc	r19, r1
    263c:	81 f0       	breq	.+32     	; 0x265e <GPIO_writePort+0x68>
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	9c 81       	ldd	r25, Y+4	; 0x04
    2642:	83 30       	cpi	r24, 0x03	; 3
    2644:	91 05       	cpc	r25, r1
    2646:	81 f0       	breq	.+32     	; 0x2668 <GPIO_writePort+0x72>
    2648:	13 c0       	rjmp	.+38     	; 0x2670 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
    264a:	eb e3       	ldi	r30, 0x3B	; 59
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	80 83       	st	Z, r24
    2652:	0e c0       	rjmp	.+28     	; 0x2670 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB = value;
    2654:	e8 e3       	ldi	r30, 0x38	; 56
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
    265a:	80 83       	st	Z, r24
    265c:	09 c0       	rjmp	.+18     	; 0x2670 <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC = value;
    265e:	e5 e3       	ldi	r30, 0x35	; 53
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	8a 81       	ldd	r24, Y+2	; 0x02
    2664:	80 83       	st	Z, r24
    2666:	04 c0       	rjmp	.+8      	; 0x2670 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD = value;
    2668:	e2 e3       	ldi	r30, 0x32	; 50
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	80 83       	st	Z, r24
				break;
		}
	}
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	00 d0       	rcall	.+0      	; 0x2684 <GPIO_readPort+0x6>
    2684:	00 d0       	rcall	.+0      	; 0x2686 <GPIO_readPort+0x8>
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
    268a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if(port_num >= 4)
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	84 30       	cpi	r24, 0x04	; 4
    2690:	10 f0       	brcs	.+4      	; 0x2696 <GPIO_readPort+0x18>
	{
		value = 0;
    2692:	19 82       	std	Y+1, r1	; 0x01
    2694:	32 c0       	rjmp	.+100    	; 0x26fa <GPIO_readPort+0x7c>
	}
	else
	{
		switch (port_num)
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	3c 83       	std	Y+4, r19	; 0x04
    269e:	2b 83       	std	Y+3, r18	; 0x03
    26a0:	8b 81       	ldd	r24, Y+3	; 0x03
    26a2:	9c 81       	ldd	r25, Y+4	; 0x04
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	91 05       	cpc	r25, r1
    26a8:	d1 f0       	breq	.+52     	; 0x26de <GPIO_readPort+0x60>
    26aa:	2b 81       	ldd	r18, Y+3	; 0x03
    26ac:	3c 81       	ldd	r19, Y+4	; 0x04
    26ae:	22 30       	cpi	r18, 0x02	; 2
    26b0:	31 05       	cpc	r19, r1
    26b2:	2c f4       	brge	.+10     	; 0x26be <GPIO_readPort+0x40>
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	61 f0       	breq	.+24     	; 0x26d4 <GPIO_readPort+0x56>
    26bc:	1e c0       	rjmp	.+60     	; 0x26fa <GPIO_readPort+0x7c>
    26be:	2b 81       	ldd	r18, Y+3	; 0x03
    26c0:	3c 81       	ldd	r19, Y+4	; 0x04
    26c2:	22 30       	cpi	r18, 0x02	; 2
    26c4:	31 05       	cpc	r19, r1
    26c6:	81 f0       	breq	.+32     	; 0x26e8 <GPIO_readPort+0x6a>
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	83 30       	cpi	r24, 0x03	; 3
    26ce:	91 05       	cpc	r25, r1
    26d0:	81 f0       	breq	.+32     	; 0x26f2 <GPIO_readPort+0x74>
    26d2:	13 c0       	rjmp	.+38     	; 0x26fa <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				value = PINA;
    26d4:	e9 e3       	ldi	r30, 0x39	; 57
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	0e c0       	rjmp	.+28     	; 0x26fa <GPIO_readPort+0x7c>
				break;
			case PORTB_ID:
				value = PINB;
    26de:	e6 e3       	ldi	r30, 0x36	; 54
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	09 c0       	rjmp	.+18     	; 0x26fa <GPIO_readPort+0x7c>
				break;
			case PORTC_ID:
				value = PINC;
    26e8:	e3 e3       	ldi	r30, 0x33	; 51
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	04 c0       	rjmp	.+8      	; 0x26fa <GPIO_readPort+0x7c>
				break;
			case PORTD_ID:
				value = PIND;
    26f2:	e0 e3       	ldi	r30, 0x30	; 48
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return value;
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    26fc:	0f 90       	pop	r0
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <KEYPAD_getPressedKey>:
 *
 * [Returns]:
 * 				return the pressed key value
 */
uint8 KEYPAD_getPressedKey(void)
{
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	cd b7       	in	r28, 0x3d	; 61
    2710:	de b7       	in	r29, 0x3e	; 62
    2712:	60 97       	sbiw	r28, 0x10	; 16
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	60 e0       	ldi	r22, 0x00	; 0
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    2728:	80 e0       	ldi	r24, 0x00	; 0
    272a:	61 e0       	ldi	r22, 0x01	; 1
    272c:	40 e0       	ldi	r20, 0x00	; 0
    272e:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	62 e0       	ldi	r22, 0x02	; 2
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	63 e0       	ldi	r22, 0x03	; 3
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	64 e0       	ldi	r22, 0x04	; 4
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	65 e0       	ldi	r22, 0x05	; 5
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	66 e0       	ldi	r22, 0x06	; 6
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
#if (KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	67 e0       	ldi	r22, 0x07	; 7
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	a8 e4       	ldi	r26, 0x48	; 72
    2774:	b2 e4       	ldi	r27, 0x42	; 66
    2776:	8b 87       	std	Y+11, r24	; 0x0b
    2778:	9c 87       	std	Y+12, r25	; 0x0c
    277a:	ad 87       	std	Y+13, r26	; 0x0d
    277c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2780:	7c 85       	ldd	r23, Y+12	; 0x0c
    2782:	8d 85       	ldd	r24, Y+13	; 0x0d
    2784:	9e 85       	ldd	r25, Y+14	; 0x0e
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4a ef       	ldi	r20, 0xFA	; 250
    278c:	54 e4       	ldi	r21, 0x44	; 68
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	8f 83       	std	Y+7, r24	; 0x07
    2798:	98 87       	std	Y+8, r25	; 0x08
    279a:	a9 87       	std	Y+9, r26	; 0x09
    279c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	5f e3       	ldi	r21, 0x3F	; 63
    27ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b2:	88 23       	and	r24, r24
    27b4:	2c f4       	brge	.+10     	; 0x27c0 <KEYPAD_getPressedKey+0xb6>
		__ticks = 1;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	3f c0       	rjmp	.+126    	; 0x283e <KEYPAD_getPressedKey+0x134>
	else if (__tmp > 65535)
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	3f ef       	ldi	r19, 0xFF	; 255
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	57 e4       	ldi	r21, 0x47	; 71
    27d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	4c f5       	brge	.+82     	; 0x282a <KEYPAD_getPressedKey+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27da:	7c 85       	ldd	r23, Y+12	; 0x0c
    27dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27de:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e2       	ldi	r20, 0x20	; 32
    27e6:	51 e4       	ldi	r21, 0x41	; 65
    27e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	9e 83       	std	Y+6, r25	; 0x06
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	0f c0       	rjmp	.+30     	; 0x2820 <KEYPAD_getPressedKey+0x116>
    2802:	88 ec       	ldi	r24, 0xC8	; 200
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <KEYPAD_getPressedKey+0x104>
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	69 f7       	brne	.-38     	; 0x2802 <KEYPAD_getPressedKey+0xf8>
    2828:	14 c0       	rjmp	.+40     	; 0x2852 <KEYPAD_getPressedKey+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <KEYPAD_getPressedKey+0x140>
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
#endif
	while(1)
	{
		_delay_ms(50);	/*To solve the keypad latch in Proteus Simulation*/
		/*Loop on the rows*/
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
    2852:	1f 86       	std	Y+15, r1	; 0x0f
    2854:	39 c0       	rjmp	.+114    	; 0x28c8 <KEYPAD_getPressedKey+0x1be>
		{
			/*set the pins output in turn*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	6f 85       	ldd	r22, Y+15	; 0x0f
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
			/*Set 0 to the row (pull up method)*/
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,LOGIC_LOW);
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	6f 85       	ldd	r22, Y+15	; 0x0f
    2864:	40 e0       	ldi	r20, 0x00	; 0
    2866:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_writePin>
			/*Loop in the columns to read it*/
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++)
    286a:	18 8a       	std	Y+16, r1	; 0x10
    286c:	22 c0       	rjmp	.+68     	; 0x28b2 <KEYPAD_getPressedKey+0x1a8>
			{
				/*Pressed the button*/
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    286e:	88 89       	ldd	r24, Y+16	; 0x10
    2870:	98 2f       	mov	r25, r24
    2872:	9c 5f       	subi	r25, 0xFC	; 252
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	69 2f       	mov	r22, r25
    2878:	0e 94 1d 12 	call	0x243a	; 0x243a <GPIO_readPin>
    287c:	88 23       	and	r24, r24
    287e:	b1 f4       	brne	.+44     	; 0x28ac <KEYPAD_getPressedKey+0x1a2>
						#endif /*endif od standard keypad*/
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1));
						#else
							return (KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1));
    2880:	8f 85       	ldd	r24, Y+15	; 0x0f
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	98 2f       	mov	r25, r24
    2890:	88 89       	ldd	r24, Y+16	; 0x10
    2892:	89 0f       	add	r24, r25
    2894:	8f 5f       	subi	r24, 0xFF	; 255
    2896:	0e 94 68 14 	call	0x28d0	; 0x28d0 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    289a:	60 96       	adiw	r28, 0x10	; 16
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret
			/*set the pins output in turn*/
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			/*Set 0 to the row (pull up method)*/
			GPIO_writePin(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,LOGIC_LOW);
			/*Loop in the columns to read it*/
			for(col=0 ; col<KEYPAD_NUM_COLS ; col++)
    28ac:	88 89       	ldd	r24, Y+16	; 0x10
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	88 8b       	std	Y+16, r24	; 0x10
    28b2:	88 89       	ldd	r24, Y+16	; 0x10
    28b4:	84 30       	cpi	r24, 0x04	; 4
    28b6:	d8 f2       	brcs	.-74     	; 0x286e <KEYPAD_getPressedKey+0x164>
							return (KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1));
						#endif /*endif of standard keypad*/
					#endif /*endif of the keypad columns number*/
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    28b8:	80 e0       	ldi	r24, 0x00	; 0
    28ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    28bc:	40 e0       	ldi	r20, 0x00	; 0
    28be:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		_delay_ms(50);	/*To solve the keypad latch in Proteus Simulation*/
		/*Loop on the rows*/
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++)
    28c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	8f 87       	std	Y+15, r24	; 0x0f
    28c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ca:	84 30       	cpi	r24, 0x04	; 4
    28cc:	20 f2       	brcs	.-120    	; 0x2856 <KEYPAD_getPressedKey+0x14c>
    28ce:	4f cf       	rjmp	.-354    	; 0x276e <KEYPAD_getPressedKey+0x64>

000028d0 <KEYPAD_4x4_adjustKeyNumber>:
 *				pressed button number
 * [Returns]:
 * 				the actual value (meaning) of the pressed key
 */
static uint8 KEYPAD_4x4_adjustKeyNumber (uint8 Button_number)
{
    28d0:	df 93       	push	r29
    28d2:	cf 93       	push	r28
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    28d6:	00 d0       	rcall	.+0      	; 0x28d8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Button_After_Adjust = 0;
    28de:	19 82       	std	Y+1, r1	; 0x01
	switch(Button_number)
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	28 2f       	mov	r18, r24
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	3c 83       	std	Y+4, r19	; 0x04
    28e8:	2b 83       	std	Y+3, r18	; 0x03
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	9c 81       	ldd	r25, Y+4	; 0x04
    28ee:	88 30       	cpi	r24, 0x08	; 8
    28f0:	91 05       	cpc	r25, r1
    28f2:	09 f4       	brne	.+2      	; 0x28f6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    28f4:	70 c0       	rjmp	.+224    	; 0x29d6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    28f6:	2b 81       	ldd	r18, Y+3	; 0x03
    28f8:	3c 81       	ldd	r19, Y+4	; 0x04
    28fa:	29 30       	cpi	r18, 0x09	; 9
    28fc:	31 05       	cpc	r19, r1
    28fe:	5c f5       	brge	.+86     	; 0x2956 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2900:	8b 81       	ldd	r24, Y+3	; 0x03
    2902:	9c 81       	ldd	r25, Y+4	; 0x04
    2904:	84 30       	cpi	r24, 0x04	; 4
    2906:	91 05       	cpc	r25, r1
    2908:	09 f4       	brne	.+2      	; 0x290c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    290a:	59 c0       	rjmp	.+178    	; 0x29be <KEYPAD_4x4_adjustKeyNumber+0xee>
    290c:	2b 81       	ldd	r18, Y+3	; 0x03
    290e:	3c 81       	ldd	r19, Y+4	; 0x04
    2910:	25 30       	cpi	r18, 0x05	; 5
    2912:	31 05       	cpc	r19, r1
    2914:	9c f4       	brge	.+38     	; 0x293c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
    291a:	82 30       	cpi	r24, 0x02	; 2
    291c:	91 05       	cpc	r25, r1
    291e:	09 f4       	brne	.+2      	; 0x2922 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2920:	48 c0       	rjmp	.+144    	; 0x29b2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2922:	2b 81       	ldd	r18, Y+3	; 0x03
    2924:	3c 81       	ldd	r19, Y+4	; 0x04
    2926:	23 30       	cpi	r18, 0x03	; 3
    2928:	31 05       	cpc	r19, r1
    292a:	0c f0       	brlt	.+2      	; 0x292e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    292c:	45 c0       	rjmp	.+138    	; 0x29b8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    292e:	8b 81       	ldd	r24, Y+3	; 0x03
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	91 05       	cpc	r25, r1
    2936:	09 f4       	brne	.+2      	; 0x293a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2938:	39 c0       	rjmp	.+114    	; 0x29ac <KEYPAD_4x4_adjustKeyNumber+0xdc>
    293a:	67 c0       	rjmp	.+206    	; 0x2a0a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    293c:	2b 81       	ldd	r18, Y+3	; 0x03
    293e:	3c 81       	ldd	r19, Y+4	; 0x04
    2940:	26 30       	cpi	r18, 0x06	; 6
    2942:	31 05       	cpc	r19, r1
    2944:	09 f4       	brne	.+2      	; 0x2948 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2946:	41 c0       	rjmp	.+130    	; 0x29ca <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2948:	8b 81       	ldd	r24, Y+3	; 0x03
    294a:	9c 81       	ldd	r25, Y+4	; 0x04
    294c:	87 30       	cpi	r24, 0x07	; 7
    294e:	91 05       	cpc	r25, r1
    2950:	0c f0       	brlt	.+2      	; 0x2954 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2952:	3e c0       	rjmp	.+124    	; 0x29d0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2954:	37 c0       	rjmp	.+110    	; 0x29c4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2956:	2b 81       	ldd	r18, Y+3	; 0x03
    2958:	3c 81       	ldd	r19, Y+4	; 0x04
    295a:	2c 30       	cpi	r18, 0x0C	; 12
    295c:	31 05       	cpc	r19, r1
    295e:	09 f4       	brne	.+2      	; 0x2962 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2960:	46 c0       	rjmp	.+140    	; 0x29ee <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2962:	8b 81       	ldd	r24, Y+3	; 0x03
    2964:	9c 81       	ldd	r25, Y+4	; 0x04
    2966:	8d 30       	cpi	r24, 0x0D	; 13
    2968:	91 05       	cpc	r25, r1
    296a:	5c f4       	brge	.+22     	; 0x2982 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    296c:	2b 81       	ldd	r18, Y+3	; 0x03
    296e:	3c 81       	ldd	r19, Y+4	; 0x04
    2970:	2a 30       	cpi	r18, 0x0A	; 10
    2972:	31 05       	cpc	r19, r1
    2974:	b1 f1       	breq	.+108    	; 0x29e2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2976:	8b 81       	ldd	r24, Y+3	; 0x03
    2978:	9c 81       	ldd	r25, Y+4	; 0x04
    297a:	8b 30       	cpi	r24, 0x0B	; 11
    297c:	91 05       	cpc	r25, r1
    297e:	a4 f5       	brge	.+104    	; 0x29e8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2980:	2d c0       	rjmp	.+90     	; 0x29dc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2982:	2b 81       	ldd	r18, Y+3	; 0x03
    2984:	3c 81       	ldd	r19, Y+4	; 0x04
    2986:	2e 30       	cpi	r18, 0x0E	; 14
    2988:	31 05       	cpc	r19, r1
    298a:	b9 f1       	breq	.+110    	; 0x29fa <KEYPAD_4x4_adjustKeyNumber+0x12a>
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	9c 81       	ldd	r25, Y+4	; 0x04
    2990:	8e 30       	cpi	r24, 0x0E	; 14
    2992:	91 05       	cpc	r25, r1
    2994:	7c f1       	brlt	.+94     	; 0x29f4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2996:	2b 81       	ldd	r18, Y+3	; 0x03
    2998:	3c 81       	ldd	r19, Y+4	; 0x04
    299a:	2f 30       	cpi	r18, 0x0F	; 15
    299c:	31 05       	cpc	r19, r1
    299e:	79 f1       	breq	.+94     	; 0x29fe <KEYPAD_4x4_adjustKeyNumber+0x12e>
    29a0:	8b 81       	ldd	r24, Y+3	; 0x03
    29a2:	9c 81       	ldd	r25, Y+4	; 0x04
    29a4:	80 31       	cpi	r24, 0x10	; 16
    29a6:	91 05       	cpc	r25, r1
    29a8:	69 f1       	breq	.+90     	; 0x2a04 <KEYPAD_4x4_adjustKeyNumber+0x134>
    29aa:	2f c0       	rjmp	.+94     	; 0x2a0a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1:
			Button_After_Adjust = 7;
    29ac:	87 e0       	ldi	r24, 0x07	; 7
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	2e c0       	rjmp	.+92     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 2:
			Button_After_Adjust = 8;
    29b2:	88 e0       	ldi	r24, 0x08	; 8
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	2b c0       	rjmp	.+86     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 3:
			Button_After_Adjust = 9;
    29b8:	89 e0       	ldi	r24, 0x09	; 9
    29ba:	89 83       	std	Y+1, r24	; 0x01
    29bc:	28 c0       	rjmp	.+80     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 4:
			Button_After_Adjust = '%'; // ASCII Code of %
    29be:	85 e2       	ldi	r24, 0x25	; 37
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	25 c0       	rjmp	.+74     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 5:
			Button_After_Adjust = 4;
    29c4:	84 e0       	ldi	r24, 0x04	; 4
    29c6:	89 83       	std	Y+1, r24	; 0x01
    29c8:	22 c0       	rjmp	.+68     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 6:
			Button_After_Adjust = 5;
    29ca:	85 e0       	ldi	r24, 0x05	; 5
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	1f c0       	rjmp	.+62     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 7:
			Button_After_Adjust = 6;
    29d0:	86 e0       	ldi	r24, 0x06	; 6
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	1c c0       	rjmp	.+56     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 8:
			Button_After_Adjust = '*'; /* ASCII Code of '*' */
    29d6:	8a e2       	ldi	r24, 0x2A	; 42
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	19 c0       	rjmp	.+50     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 9:
			Button_After_Adjust = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	16 c0       	rjmp	.+44     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 10:
			Button_After_Adjust = 2;
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	89 83       	std	Y+1, r24	; 0x01
    29e6:	13 c0       	rjmp	.+38     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 11:
			Button_After_Adjust = 3;
    29e8:	83 e0       	ldi	r24, 0x03	; 3
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	10 c0       	rjmp	.+32     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 12:
			Button_After_Adjust = '-'; /* ASCII Code of '-' */
    29ee:	8d e2       	ldi	r24, 0x2D	; 45
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	0d c0       	rjmp	.+26     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 13:
			Button_After_Adjust = 13;  /* ASCII of Enter */
    29f4:	8d e0       	ldi	r24, 0x0D	; 13
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	0a c0       	rjmp	.+20     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 14:
			Button_After_Adjust = 0;
    29fa:	19 82       	std	Y+1, r1	; 0x01
    29fc:	08 c0       	rjmp	.+16     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 15:
			Button_After_Adjust = '='; /* ASCII Code of '=' */
    29fe:	8d e3       	ldi	r24, 0x3D	; 61
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	05 c0       	rjmp	.+10     	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		case 16:
			Button_After_Adjust = '+'; /* ASCII Code of '+' */
    2a04:	8b e2       	ldi	r24, 0x2B	; 43
    2a06:	89 83       	std	Y+1, r24	; 0x01
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <KEYPAD_4x4_adjustKeyNumber+0x13e>
			break;
		default:
			Button_After_Adjust = Button_number;
    2a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0c:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return Button_After_Adjust;
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a10:	0f 90       	pop	r0
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <LCD_sendCommand>:
 * [Inputs]:
 * 			A Command
 * [No Return]
 */
void LCD_sendCommand (uint8 command)
{
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
    2a26:	e9 97       	sbiw	r28, 0x39	; 57
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID,LOGIC_LOW); /*RS=0 (Instructions mode)*/
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	62 e0       	ldi	r22, 0x02	; 2
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_writePin>
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a0 e8       	ldi	r26, 0x80	; 128
    2a44:	bf e3       	ldi	r27, 0x3F	; 63
    2a46:	8d ab       	std	Y+53, r24	; 0x35
    2a48:	9e ab       	std	Y+54, r25	; 0x36
    2a4a:	af ab       	std	Y+55, r26	; 0x37
    2a4c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a50:	7e a9       	ldd	r23, Y+54	; 0x36
    2a52:	8f a9       	ldd	r24, Y+55	; 0x37
    2a54:	98 ad       	ldd	r25, Y+56	; 0x38
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	4a ef       	ldi	r20, 0xFA	; 250
    2a5c:	54 e4       	ldi	r21, 0x44	; 68
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	89 ab       	std	Y+49, r24	; 0x31
    2a68:	9a ab       	std	Y+50, r25	; 0x32
    2a6a:	ab ab       	std	Y+51, r26	; 0x33
    2a6c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2a70:	7a a9       	ldd	r23, Y+50	; 0x32
    2a72:	8b a9       	ldd	r24, Y+51	; 0x33
    2a74:	9c a9       	ldd	r25, Y+52	; 0x34
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	2c f4       	brge	.+10     	; 0x2a90 <LCD_sendCommand+0x72>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	98 ab       	std	Y+48, r25	; 0x30
    2a8c:	8f a7       	std	Y+47, r24	; 0x2f
    2a8e:	3f c0       	rjmp	.+126    	; 0x2b0e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2a90:	69 a9       	ldd	r22, Y+49	; 0x31
    2a92:	7a a9       	ldd	r23, Y+50	; 0x32
    2a94:	8b a9       	ldd	r24, Y+51	; 0x33
    2a96:	9c a9       	ldd	r25, Y+52	; 0x34
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	3f ef       	ldi	r19, 0xFF	; 255
    2a9c:	4f e7       	ldi	r20, 0x7F	; 127
    2a9e:	57 e4       	ldi	r21, 0x47	; 71
    2aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa4:	18 16       	cp	r1, r24
    2aa6:	4c f5       	brge	.+82     	; 0x2afa <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa8:	6d a9       	ldd	r22, Y+53	; 0x35
    2aaa:	7e a9       	ldd	r23, Y+54	; 0x36
    2aac:	8f a9       	ldd	r24, Y+55	; 0x37
    2aae:	98 ad       	ldd	r25, Y+56	; 0x38
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e2       	ldi	r20, 0x20	; 32
    2ab6:	51 e4       	ldi	r21, 0x41	; 65
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	bc 01       	movw	r22, r24
    2ac2:	cd 01       	movw	r24, r26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	98 ab       	std	Y+48, r25	; 0x30
    2ace:	8f a7       	std	Y+47, r24	; 0x2f
    2ad0:	0f c0       	rjmp	.+30     	; 0x2af0 <LCD_sendCommand+0xd2>
    2ad2:	88 ec       	ldi	r24, 0xC8	; 200
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	9e a7       	std	Y+46, r25	; 0x2e
    2ad8:	8d a7       	std	Y+45, r24	; 0x2d
    2ada:	8d a5       	ldd	r24, Y+45	; 0x2d
    2adc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	f1 f7       	brne	.-4      	; 0x2ade <LCD_sendCommand+0xc0>
    2ae2:	9e a7       	std	Y+46, r25	; 0x2e
    2ae4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	98 ab       	std	Y+48, r25	; 0x30
    2aee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2af0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af2:	98 a9       	ldd	r25, Y+48	; 0x30
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	69 f7       	brne	.-38     	; 0x2ad2 <LCD_sendCommand+0xb4>
    2af8:	14 c0       	rjmp	.+40     	; 0x2b22 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2afa:	69 a9       	ldd	r22, Y+49	; 0x31
    2afc:	7a a9       	ldd	r23, Y+50	; 0x32
    2afe:	8b a9       	ldd	r24, Y+51	; 0x33
    2b00:	9c a9       	ldd	r25, Y+52	; 0x34
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	98 ab       	std	Y+48, r25	; 0x30
    2b0c:	8f a7       	std	Y+47, r24	; 0x2f
    2b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b10:	98 a9       	ldd	r25, Y+48	; 0x30
    2b12:	9c a7       	std	Y+44, r25	; 0x2c
    2b14:	8b a7       	std	Y+43, r24	; 0x2b
    2b16:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b18:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <LCD_sendCommand+0xfc>
    2b1e:	9c a7       	std	Y+44, r25	; 0x2c
    2b20:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH); /*E=1 (Enable LCD)*/
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	63 e0       	ldi	r22, 0x03	; 3
    2b26:	41 e0       	ldi	r20, 0x01	; 1
    2b28:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_writePin>
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	a0 e8       	ldi	r26, 0x80	; 128
    2b32:	bf e3       	ldi	r27, 0x3F	; 63
    2b34:	8f a3       	std	Y+39, r24	; 0x27
    2b36:	98 a7       	std	Y+40, r25	; 0x28
    2b38:	a9 a7       	std	Y+41, r26	; 0x29
    2b3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b3c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b3e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b40:	89 a5       	ldd	r24, Y+41	; 0x29
    2b42:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	4a ef       	ldi	r20, 0xFA	; 250
    2b4a:	54 e4       	ldi	r21, 0x44	; 68
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	8b a3       	std	Y+35, r24	; 0x23
    2b56:	9c a3       	std	Y+36, r25	; 0x24
    2b58:	ad a3       	std	Y+37, r26	; 0x25
    2b5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2b60:	8d a1       	ldd	r24, Y+37	; 0x25
    2b62:	9e a1       	ldd	r25, Y+38	; 0x26
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e8       	ldi	r20, 0x80	; 128
    2b6a:	5f e3       	ldi	r21, 0x3F	; 63
    2b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b70:	88 23       	and	r24, r24
    2b72:	2c f4       	brge	.+10     	; 0x2b7e <LCD_sendCommand+0x160>
		__ticks = 1;
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	9a a3       	std	Y+34, r25	; 0x22
    2b7a:	89 a3       	std	Y+33, r24	; 0x21
    2b7c:	3f c0       	rjmp	.+126    	; 0x2bfc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2b7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b80:	7c a1       	ldd	r23, Y+36	; 0x24
    2b82:	8d a1       	ldd	r24, Y+37	; 0x25
    2b84:	9e a1       	ldd	r25, Y+38	; 0x26
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	3f ef       	ldi	r19, 0xFF	; 255
    2b8a:	4f e7       	ldi	r20, 0x7F	; 127
    2b8c:	57 e4       	ldi	r21, 0x47	; 71
    2b8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b92:	18 16       	cp	r1, r24
    2b94:	4c f5       	brge	.+82     	; 0x2be8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b96:	6f a1       	ldd	r22, Y+39	; 0x27
    2b98:	78 a5       	ldd	r23, Y+40	; 0x28
    2b9a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e2       	ldi	r20, 0x20	; 32
    2ba4:	51 e4       	ldi	r21, 0x41	; 65
    2ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9a a3       	std	Y+34, r25	; 0x22
    2bbc:	89 a3       	std	Y+33, r24	; 0x21
    2bbe:	0f c0       	rjmp	.+30     	; 0x2bde <LCD_sendCommand+0x1c0>
    2bc0:	88 ec       	ldi	r24, 0xC8	; 200
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	98 a3       	std	Y+32, r25	; 0x20
    2bc6:	8f 8f       	std	Y+31, r24	; 0x1f
    2bc8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bca:	98 a1       	ldd	r25, Y+32	; 0x20
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <LCD_sendCommand+0x1ae>
    2bd0:	98 a3       	std	Y+32, r25	; 0x20
    2bd2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd8:	01 97       	sbiw	r24, 0x01	; 1
    2bda:	9a a3       	std	Y+34, r25	; 0x22
    2bdc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bde:	89 a1       	ldd	r24, Y+33	; 0x21
    2be0:	9a a1       	ldd	r25, Y+34	; 0x22
    2be2:	00 97       	sbiw	r24, 0x00	; 0
    2be4:	69 f7       	brne	.-38     	; 0x2bc0 <LCD_sendCommand+0x1a2>
    2be6:	14 c0       	rjmp	.+40     	; 0x2c10 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bea:	7c a1       	ldd	r23, Y+36	; 0x24
    2bec:	8d a1       	ldd	r24, Y+37	; 0x25
    2bee:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9a a3       	std	Y+34, r25	; 0x22
    2bfa:	89 a3       	std	Y+33, r24	; 0x21
    2bfc:	89 a1       	ldd	r24, Y+33	; 0x21
    2bfe:	9a a1       	ldd	r25, Y+34	; 0x22
    2c00:	9e 8f       	std	Y+30, r25	; 0x1e
    2c02:	8d 8f       	std	Y+29, r24	; 0x1d
    2c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	f1 f7       	brne	.-4      	; 0x2c08 <LCD_sendCommand+0x1ea>
    2c0c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0e:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID,GET_BIT(command,3));
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW); /*E=0 (Disable LCD)*/
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command); //command to be sent
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	69 ad       	ldd	r22, Y+57	; 0x39
    2c14:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <GPIO_writePort>
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	a0 e8       	ldi	r26, 0x80	; 128
    2c1e:	bf e3       	ldi	r27, 0x3F	; 63
    2c20:	89 8f       	std	Y+25, r24	; 0x19
    2c22:	9a 8f       	std	Y+26, r25	; 0x1a
    2c24:	ab 8f       	std	Y+27, r26	; 0x1b
    2c26:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c28:	69 8d       	ldd	r22, Y+25	; 0x19
    2c2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	4a ef       	ldi	r20, 0xFA	; 250
    2c36:	54 e4       	ldi	r21, 0x44	; 68
    2c38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	8d 8b       	std	Y+21, r24	; 0x15
    2c42:	9e 8b       	std	Y+22, r25	; 0x16
    2c44:	af 8b       	std	Y+23, r26	; 0x17
    2c46:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c48:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	40 e8       	ldi	r20, 0x80	; 128
    2c56:	5f e3       	ldi	r21, 0x3F	; 63
    2c58:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c5c:	88 23       	and	r24, r24
    2c5e:	2c f4       	brge	.+10     	; 0x2c6a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	9c 8b       	std	Y+20, r25	; 0x14
    2c66:	8b 8b       	std	Y+19, r24	; 0x13
    2c68:	3f c0       	rjmp	.+126    	; 0x2ce8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c70:	98 8d       	ldd	r25, Y+24	; 0x18
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	3f ef       	ldi	r19, 0xFF	; 255
    2c76:	4f e7       	ldi	r20, 0x7F	; 127
    2c78:	57 e4       	ldi	r21, 0x47	; 71
    2c7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c7e:	18 16       	cp	r1, r24
    2c80:	4c f5       	brge	.+82     	; 0x2cd4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c82:	69 8d       	ldd	r22, Y+25	; 0x19
    2c84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	40 e2       	ldi	r20, 0x20	; 32
    2c90:	51 e4       	ldi	r21, 0x41	; 65
    2c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	bc 01       	movw	r22, r24
    2c9c:	cd 01       	movw	r24, r26
    2c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca2:	dc 01       	movw	r26, r24
    2ca4:	cb 01       	movw	r24, r22
    2ca6:	9c 8b       	std	Y+20, r25	; 0x14
    2ca8:	8b 8b       	std	Y+19, r24	; 0x13
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <LCD_sendCommand+0x2ac>
    2cac:	88 ec       	ldi	r24, 0xC8	; 200
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9a 8b       	std	Y+18, r25	; 0x12
    2cb2:	89 8b       	std	Y+17, r24	; 0x11
    2cb4:	89 89       	ldd	r24, Y+17	; 0x11
    2cb6:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <LCD_sendCommand+0x29a>
    2cbc:	9a 8b       	std	Y+18, r25	; 0x12
    2cbe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	9c 8b       	std	Y+20, r25	; 0x14
    2cc8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cca:	8b 89       	ldd	r24, Y+19	; 0x13
    2ccc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	69 f7       	brne	.-38     	; 0x2cac <LCD_sendCommand+0x28e>
    2cd2:	14 c0       	rjmp	.+40     	; 0x2cfc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cda:	98 8d       	ldd	r25, Y+24	; 0x18
    2cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	9c 8b       	std	Y+20, r25	; 0x14
    2ce6:	8b 8b       	std	Y+19, r24	; 0x13
    2ce8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cea:	9c 89       	ldd	r25, Y+20	; 0x14
    2cec:	98 8b       	std	Y+16, r25	; 0x10
    2cee:	8f 87       	std	Y+15, r24	; 0x0f
    2cf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf2:	98 89       	ldd	r25, Y+16	; 0x10
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <LCD_sendCommand+0x2d6>
    2cf8:	98 8b       	std	Y+16, r25	; 0x10
    2cfa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW); //E
    2cfc:	83 e0       	ldi	r24, 0x03	; 3
    2cfe:	63 e0       	ldi	r22, 0x03	; 3
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_writePin>
    2d06:	80 e0       	ldi	r24, 0x00	; 0
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	a0 e8       	ldi	r26, 0x80	; 128
    2d0c:	bf e3       	ldi	r27, 0x3F	; 63
    2d0e:	8b 87       	std	Y+11, r24	; 0x0b
    2d10:	9c 87       	std	Y+12, r25	; 0x0c
    2d12:	ad 87       	std	Y+13, r26	; 0x0d
    2d14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	4a ef       	ldi	r20, 0xFA	; 250
    2d24:	54 e4       	ldi	r21, 0x44	; 68
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	8f 83       	std	Y+7, r24	; 0x07
    2d30:	98 87       	std	Y+8, r25	; 0x08
    2d32:	a9 87       	std	Y+9, r26	; 0x09
    2d34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d36:	6f 81       	ldd	r22, Y+7	; 0x07
    2d38:	78 85       	ldd	r23, Y+8	; 0x08
    2d3a:	89 85       	ldd	r24, Y+9	; 0x09
    2d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e8       	ldi	r20, 0x80	; 128
    2d44:	5f e3       	ldi	r21, 0x3F	; 63
    2d46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4a:	88 23       	and	r24, r24
    2d4c:	2c f4       	brge	.+10     	; 0x2d58 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	9e 83       	std	Y+6, r25	; 0x06
    2d54:	8d 83       	std	Y+5, r24	; 0x05
    2d56:	3f c0       	rjmp	.+126    	; 0x2dd6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2d58:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5a:	78 85       	ldd	r23, Y+8	; 0x08
    2d5c:	89 85       	ldd	r24, Y+9	; 0x09
    2d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	3f ef       	ldi	r19, 0xFF	; 255
    2d64:	4f e7       	ldi	r20, 0x7F	; 127
    2d66:	57 e4       	ldi	r21, 0x47	; 71
    2d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6c:	18 16       	cp	r1, r24
    2d6e:	4c f5       	brge	.+82     	; 0x2dc2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	40 e2       	ldi	r20, 0x20	; 32
    2d7e:	51 e4       	ldi	r21, 0x41	; 65
    2d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	0f c0       	rjmp	.+30     	; 0x2db8 <LCD_sendCommand+0x39a>
    2d9a:	88 ec       	ldi	r24, 0xC8	; 200
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	9c 83       	std	Y+4, r25	; 0x04
    2da0:	8b 83       	std	Y+3, r24	; 0x03
    2da2:	8b 81       	ldd	r24, Y+3	; 0x03
    2da4:	9c 81       	ldd	r25, Y+4	; 0x04
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <LCD_sendCommand+0x388>
    2daa:	9c 83       	std	Y+4, r25	; 0x04
    2dac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dae:	8d 81       	ldd	r24, Y+5	; 0x05
    2db0:	9e 81       	ldd	r25, Y+6	; 0x06
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	9e 83       	std	Y+6, r25	; 0x06
    2db6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dba:	9e 81       	ldd	r25, Y+6	; 0x06
    2dbc:	00 97       	sbiw	r24, 0x00	; 0
    2dbe:	69 f7       	brne	.-38     	; 0x2d9a <LCD_sendCommand+0x37c>
    2dc0:	14 c0       	rjmp	.+40     	; 0x2dea <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc4:	78 85       	ldd	r23, Y+8	; 0x08
    2dc6:	89 85       	ldd	r24, Y+9	; 0x09
    2dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	9e 83       	std	Y+6, r25	; 0x06
    2dd4:	8d 83       	std	Y+5, r24	; 0x05
    2dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dda:	9a 83       	std	Y+2, r25	; 0x02
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	9a 81       	ldd	r25, Y+2	; 0x02
    2de2:	01 97       	sbiw	r24, 0x01	; 1
    2de4:	f1 f7       	brne	.-4      	; 0x2de2 <LCD_sendCommand+0x3c4>
    2de6:	9a 83       	std	Y+2, r25	; 0x02
    2de8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2dea:	e9 96       	adiw	r28, 0x39	; 57
    2dec:	0f b6       	in	r0, 0x3f	; 63
    2dee:	f8 94       	cli
    2df0:	de bf       	out	0x3e, r29	; 62
    2df2:	0f be       	out	0x3f, r0	; 63
    2df4:	cd bf       	out	0x3d, r28	; 61
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <LCD_displayCharacter>:
 * [Inputs]:
 * 			A Character
 * [No Return]
 */
void LCD_displayCharacter(uint8 character)
{
    2dfc:	df 93       	push	r29
    2dfe:	cf 93       	push	r28
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	e9 97       	sbiw	r28, 0x39	; 57
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID,LOGIC_HIGH); /*RS=1 (Character mode)*/
    2e12:	83 e0       	ldi	r24, 0x03	; 3
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_writePin>
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	a0 e8       	ldi	r26, 0x80	; 128
    2e22:	bf e3       	ldi	r27, 0x3F	; 63
    2e24:	8d ab       	std	Y+53, r24	; 0x35
    2e26:	9e ab       	std	Y+54, r25	; 0x36
    2e28:	af ab       	std	Y+55, r26	; 0x37
    2e2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e30:	8f a9       	ldd	r24, Y+55	; 0x37
    2e32:	98 ad       	ldd	r25, Y+56	; 0x38
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	4a ef       	ldi	r20, 0xFA	; 250
    2e3a:	54 e4       	ldi	r21, 0x44	; 68
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	89 ab       	std	Y+49, r24	; 0x31
    2e46:	9a ab       	std	Y+50, r25	; 0x32
    2e48:	ab ab       	std	Y+51, r26	; 0x33
    2e4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e50:	8b a9       	ldd	r24, Y+51	; 0x33
    2e52:	9c a9       	ldd	r25, Y+52	; 0x34
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e60:	88 23       	and	r24, r24
    2e62:	2c f4       	brge	.+10     	; 0x2e6e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	98 ab       	std	Y+48, r25	; 0x30
    2e6a:	8f a7       	std	Y+47, r24	; 0x2f
    2e6c:	3f c0       	rjmp	.+126    	; 0x2eec <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2e6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e70:	7a a9       	ldd	r23, Y+50	; 0x32
    2e72:	8b a9       	ldd	r24, Y+51	; 0x33
    2e74:	9c a9       	ldd	r25, Y+52	; 0x34
    2e76:	20 e0       	ldi	r18, 0x00	; 0
    2e78:	3f ef       	ldi	r19, 0xFF	; 255
    2e7a:	4f e7       	ldi	r20, 0x7F	; 127
    2e7c:	57 e4       	ldi	r21, 0x47	; 71
    2e7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e82:	18 16       	cp	r1, r24
    2e84:	4c f5       	brge	.+82     	; 0x2ed8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	6d a9       	ldd	r22, Y+53	; 0x35
    2e88:	7e a9       	ldd	r23, Y+54	; 0x36
    2e8a:	8f a9       	ldd	r24, Y+55	; 0x37
    2e8c:	98 ad       	ldd	r25, Y+56	; 0x38
    2e8e:	20 e0       	ldi	r18, 0x00	; 0
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e2       	ldi	r20, 0x20	; 32
    2e94:	51 e4       	ldi	r21, 0x41	; 65
    2e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9a:	dc 01       	movw	r26, r24
    2e9c:	cb 01       	movw	r24, r22
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	cd 01       	movw	r24, r26
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	98 ab       	std	Y+48, r25	; 0x30
    2eac:	8f a7       	std	Y+47, r24	; 0x2f
    2eae:	0f c0       	rjmp	.+30     	; 0x2ece <LCD_displayCharacter+0xd2>
    2eb0:	88 ec       	ldi	r24, 0xC8	; 200
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	9e a7       	std	Y+46, r25	; 0x2e
    2eb6:	8d a7       	std	Y+45, r24	; 0x2d
    2eb8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eba:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_displayCharacter+0xc0>
    2ec0:	9e a7       	std	Y+46, r25	; 0x2e
    2ec2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	98 ab       	std	Y+48, r25	; 0x30
    2ecc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed2:	00 97       	sbiw	r24, 0x00	; 0
    2ed4:	69 f7       	brne	.-38     	; 0x2eb0 <LCD_displayCharacter+0xb4>
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eda:	7a a9       	ldd	r23, Y+50	; 0x32
    2edc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ede:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	98 ab       	std	Y+48, r25	; 0x30
    2eea:	8f a7       	std	Y+47, r24	; 0x2f
    2eec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eee:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef0:	9c a7       	std	Y+44, r25	; 0x2c
    2ef2:	8b a7       	std	Y+43, r24	; 0x2b
    2ef4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ef6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_displayCharacter+0xfc>
    2efc:	9c a7       	std	Y+44, r25	; 0x2c
    2efe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_HIGH); /*E=1 (Enable LCD)*/
    2f00:	83 e0       	ldi	r24, 0x03	; 3
    2f02:	63 e0       	ldi	r22, 0x03	; 3
    2f04:	41 e0       	ldi	r20, 0x01	; 1
    2f06:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_writePin>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e8       	ldi	r26, 0x80	; 128
    2f10:	bf e3       	ldi	r27, 0x3F	; 63
    2f12:	8f a3       	std	Y+39, r24	; 0x27
    2f14:	98 a7       	std	Y+40, r25	; 0x28
    2f16:	a9 a7       	std	Y+41, r26	; 0x29
    2f18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f1c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f1e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f20:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a ef       	ldi	r20, 0xFA	; 250
    2f28:	54 e4       	ldi	r21, 0x44	; 68
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	8b a3       	std	Y+35, r24	; 0x23
    2f34:	9c a3       	std	Y+36, r25	; 0x24
    2f36:	ad a3       	std	Y+37, r26	; 0x25
    2f38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f40:	9e a1       	ldd	r25, Y+38	; 0x26
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9a a3       	std	Y+34, r25	; 0x22
    2f58:	89 a3       	std	Y+33, r24	; 0x21
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2f5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f60:	8d a1       	ldd	r24, Y+37	; 0x25
    2f62:	9e a1       	ldd	r25, Y+38	; 0x26
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	6f a1       	ldd	r22, Y+39	; 0x27
    2f76:	78 a5       	ldd	r23, Y+40	; 0x28
    2f78:	89 a5       	ldd	r24, Y+41	; 0x29
    2f7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9a a3       	std	Y+34, r25	; 0x22
    2f9a:	89 a3       	std	Y+33, r24	; 0x21
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <LCD_displayCharacter+0x1c0>
    2f9e:	88 ec       	ldi	r24, 0xC8	; 200
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	98 a3       	std	Y+32, r25	; 0x20
    2fa4:	8f 8f       	std	Y+31, r24	; 0x1f
    2fa6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fa8:	98 a1       	ldd	r25, Y+32	; 0x20
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <LCD_displayCharacter+0x1ae>
    2fae:	98 a3       	std	Y+32, r25	; 0x20
    2fb0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fb4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9a a3       	std	Y+34, r25	; 0x22
    2fba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2fbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <LCD_displayCharacter+0x1a2>
    2fc4:	14 c0       	rjmp	.+40     	; 0x2fee <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2fca:	8d a1       	ldd	r24, Y+37	; 0x25
    2fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9a a3       	std	Y+34, r25	; 0x22
    2fd8:	89 a3       	std	Y+33, r24	; 0x21
    2fda:	89 a1       	ldd	r24, Y+33	; 0x21
    2fdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2fde:	9e 8f       	std	Y+30, r25	; 0x1e
    2fe0:	8d 8f       	std	Y+29, r24	; 0x1d
    2fe2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fe4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_displayCharacter+0x1ea>
    2fea:	9e 8f       	std	Y+30, r25	; 0x1e
    2fec:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID,GET_BIT(character,3));
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW); /*E=0 (Disable LCD)*/
	_delay_ms(1); /* delay for processing Th = 13ns */
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, character); //command to be sent
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	69 ad       	ldd	r22, Y+57	; 0x39
    2ff2:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <GPIO_writePort>
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	a0 e8       	ldi	r26, 0x80	; 128
    2ffc:	bf e3       	ldi	r27, 0x3F	; 63
    2ffe:	89 8f       	std	Y+25, r24	; 0x19
    3000:	9a 8f       	std	Y+26, r25	; 0x1a
    3002:	ab 8f       	std	Y+27, r26	; 0x1b
    3004:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3006:	69 8d       	ldd	r22, Y+25	; 0x19
    3008:	7a 8d       	ldd	r23, Y+26	; 0x1a
    300a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    300c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    300e:	20 e0       	ldi	r18, 0x00	; 0
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	4a ef       	ldi	r20, 0xFA	; 250
    3014:	54 e4       	ldi	r21, 0x44	; 68
    3016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	8d 8b       	std	Y+21, r24	; 0x15
    3020:	9e 8b       	std	Y+22, r25	; 0x16
    3022:	af 8b       	std	Y+23, r26	; 0x17
    3024:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3026:	6d 89       	ldd	r22, Y+21	; 0x15
    3028:	7e 89       	ldd	r23, Y+22	; 0x16
    302a:	8f 89       	ldd	r24, Y+23	; 0x17
    302c:	98 8d       	ldd	r25, Y+24	; 0x18
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	2c f4       	brge	.+10     	; 0x3048 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9c 8b       	std	Y+20, r25	; 0x14
    3044:	8b 8b       	std	Y+19, r24	; 0x13
    3046:	3f c0       	rjmp	.+126    	; 0x30c6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    3048:	6d 89       	ldd	r22, Y+21	; 0x15
    304a:	7e 89       	ldd	r23, Y+22	; 0x16
    304c:	8f 89       	ldd	r24, Y+23	; 0x17
    304e:	98 8d       	ldd	r25, Y+24	; 0x18
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	3f ef       	ldi	r19, 0xFF	; 255
    3054:	4f e7       	ldi	r20, 0x7F	; 127
    3056:	57 e4       	ldi	r21, 0x47	; 71
    3058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    305c:	18 16       	cp	r1, r24
    305e:	4c f5       	brge	.+82     	; 0x30b2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3060:	69 8d       	ldd	r22, Y+25	; 0x19
    3062:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3064:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3066:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e2       	ldi	r20, 0x20	; 32
    306e:	51 e4       	ldi	r21, 0x41	; 65
    3070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	9c 8b       	std	Y+20, r25	; 0x14
    3086:	8b 8b       	std	Y+19, r24	; 0x13
    3088:	0f c0       	rjmp	.+30     	; 0x30a8 <LCD_displayCharacter+0x2ac>
    308a:	88 ec       	ldi	r24, 0xC8	; 200
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	9a 8b       	std	Y+18, r25	; 0x12
    3090:	89 8b       	std	Y+17, r24	; 0x11
    3092:	89 89       	ldd	r24, Y+17	; 0x11
    3094:	9a 89       	ldd	r25, Y+18	; 0x12
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	f1 f7       	brne	.-4      	; 0x3096 <LCD_displayCharacter+0x29a>
    309a:	9a 8b       	std	Y+18, r25	; 0x12
    309c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    309e:	8b 89       	ldd	r24, Y+19	; 0x13
    30a0:	9c 89       	ldd	r25, Y+20	; 0x14
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	9c 8b       	std	Y+20, r25	; 0x14
    30a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30a8:	8b 89       	ldd	r24, Y+19	; 0x13
    30aa:	9c 89       	ldd	r25, Y+20	; 0x14
    30ac:	00 97       	sbiw	r24, 0x00	; 0
    30ae:	69 f7       	brne	.-38     	; 0x308a <LCD_displayCharacter+0x28e>
    30b0:	14 c0       	rjmp	.+40     	; 0x30da <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b2:	6d 89       	ldd	r22, Y+21	; 0x15
    30b4:	7e 89       	ldd	r23, Y+22	; 0x16
    30b6:	8f 89       	ldd	r24, Y+23	; 0x17
    30b8:	98 8d       	ldd	r25, Y+24	; 0x18
    30ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9c 8b       	std	Y+20, r25	; 0x14
    30c4:	8b 8b       	std	Y+19, r24	; 0x13
    30c6:	8b 89       	ldd	r24, Y+19	; 0x13
    30c8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ca:	98 8b       	std	Y+16, r25	; 0x10
    30cc:	8f 87       	std	Y+15, r24	; 0x0f
    30ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    30d0:	98 89       	ldd	r25, Y+16	; 0x10
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <LCD_displayCharacter+0x2d6>
    30d6:	98 8b       	std	Y+16, r25	; 0x10
    30d8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID,LOGIC_LOW); //E
    30da:	83 e0       	ldi	r24, 0x03	; 3
    30dc:	63 e0       	ldi	r22, 0x03	; 3
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	0e 94 32 11 	call	0x2264	; 0x2264 <GPIO_writePin>
    30e4:	80 e0       	ldi	r24, 0x00	; 0
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	a0 e8       	ldi	r26, 0x80	; 128
    30ea:	bf e3       	ldi	r27, 0x3F	; 63
    30ec:	8b 87       	std	Y+11, r24	; 0x0b
    30ee:	9c 87       	std	Y+12, r25	; 0x0c
    30f0:	ad 87       	std	Y+13, r26	; 0x0d
    30f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	4a ef       	ldi	r20, 0xFA	; 250
    3102:	54 e4       	ldi	r21, 0x44	; 68
    3104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	8f 83       	std	Y+7, r24	; 0x07
    310e:	98 87       	std	Y+8, r25	; 0x08
    3110:	a9 87       	std	Y+9, r26	; 0x09
    3112:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3114:	6f 81       	ldd	r22, Y+7	; 0x07
    3116:	78 85       	ldd	r23, Y+8	; 0x08
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	20 e0       	ldi	r18, 0x00	; 0
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e8       	ldi	r20, 0x80	; 128
    3122:	5f e3       	ldi	r21, 0x3F	; 63
    3124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3128:	88 23       	and	r24, r24
    312a:	2c f4       	brge	.+10     	; 0x3136 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	9e 83       	std	Y+6, r25	; 0x06
    3132:	8d 83       	std	Y+5, r24	; 0x05
    3134:	3f c0       	rjmp	.+126    	; 0x31b4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    3136:	6f 81       	ldd	r22, Y+7	; 0x07
    3138:	78 85       	ldd	r23, Y+8	; 0x08
    313a:	89 85       	ldd	r24, Y+9	; 0x09
    313c:	9a 85       	ldd	r25, Y+10	; 0x0a
    313e:	20 e0       	ldi	r18, 0x00	; 0
    3140:	3f ef       	ldi	r19, 0xFF	; 255
    3142:	4f e7       	ldi	r20, 0x7F	; 127
    3144:	57 e4       	ldi	r21, 0x47	; 71
    3146:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    314a:	18 16       	cp	r1, r24
    314c:	4c f5       	brge	.+82     	; 0x31a0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    314e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3150:	7c 85       	ldd	r23, Y+12	; 0x0c
    3152:	8d 85       	ldd	r24, Y+13	; 0x0d
    3154:	9e 85       	ldd	r25, Y+14	; 0x0e
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e2       	ldi	r20, 0x20	; 32
    315c:	51 e4       	ldi	r21, 0x41	; 65
    315e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	bc 01       	movw	r22, r24
    3168:	cd 01       	movw	r24, r26
    316a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    316e:	dc 01       	movw	r26, r24
    3170:	cb 01       	movw	r24, r22
    3172:	9e 83       	std	Y+6, r25	; 0x06
    3174:	8d 83       	std	Y+5, r24	; 0x05
    3176:	0f c0       	rjmp	.+30     	; 0x3196 <LCD_displayCharacter+0x39a>
    3178:	88 ec       	ldi	r24, 0xC8	; 200
    317a:	90 e0       	ldi	r25, 0x00	; 0
    317c:	9c 83       	std	Y+4, r25	; 0x04
    317e:	8b 83       	std	Y+3, r24	; 0x03
    3180:	8b 81       	ldd	r24, Y+3	; 0x03
    3182:	9c 81       	ldd	r25, Y+4	; 0x04
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <LCD_displayCharacter+0x388>
    3188:	9c 83       	std	Y+4, r25	; 0x04
    318a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318c:	8d 81       	ldd	r24, Y+5	; 0x05
    318e:	9e 81       	ldd	r25, Y+6	; 0x06
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	9e 83       	std	Y+6, r25	; 0x06
    3194:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3196:	8d 81       	ldd	r24, Y+5	; 0x05
    3198:	9e 81       	ldd	r25, Y+6	; 0x06
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	69 f7       	brne	.-38     	; 0x3178 <LCD_displayCharacter+0x37c>
    319e:	14 c0       	rjmp	.+40     	; 0x31c8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a0:	6f 81       	ldd	r22, Y+7	; 0x07
    31a2:	78 85       	ldd	r23, Y+8	; 0x08
    31a4:	89 85       	ldd	r24, Y+9	; 0x09
    31a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	9e 83       	std	Y+6, r25	; 0x06
    31b2:	8d 83       	std	Y+5, r24	; 0x05
    31b4:	8d 81       	ldd	r24, Y+5	; 0x05
    31b6:	9e 81       	ldd	r25, Y+6	; 0x06
    31b8:	9a 83       	std	Y+2, r25	; 0x02
    31ba:	89 83       	std	Y+1, r24	; 0x01
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <LCD_displayCharacter+0x3c4>
    31c4:	9a 83       	std	Y+2, r25	; 0x02
    31c6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    31c8:	e9 96       	adiw	r28, 0x39	; 57
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <LCD_init>:
 * Function to initialize the LCD
 * [No Inputs]
 * [No Return]
 */
void LCD_init(void)
{
    31da:	df 93       	push	r29
    31dc:	cf 93       	push	r28
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	2e 97       	sbiw	r28, 0x0e	; 14
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
#if(RW_GROUNDED == 0)
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW);
#endif
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    31ee:	83 e0       	ldi	r24, 0x03	; 3
    31f0:	62 e0       	ldi	r22, 0x02	; 2
    31f2:	41 e0       	ldi	r20, 0x01	; 1
    31f4:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    31f8:	83 e0       	ldi	r24, 0x03	; 3
    31fa:	63 e0       	ldi	r22, 0x03	; 3
    31fc:	41 e0       	ldi	r20, 0x01	; 1
    31fe:	0e 94 47 10 	call	0x208e	; 0x208e <GPIO_setupPinDirection>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 ea       	ldi	r26, 0xA0	; 160
    3208:	b1 e4       	ldi	r27, 0x41	; 65
    320a:	8b 87       	std	Y+11, r24	; 0x0b
    320c:	9c 87       	std	Y+12, r25	; 0x0c
    320e:	ad 87       	std	Y+13, r26	; 0x0d
    3210:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3212:	6b 85       	ldd	r22, Y+11	; 0x0b
    3214:	7c 85       	ldd	r23, Y+12	; 0x0c
    3216:	8d 85       	ldd	r24, Y+13	; 0x0d
    3218:	9e 85       	ldd	r25, Y+14	; 0x0e
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	4a ef       	ldi	r20, 0xFA	; 250
    3220:	54 e4       	ldi	r21, 0x44	; 68
    3222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3226:	dc 01       	movw	r26, r24
    3228:	cb 01       	movw	r24, r22
    322a:	8f 83       	std	Y+7, r24	; 0x07
    322c:	98 87       	std	Y+8, r25	; 0x08
    322e:	a9 87       	std	Y+9, r26	; 0x09
    3230:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f e3       	ldi	r21, 0x3F	; 63
    3242:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3246:	88 23       	and	r24, r24
    3248:	2c f4       	brge	.+10     	; 0x3254 <LCD_init+0x7a>
		__ticks = 1;
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	9e 83       	std	Y+6, r25	; 0x06
    3250:	8d 83       	std	Y+5, r24	; 0x05
    3252:	3f c0       	rjmp	.+126    	; 0x32d2 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3254:	6f 81       	ldd	r22, Y+7	; 0x07
    3256:	78 85       	ldd	r23, Y+8	; 0x08
    3258:	89 85       	ldd	r24, Y+9	; 0x09
    325a:	9a 85       	ldd	r25, Y+10	; 0x0a
    325c:	20 e0       	ldi	r18, 0x00	; 0
    325e:	3f ef       	ldi	r19, 0xFF	; 255
    3260:	4f e7       	ldi	r20, 0x7F	; 127
    3262:	57 e4       	ldi	r21, 0x47	; 71
    3264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3268:	18 16       	cp	r1, r24
    326a:	4c f5       	brge	.+82     	; 0x32be <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    326c:	6b 85       	ldd	r22, Y+11	; 0x0b
    326e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3270:	8d 85       	ldd	r24, Y+13	; 0x0d
    3272:	9e 85       	ldd	r25, Y+14	; 0x0e
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e2       	ldi	r20, 0x20	; 32
    327a:	51 e4       	ldi	r21, 0x41	; 65
    327c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	0f c0       	rjmp	.+30     	; 0x32b4 <LCD_init+0xda>
    3296:	88 ec       	ldi	r24, 0xC8	; 200
    3298:	90 e0       	ldi	r25, 0x00	; 0
    329a:	9c 83       	std	Y+4, r25	; 0x04
    329c:	8b 83       	std	Y+3, r24	; 0x03
    329e:	8b 81       	ldd	r24, Y+3	; 0x03
    32a0:	9c 81       	ldd	r25, Y+4	; 0x04
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	f1 f7       	brne	.-4      	; 0x32a2 <LCD_init+0xc8>
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32aa:	8d 81       	ldd	r24, Y+5	; 0x05
    32ac:	9e 81       	ldd	r25, Y+6	; 0x06
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	9e 83       	std	Y+6, r25	; 0x06
    32b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	00 97       	sbiw	r24, 0x00	; 0
    32ba:	69 f7       	brne	.-38     	; 0x3296 <LCD_init+0xbc>
    32bc:	14 c0       	rjmp	.+40     	; 0x32e6 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32be:	6f 81       	ldd	r22, Y+7	; 0x07
    32c0:	78 85       	ldd	r23, Y+8	; 0x08
    32c2:	89 85       	ldd	r24, Y+9	; 0x09
    32c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9e 83       	std	Y+6, r25	; 0x06
    32d0:	8d 83       	std	Y+5, r24	; 0x05
    32d2:	8d 81       	ldd	r24, Y+5	; 0x05
    32d4:	9e 81       	ldd	r25, Y+6	; 0x06
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	9a 81       	ldd	r25, Y+2	; 0x02
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <LCD_init+0x104>
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
	LCD_sendCommand(LCD_TWO_LINES_4_BIT_MODE_INIT1);
	LCD_sendCommand(LCD_TWO_LINES_4_BIT_MODE_INIT2);
	LCD_sendCommand(LCD_TWO_LINES_4_BIT_MODE);
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_setupPortDirection(PORTC_ID,PORT_OUTPUT);
    32e6:	82 e0       	ldi	r24, 0x02	; 2
    32e8:	6f ef       	ldi	r22, 0xFF	; 255
    32ea:	0e 94 b7 12 	call	0x256e	; 0x256e <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_8_BIT_MODE); /*definitions to be made in header file*/
    32ee:	88 e3       	ldi	r24, 0x38	; 56
    32f0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_sendCommand>
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    32f4:	8c e0       	ldi	r24, 0x0C	; 12
    32f6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_sendCommand>
}
    3300:	2e 96       	adiw	r28, 0x0e	; 14
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	de bf       	out	0x3e, r29	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	cd bf       	out	0x3d, r28	; 61
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	08 95       	ret

00003312 <LCD_displayString>:
 * [Inputs]:
 * 			A pointer to constant char (string)
 * [No Return]
 */
void LCD_displayString(const char *string)
{
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	00 d0       	rcall	.+0      	; 0x3318 <LCD_displayString+0x6>
    3318:	0f 92       	push	r0
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	9b 83       	std	Y+3, r25	; 0x03
    3320:	8a 83       	std	Y+2, r24	; 0x02
	uint8 looper = 0;
    3322:	19 82       	std	Y+1, r1	; 0x01
    3324:	0e c0       	rjmp	.+28     	; 0x3342 <LCD_displayString+0x30>
	while(string[looper] != '\0')
	{
		LCD_displayCharacter(*(string+looper));
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	28 2f       	mov	r18, r24
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	9b 81       	ldd	r25, Y+3	; 0x03
    3330:	fc 01       	movw	r30, r24
    3332:	e2 0f       	add	r30, r18
    3334:	f3 1f       	adc	r31, r19
    3336:	80 81       	ld	r24, Z
    3338:	0e 94 fe 16 	call	0x2dfc	; 0x2dfc <LCD_displayCharacter>
		looper++;
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	8f 5f       	subi	r24, 0xFF	; 255
    3340:	89 83       	std	Y+1, r24	; 0x01
 * [No Return]
 */
void LCD_displayString(const char *string)
{
	uint8 looper = 0;
	while(string[looper] != '\0')
    3342:	89 81       	ldd	r24, Y+1	; 0x01
    3344:	28 2f       	mov	r18, r24
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	9b 81       	ldd	r25, Y+3	; 0x03
    334c:	fc 01       	movw	r30, r24
    334e:	e2 0f       	add	r30, r18
    3350:	f3 1f       	adc	r31, r19
    3352:	80 81       	ld	r24, Z
    3354:	88 23       	and	r24, r24
    3356:	39 f7       	brne	.-50     	; 0x3326 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*(string+looper));
		looper++;
	}
}
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <LCD_moveCursor>:
 * [Inputs]:
 * 			row position, column position
 * [No Return]
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    3364:	df 93       	push	r29
    3366:	cf 93       	push	r28
    3368:	00 d0       	rcall	.+0      	; 0x336a <LCD_moveCursor+0x6>
    336a:	00 d0       	rcall	.+0      	; 0x336c <LCD_moveCursor+0x8>
    336c:	0f 92       	push	r0
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	8a 83       	std	Y+2, r24	; 0x02
    3374:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	switch(row)
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	28 2f       	mov	r18, r24
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	3d 83       	std	Y+5, r19	; 0x05
    337e:	2c 83       	std	Y+4, r18	; 0x04
    3380:	8c 81       	ldd	r24, Y+4	; 0x04
    3382:	9d 81       	ldd	r25, Y+5	; 0x05
    3384:	81 30       	cpi	r24, 0x01	; 1
    3386:	91 05       	cpc	r25, r1
    3388:	c1 f0       	breq	.+48     	; 0x33ba <LCD_moveCursor+0x56>
    338a:	2c 81       	ldd	r18, Y+4	; 0x04
    338c:	3d 81       	ldd	r19, Y+5	; 0x05
    338e:	22 30       	cpi	r18, 0x02	; 2
    3390:	31 05       	cpc	r19, r1
    3392:	2c f4       	brge	.+10     	; 0x339e <LCD_moveCursor+0x3a>
    3394:	8c 81       	ldd	r24, Y+4	; 0x04
    3396:	9d 81       	ldd	r25, Y+5	; 0x05
    3398:	00 97       	sbiw	r24, 0x00	; 0
    339a:	61 f0       	breq	.+24     	; 0x33b4 <LCD_moveCursor+0x50>
    339c:	19 c0       	rjmp	.+50     	; 0x33d0 <LCD_moveCursor+0x6c>
    339e:	2c 81       	ldd	r18, Y+4	; 0x04
    33a0:	3d 81       	ldd	r19, Y+5	; 0x05
    33a2:	22 30       	cpi	r18, 0x02	; 2
    33a4:	31 05       	cpc	r19, r1
    33a6:	69 f0       	breq	.+26     	; 0x33c2 <LCD_moveCursor+0x5e>
    33a8:	8c 81       	ldd	r24, Y+4	; 0x04
    33aa:	9d 81       	ldd	r25, Y+5	; 0x05
    33ac:	83 30       	cpi	r24, 0x03	; 3
    33ae:	91 05       	cpc	r25, r1
    33b0:	61 f0       	breq	.+24     	; 0x33ca <LCD_moveCursor+0x66>
    33b2:	0e c0       	rjmp	.+28     	; 0x33d0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address = col;
    33b4:	8b 81       	ldd	r24, Y+3	; 0x03
    33b6:	89 83       	std	Y+1, r24	; 0x01
    33b8:	0b c0       	rjmp	.+22     	; 0x33d0 <LCD_moveCursor+0x6c>
			break;
		case 1:
			lcd_memory_address = 0x40 + col;
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	80 5c       	subi	r24, 0xC0	; 192
    33be:	89 83       	std	Y+1, r24	; 0x01
    33c0:	07 c0       	rjmp	.+14     	; 0x33d0 <LCD_moveCursor+0x6c>
			break;
		case 2:
			lcd_memory_address = 0x10 + col;
    33c2:	8b 81       	ldd	r24, Y+3	; 0x03
    33c4:	80 5f       	subi	r24, 0xF0	; 240
    33c6:	89 83       	std	Y+1, r24	; 0x01
    33c8:	03 c0       	rjmp	.+6      	; 0x33d0 <LCD_moveCursor+0x6c>
			break;
		case 3:
			lcd_memory_address = 0x50 + col;
    33ca:	8b 81       	ldd	r24, Y+3	; 0x03
    33cc:	80 5b       	subi	r24, 0xB0	; 176
    33ce:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	80 68       	ori	r24, 0x80	; 128
    33d4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_sendCommand>
}
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <LCD_displayStringRowColumn>:
 * [Inputs]:
 * 			A pointer to constant char (string), row position, column position
 * [No Return]
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *string)
{
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <LCD_displayStringRowColumn+0x6>
    33ee:	00 d0       	rcall	.+0      	; 0x33f0 <LCD_displayStringRowColumn+0x8>
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	89 83       	std	Y+1, r24	; 0x01
    33f6:	6a 83       	std	Y+2, r22	; 0x02
    33f8:	5c 83       	std	Y+4, r21	; 0x04
    33fa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    33fc:	89 81       	ldd	r24, Y+1	; 0x01
    33fe:	6a 81       	ldd	r22, Y+2	; 0x02
    3400:	0e 94 b2 19 	call	0x3364	; 0x3364 <LCD_moveCursor>
	LCD_displayString(string);
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	9c 81       	ldd	r25, Y+4	; 0x04
    3408:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
}
    340c:	0f 90       	pop	r0
    340e:	0f 90       	pop	r0
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <LCD_clearScreen>:
 * Function to clear LCD
 * [No Inputs]
 * [No Return]
 */
void LCD_clearScreen(void)
{
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <LCD_sendCommand>
}
    3428:	cf 91       	pop	r28
    342a:	df 91       	pop	r29
    342c:	08 95       	ret

0000342e <LCD_integerToString>:
 * [Inputs]:
 * 			an integer
 * [No Return]
 */
void LCD_integerToString(int data)
{
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	62 97       	sbiw	r28, 0x12	; 18
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
    3442:	9a 8b       	std	Y+18, r25	; 0x12
    3444:	89 8b       	std	Y+17, r24	; 0x11
	uint8 buffer[16]; /*char buffer[16]*/
	itoa(data,buffer,10); /*10 for ASCII in decimal*/
    3446:	89 89       	ldd	r24, Y+17	; 0x11
    3448:	9a 89       	ldd	r25, Y+18	; 0x12
    344a:	9e 01       	movw	r18, r28
    344c:	2f 5f       	subi	r18, 0xFF	; 255
    344e:	3f 4f       	sbci	r19, 0xFF	; 255
    3450:	b9 01       	movw	r22, r18
    3452:	4a e0       	ldi	r20, 0x0A	; 10
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	0e 94 24 22 	call	0x4448	; 0x4448 <itoa>
	LCD_displayString(buffer);
    345a:	ce 01       	movw	r24, r28
    345c:	01 96       	adiw	r24, 0x01	; 1
    345e:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_displayString>
}
    3462:	62 96       	adiw	r28, 0x12	; 18
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	cf 91       	pop	r28
    3470:	df 91       	pop	r29
    3472:	08 95       	ret

00003474 <__vector_11>:
 * 					ISRs of the Timers 0,1,2 to call back the function in the upper abstraction layer
 * [No Inputs]:
 * [No Returns]:
 */
ISR(TIMER0_OVF_vect)
{
    3474:	1f 92       	push	r1
    3476:	0f 92       	push	r0
    3478:	0f b6       	in	r0, 0x3f	; 63
    347a:	0f 92       	push	r0
    347c:	11 24       	eor	r1, r1
    347e:	2f 93       	push	r18
    3480:	3f 93       	push	r19
    3482:	4f 93       	push	r20
    3484:	5f 93       	push	r21
    3486:	6f 93       	push	r22
    3488:	7f 93       	push	r23
    348a:	8f 93       	push	r24
    348c:	9f 93       	push	r25
    348e:	af 93       	push	r26
    3490:	bf 93       	push	r27
    3492:	ef 93       	push	r30
    3494:	ff 93       	push	r31
    3496:	df 93       	push	r29
    3498:	cf 93       	push	r28
    349a:	cd b7       	in	r28, 0x3d	; 61
    349c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_Ovf_g_callBackFunction_Ptr != NULL_PTR)
    349e:	80 91 a7 01 	lds	r24, 0x01A7
    34a2:	90 91 a8 01 	lds	r25, 0x01A8
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	29 f0       	breq	.+10     	; 0x34b4 <__vector_11+0x40>
	{
		(*TIMER0_Ovf_g_callBackFunction_Ptr)();
    34aa:	e0 91 a7 01 	lds	r30, 0x01A7
    34ae:	f0 91 a8 01 	lds	r31, 0x01A8
    34b2:	09 95       	icall
	}
}
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	ff 91       	pop	r31
    34ba:	ef 91       	pop	r30
    34bc:	bf 91       	pop	r27
    34be:	af 91       	pop	r26
    34c0:	9f 91       	pop	r25
    34c2:	8f 91       	pop	r24
    34c4:	7f 91       	pop	r23
    34c6:	6f 91       	pop	r22
    34c8:	5f 91       	pop	r21
    34ca:	4f 91       	pop	r20
    34cc:	3f 91       	pop	r19
    34ce:	2f 91       	pop	r18
    34d0:	0f 90       	pop	r0
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	0f 90       	pop	r0
    34d6:	1f 90       	pop	r1
    34d8:	18 95       	reti

000034da <__vector_10>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER0_COMP_vect)
{
    34da:	1f 92       	push	r1
    34dc:	0f 92       	push	r0
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	0f 92       	push	r0
    34e2:	11 24       	eor	r1, r1
    34e4:	2f 93       	push	r18
    34e6:	3f 93       	push	r19
    34e8:	4f 93       	push	r20
    34ea:	5f 93       	push	r21
    34ec:	6f 93       	push	r22
    34ee:	7f 93       	push	r23
    34f0:	8f 93       	push	r24
    34f2:	9f 93       	push	r25
    34f4:	af 93       	push	r26
    34f6:	bf 93       	push	r27
    34f8:	ef 93       	push	r30
    34fa:	ff 93       	push	r31
    34fc:	df 93       	push	r29
    34fe:	cf 93       	push	r28
    3500:	cd b7       	in	r28, 0x3d	; 61
    3502:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_Comp_g_callBackFunction_Ptr != NULL_PTR)
    3504:	80 91 a5 01 	lds	r24, 0x01A5
    3508:	90 91 a6 01 	lds	r25, 0x01A6
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	29 f0       	breq	.+10     	; 0x351a <__vector_10+0x40>
	{
		(*TIMER0_Comp_g_callBackFunction_Ptr)();
    3510:	e0 91 a5 01 	lds	r30, 0x01A5
    3514:	f0 91 a6 01 	lds	r31, 0x01A6
    3518:	09 95       	icall
	}
}
    351a:	cf 91       	pop	r28
    351c:	df 91       	pop	r29
    351e:	ff 91       	pop	r31
    3520:	ef 91       	pop	r30
    3522:	bf 91       	pop	r27
    3524:	af 91       	pop	r26
    3526:	9f 91       	pop	r25
    3528:	8f 91       	pop	r24
    352a:	7f 91       	pop	r23
    352c:	6f 91       	pop	r22
    352e:	5f 91       	pop	r21
    3530:	4f 91       	pop	r20
    3532:	3f 91       	pop	r19
    3534:	2f 91       	pop	r18
    3536:	0f 90       	pop	r0
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	0f 90       	pop	r0
    353c:	1f 90       	pop	r1
    353e:	18 95       	reti

00003540 <__vector_9>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect)
{
    3540:	1f 92       	push	r1
    3542:	0f 92       	push	r0
    3544:	0f b6       	in	r0, 0x3f	; 63
    3546:	0f 92       	push	r0
    3548:	11 24       	eor	r1, r1
    354a:	2f 93       	push	r18
    354c:	3f 93       	push	r19
    354e:	4f 93       	push	r20
    3550:	5f 93       	push	r21
    3552:	6f 93       	push	r22
    3554:	7f 93       	push	r23
    3556:	8f 93       	push	r24
    3558:	9f 93       	push	r25
    355a:	af 93       	push	r26
    355c:	bf 93       	push	r27
    355e:	ef 93       	push	r30
    3560:	ff 93       	push	r31
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_Ovf_g_callBackFunction_Ptr != NULL_PTR)
    356a:	80 91 ab 01 	lds	r24, 0x01AB
    356e:	90 91 ac 01 	lds	r25, 0x01AC
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	29 f0       	breq	.+10     	; 0x3580 <__vector_9+0x40>
	{
		(*TIMER1_Ovf_g_callBackFunction_Ptr)();
    3576:	e0 91 ab 01 	lds	r30, 0x01AB
    357a:	f0 91 ac 01 	lds	r31, 0x01AC
    357e:	09 95       	icall
	}
}
    3580:	cf 91       	pop	r28
    3582:	df 91       	pop	r29
    3584:	ff 91       	pop	r31
    3586:	ef 91       	pop	r30
    3588:	bf 91       	pop	r27
    358a:	af 91       	pop	r26
    358c:	9f 91       	pop	r25
    358e:	8f 91       	pop	r24
    3590:	7f 91       	pop	r23
    3592:	6f 91       	pop	r22
    3594:	5f 91       	pop	r21
    3596:	4f 91       	pop	r20
    3598:	3f 91       	pop	r19
    359a:	2f 91       	pop	r18
    359c:	0f 90       	pop	r0
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	0f 90       	pop	r0
    35a2:	1f 90       	pop	r1
    35a4:	18 95       	reti

000035a6 <__vector_7>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER1_COMPA_vect)
{
    35a6:	1f 92       	push	r1
    35a8:	0f 92       	push	r0
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	0f 92       	push	r0
    35ae:	11 24       	eor	r1, r1
    35b0:	2f 93       	push	r18
    35b2:	3f 93       	push	r19
    35b4:	4f 93       	push	r20
    35b6:	5f 93       	push	r21
    35b8:	6f 93       	push	r22
    35ba:	7f 93       	push	r23
    35bc:	8f 93       	push	r24
    35be:	9f 93       	push	r25
    35c0:	af 93       	push	r26
    35c2:	bf 93       	push	r27
    35c4:	ef 93       	push	r30
    35c6:	ff 93       	push	r31
    35c8:	df 93       	push	r29
    35ca:	cf 93       	push	r28
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_Comp_g_callBackFunction_Ptr != NULL_PTR)
    35d0:	80 91 a9 01 	lds	r24, 0x01A9
    35d4:	90 91 aa 01 	lds	r25, 0x01AA
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	29 f0       	breq	.+10     	; 0x35e6 <__vector_7+0x40>
	{
		(*TIMER1_Comp_g_callBackFunction_Ptr)();
    35dc:	e0 91 a9 01 	lds	r30, 0x01A9
    35e0:	f0 91 aa 01 	lds	r31, 0x01AA
    35e4:	09 95       	icall
	}
}
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	ff 91       	pop	r31
    35ec:	ef 91       	pop	r30
    35ee:	bf 91       	pop	r27
    35f0:	af 91       	pop	r26
    35f2:	9f 91       	pop	r25
    35f4:	8f 91       	pop	r24
    35f6:	7f 91       	pop	r23
    35f8:	6f 91       	pop	r22
    35fa:	5f 91       	pop	r21
    35fc:	4f 91       	pop	r20
    35fe:	3f 91       	pop	r19
    3600:	2f 91       	pop	r18
    3602:	0f 90       	pop	r0
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	0f 90       	pop	r0
    3608:	1f 90       	pop	r1
    360a:	18 95       	reti

0000360c <__vector_5>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER2_OVF_vect)
{
    360c:	1f 92       	push	r1
    360e:	0f 92       	push	r0
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	0f 92       	push	r0
    3614:	11 24       	eor	r1, r1
    3616:	2f 93       	push	r18
    3618:	3f 93       	push	r19
    361a:	4f 93       	push	r20
    361c:	5f 93       	push	r21
    361e:	6f 93       	push	r22
    3620:	7f 93       	push	r23
    3622:	8f 93       	push	r24
    3624:	9f 93       	push	r25
    3626:	af 93       	push	r26
    3628:	bf 93       	push	r27
    362a:	ef 93       	push	r30
    362c:	ff 93       	push	r31
    362e:	df 93       	push	r29
    3630:	cf 93       	push	r28
    3632:	cd b7       	in	r28, 0x3d	; 61
    3634:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_Ovf_g_callBackFunction_Ptr != NULL_PTR)
    3636:	80 91 af 01 	lds	r24, 0x01AF
    363a:	90 91 b0 01 	lds	r25, 0x01B0
    363e:	00 97       	sbiw	r24, 0x00	; 0
    3640:	29 f0       	breq	.+10     	; 0x364c <__vector_5+0x40>
	{
		(*TIMER2_Ovf_g_callBackFunction_Ptr)();
    3642:	e0 91 af 01 	lds	r30, 0x01AF
    3646:	f0 91 b0 01 	lds	r31, 0x01B0
    364a:	09 95       	icall
	}
}
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	ff 91       	pop	r31
    3652:	ef 91       	pop	r30
    3654:	bf 91       	pop	r27
    3656:	af 91       	pop	r26
    3658:	9f 91       	pop	r25
    365a:	8f 91       	pop	r24
    365c:	7f 91       	pop	r23
    365e:	6f 91       	pop	r22
    3660:	5f 91       	pop	r21
    3662:	4f 91       	pop	r20
    3664:	3f 91       	pop	r19
    3666:	2f 91       	pop	r18
    3668:	0f 90       	pop	r0
    366a:	0f be       	out	0x3f, r0	; 63
    366c:	0f 90       	pop	r0
    366e:	1f 90       	pop	r1
    3670:	18 95       	reti

00003672 <__vector_4>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER2_COMP_vect)
{
    3672:	1f 92       	push	r1
    3674:	0f 92       	push	r0
    3676:	0f b6       	in	r0, 0x3f	; 63
    3678:	0f 92       	push	r0
    367a:	11 24       	eor	r1, r1
    367c:	2f 93       	push	r18
    367e:	3f 93       	push	r19
    3680:	4f 93       	push	r20
    3682:	5f 93       	push	r21
    3684:	6f 93       	push	r22
    3686:	7f 93       	push	r23
    3688:	8f 93       	push	r24
    368a:	9f 93       	push	r25
    368c:	af 93       	push	r26
    368e:	bf 93       	push	r27
    3690:	ef 93       	push	r30
    3692:	ff 93       	push	r31
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_Comp_g_callBackFunction_Ptr != NULL_PTR)
    369c:	80 91 ad 01 	lds	r24, 0x01AD
    36a0:	90 91 ae 01 	lds	r25, 0x01AE
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	29 f0       	breq	.+10     	; 0x36b2 <__vector_4+0x40>
	{
		(*TIMER2_Comp_g_callBackFunction_Ptr)();
    36a8:	e0 91 ad 01 	lds	r30, 0x01AD
    36ac:	f0 91 ae 01 	lds	r31, 0x01AE
    36b0:	09 95       	icall
	}
}
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	ff 91       	pop	r31
    36b8:	ef 91       	pop	r30
    36ba:	bf 91       	pop	r27
    36bc:	af 91       	pop	r26
    36be:	9f 91       	pop	r25
    36c0:	8f 91       	pop	r24
    36c2:	7f 91       	pop	r23
    36c4:	6f 91       	pop	r22
    36c6:	5f 91       	pop	r21
    36c8:	4f 91       	pop	r20
    36ca:	3f 91       	pop	r19
    36cc:	2f 91       	pop	r18
    36ce:	0f 90       	pop	r0
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	0f 90       	pop	r0
    36d4:	1f 90       	pop	r1
    36d6:	18 95       	reti

000036d8 <TIMER0_init>:
 * [Inputs]:		TIMER0 Configuration structure by address
 *
 * [No Returns]:
 */
void TIMER0_init(TIMER_CONFIG_STRUCT *TIMER0_Config_Type)
{
    36d8:	df 93       	push	r29
    36da:	cf 93       	push	r28
    36dc:	00 d0       	rcall	.+0      	; 0x36de <TIMER0_init+0x6>
    36de:	00 d0       	rcall	.+0      	; 0x36e0 <TIMER0_init+0x8>
    36e0:	00 d0       	rcall	.+0      	; 0x36e2 <TIMER0_init+0xa>
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
    36e6:	9a 83       	std	Y+2, r25	; 0x02
    36e8:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TIMER0_Config_Type->Initial_value8;	/*Initial Value*/
    36ea:	a2 e5       	ldi	r26, 0x52	; 82
    36ec:	b0 e0       	ldi	r27, 0x00	; 0
    36ee:	e9 81       	ldd	r30, Y+1	; 0x01
    36f0:	fa 81       	ldd	r31, Y+2	; 0x02
    36f2:	80 81       	ld	r24, Z
    36f4:	8c 93       	st	X, r24
	OCR0  = TIMER0_Config_Type->Compare_Value8;	/*Compare Value*/
    36f6:	ac e5       	ldi	r26, 0x5C	; 92
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	e9 81       	ldd	r30, Y+1	; 0x01
    36fc:	fa 81       	ldd	r31, Y+2	; 0x02
    36fe:	81 81       	ldd	r24, Z+1	; 0x01
    3700:	8c 93       	st	X, r24
	/*switch to choose clock pre-scaler*/
	switch(TIMER0_Config_Type->TIMER_Prescaler)
    3702:	e9 81       	ldd	r30, Y+1	; 0x01
    3704:	fa 81       	ldd	r31, Y+2	; 0x02
    3706:	86 81       	ldd	r24, Z+6	; 0x06
    3708:	28 2f       	mov	r18, r24
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	3e 83       	std	Y+6, r19	; 0x06
    370e:	2d 83       	std	Y+5, r18	; 0x05
    3710:	8d 81       	ldd	r24, Y+5	; 0x05
    3712:	9e 81       	ldd	r25, Y+6	; 0x06
    3714:	86 30       	cpi	r24, 0x06	; 6
    3716:	91 05       	cpc	r25, r1
    3718:	09 f4       	brne	.+2      	; 0x371c <TIMER0_init+0x44>
    371a:	46 c0       	rjmp	.+140    	; 0x37a8 <TIMER0_init+0xd0>
    371c:	2d 81       	ldd	r18, Y+5	; 0x05
    371e:	3e 81       	ldd	r19, Y+6	; 0x06
    3720:	27 30       	cpi	r18, 0x07	; 7
    3722:	31 05       	cpc	r19, r1
    3724:	84 f4       	brge	.+32     	; 0x3746 <TIMER0_init+0x6e>
    3726:	8d 81       	ldd	r24, Y+5	; 0x05
    3728:	9e 81       	ldd	r25, Y+6	; 0x06
    372a:	82 30       	cpi	r24, 0x02	; 2
    372c:	91 05       	cpc	r25, r1
    372e:	29 f1       	breq	.+74     	; 0x377a <TIMER0_init+0xa2>
    3730:	2d 81       	ldd	r18, Y+5	; 0x05
    3732:	3e 81       	ldd	r19, Y+6	; 0x06
    3734:	24 30       	cpi	r18, 0x04	; 4
    3736:	31 05       	cpc	r19, r1
    3738:	41 f1       	breq	.+80     	; 0x378a <TIMER0_init+0xb2>
    373a:	8d 81       	ldd	r24, Y+5	; 0x05
    373c:	9e 81       	ldd	r25, Y+6	; 0x06
    373e:	81 30       	cpi	r24, 0x01	; 1
    3740:	91 05       	cpc	r25, r1
    3742:	99 f0       	breq	.+38     	; 0x376a <TIMER0_init+0x92>
    3744:	7a c0       	rjmp	.+244    	; 0x383a <TIMER0_init+0x162>
    3746:	2d 81       	ldd	r18, Y+5	; 0x05
    3748:	3e 81       	ldd	r19, Y+6	; 0x06
    374a:	28 30       	cpi	r18, 0x08	; 8
    374c:	31 05       	cpc	r19, r1
    374e:	09 f4       	brne	.+2      	; 0x3752 <TIMER0_init+0x7a>
    3750:	42 c0       	rjmp	.+132    	; 0x37d6 <TIMER0_init+0xfe>
    3752:	8d 81       	ldd	r24, Y+5	; 0x05
    3754:	9e 81       	ldd	r25, Y+6	; 0x06
    3756:	88 30       	cpi	r24, 0x08	; 8
    3758:	91 05       	cpc	r25, r1
    375a:	74 f1       	brlt	.+92     	; 0x37b8 <TIMER0_init+0xe0>
    375c:	2d 81       	ldd	r18, Y+5	; 0x05
    375e:	3e 81       	ldd	r19, Y+6	; 0x06
    3760:	29 30       	cpi	r18, 0x09	; 9
    3762:	31 05       	cpc	r19, r1
    3764:	09 f4       	brne	.+2      	; 0x3768 <TIMER0_init+0x90>
    3766:	4d c0       	rjmp	.+154    	; 0x3802 <TIMER0_init+0x12a>
    3768:	68 c0       	rjmp	.+208    	; 0x383a <TIMER0_init+0x162>
	{
		case F_CPU_CLOCK:
			SET_BIT(TCCR0,CS00);
    376a:	a3 e5       	ldi	r26, 0x53	; 83
    376c:	b0 e0       	ldi	r27, 0x00	; 0
    376e:	e3 e5       	ldi	r30, 0x53	; 83
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	80 81       	ld	r24, Z
    3774:	81 60       	ori	r24, 0x01	; 1
    3776:	8c 93       	st	X, r24
    3778:	60 c0       	rjmp	.+192    	; 0x383a <TIMER0_init+0x162>
			break;
		case F_CPU_N8:
			SET_BIT(TCCR0,CS01);
    377a:	a3 e5       	ldi	r26, 0x53	; 83
    377c:	b0 e0       	ldi	r27, 0x00	; 0
    377e:	e3 e5       	ldi	r30, 0x53	; 83
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	80 81       	ld	r24, Z
    3784:	82 60       	ori	r24, 0x02	; 2
    3786:	8c 93       	st	X, r24
    3788:	58 c0       	rjmp	.+176    	; 0x383a <TIMER0_init+0x162>
			break;
		case F_CPU_N64:
			SET_BIT(TCCR0,CS00);
    378a:	a3 e5       	ldi	r26, 0x53	; 83
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	e3 e5       	ldi	r30, 0x53	; 83
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	81 60       	ori	r24, 0x01	; 1
    3796:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
    3798:	a3 e5       	ldi	r26, 0x53	; 83
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	e3 e5       	ldi	r30, 0x53	; 83
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	82 60       	ori	r24, 0x02	; 2
    37a4:	8c 93       	st	X, r24
    37a6:	49 c0       	rjmp	.+146    	; 0x383a <TIMER0_init+0x162>
			break;
		case F_CPU_N256:
			SET_BIT(TCCR0,CS02);
    37a8:	a3 e5       	ldi	r26, 0x53	; 83
    37aa:	b0 e0       	ldi	r27, 0x00	; 0
    37ac:	e3 e5       	ldi	r30, 0x53	; 83
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
    37b2:	84 60       	ori	r24, 0x04	; 4
    37b4:	8c 93       	st	X, r24
    37b6:	41 c0       	rjmp	.+130    	; 0x383a <TIMER0_init+0x162>
			break;
		case F_CPU_N1024:
			SET_BIT(TCCR0,CS00);
    37b8:	a3 e5       	ldi	r26, 0x53	; 83
    37ba:	b0 e0       	ldi	r27, 0x00	; 0
    37bc:	e3 e5       	ldi	r30, 0x53	; 83
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	81 60       	ori	r24, 0x01	; 1
    37c4:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    37c6:	a3 e5       	ldi	r26, 0x53	; 83
    37c8:	b0 e0       	ldi	r27, 0x00	; 0
    37ca:	e3 e5       	ldi	r30, 0x53	; 83
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	84 60       	ori	r24, 0x04	; 4
    37d2:	8c 93       	st	X, r24
    37d4:	32 c0       	rjmp	.+100    	; 0x383a <TIMER0_init+0x162>
			break;
		case T0_EXTERNAL_CLOCK_FALLING:
			SET_BIT(TCCR0,CS01);
    37d6:	a3 e5       	ldi	r26, 0x53	; 83
    37d8:	b0 e0       	ldi	r27, 0x00	; 0
    37da:	e3 e5       	ldi	r30, 0x53	; 83
    37dc:	f0 e0       	ldi	r31, 0x00	; 0
    37de:	80 81       	ld	r24, Z
    37e0:	82 60       	ori	r24, 0x02	; 2
    37e2:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    37e4:	a3 e5       	ldi	r26, 0x53	; 83
    37e6:	b0 e0       	ldi	r27, 0x00	; 0
    37e8:	e3 e5       	ldi	r30, 0x53	; 83
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	80 81       	ld	r24, Z
    37ee:	84 60       	ori	r24, 0x04	; 4
    37f0:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,PB0);
    37f2:	a7 e3       	ldi	r26, 0x37	; 55
    37f4:	b0 e0       	ldi	r27, 0x00	; 0
    37f6:	e7 e3       	ldi	r30, 0x37	; 55
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	80 81       	ld	r24, Z
    37fc:	8e 7f       	andi	r24, 0xFE	; 254
    37fe:	8c 93       	st	X, r24
    3800:	1c c0       	rjmp	.+56     	; 0x383a <TIMER0_init+0x162>
			break;
		case T0_EXTERNAL_CLOCK_RISING:
			SET_BIT(TCCR0,CS00);
    3802:	a3 e5       	ldi	r26, 0x53	; 83
    3804:	b0 e0       	ldi	r27, 0x00	; 0
    3806:	e3 e5       	ldi	r30, 0x53	; 83
    3808:	f0 e0       	ldi	r31, 0x00	; 0
    380a:	80 81       	ld	r24, Z
    380c:	81 60       	ori	r24, 0x01	; 1
    380e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
    3810:	a3 e5       	ldi	r26, 0x53	; 83
    3812:	b0 e0       	ldi	r27, 0x00	; 0
    3814:	e3 e5       	ldi	r30, 0x53	; 83
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	80 81       	ld	r24, Z
    381a:	82 60       	ori	r24, 0x02	; 2
    381c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    381e:	a3 e5       	ldi	r26, 0x53	; 83
    3820:	b0 e0       	ldi	r27, 0x00	; 0
    3822:	e3 e5       	ldi	r30, 0x53	; 83
    3824:	f0 e0       	ldi	r31, 0x00	; 0
    3826:	80 81       	ld	r24, Z
    3828:	84 60       	ori	r24, 0x04	; 4
    382a:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,PB0);
    382c:	a7 e3       	ldi	r26, 0x37	; 55
    382e:	b0 e0       	ldi	r27, 0x00	; 0
    3830:	e7 e3       	ldi	r30, 0x37	; 55
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	80 81       	ld	r24, Z
    3836:	8e 7f       	andi	r24, 0xFE	; 254
    3838:	8c 93       	st	X, r24
			break;
	}
	/*switch to choose mode*/
	switch(TIMER0_Config_Type->TIMER_Mode)
    383a:	e9 81       	ldd	r30, Y+1	; 0x01
    383c:	fa 81       	ldd	r31, Y+2	; 0x02
    383e:	87 81       	ldd	r24, Z+7	; 0x07
    3840:	28 2f       	mov	r18, r24
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	3c 83       	std	Y+4, r19	; 0x04
    3846:	2b 83       	std	Y+3, r18	; 0x03
    3848:	8b 81       	ldd	r24, Y+3	; 0x03
    384a:	9c 81       	ldd	r25, Y+4	; 0x04
    384c:	81 30       	cpi	r24, 0x01	; 1
    384e:	91 05       	cpc	r25, r1
    3850:	c9 f0       	breq	.+50     	; 0x3884 <TIMER0_init+0x1ac>
    3852:	2b 81       	ldd	r18, Y+3	; 0x03
    3854:	3c 81       	ldd	r19, Y+4	; 0x04
    3856:	22 30       	cpi	r18, 0x02	; 2
    3858:	31 05       	cpc	r19, r1
    385a:	51 f1       	breq	.+84     	; 0x38b0 <TIMER0_init+0x1d8>
    385c:	8b 81       	ldd	r24, Y+3	; 0x03
    385e:	9c 81       	ldd	r25, Y+4	; 0x04
    3860:	00 97       	sbiw	r24, 0x00	; 0
    3862:	09 f0       	breq	.+2      	; 0x3866 <TIMER0_init+0x18e>
    3864:	41 c0       	rjmp	.+130    	; 0x38e8 <TIMER0_init+0x210>
	{
		case OVERFLOW_MODE:
			SET_BIT(TIMSK,TOIE0);	/*Enable Overflow Mode Interrupt Module*/
    3866:	a9 e5       	ldi	r26, 0x59	; 89
    3868:	b0 e0       	ldi	r27, 0x00	; 0
    386a:	e9 e5       	ldi	r30, 0x59	; 89
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	80 81       	ld	r24, Z
    3870:	81 60       	ori	r24, 0x01	; 1
    3872:	8c 93       	st	X, r24
			SET_BIT(TCCR0,FOC0);
    3874:	a3 e5       	ldi	r26, 0x53	; 83
    3876:	b0 e0       	ldi	r27, 0x00	; 0
    3878:	e3 e5       	ldi	r30, 0x53	; 83
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	80 81       	ld	r24, Z
    387e:	80 68       	ori	r24, 0x80	; 128
    3880:	8c 93       	st	X, r24
    3882:	32 c0       	rjmp	.+100    	; 0x38e8 <TIMER0_init+0x210>
			break;
		case COMPARE_MODE:
			SET_BIT(TIMSK,OCIE0);	/*Enable Compare Mode Interrupt Module*/
    3884:	a9 e5       	ldi	r26, 0x59	; 89
    3886:	b0 e0       	ldi	r27, 0x00	; 0
    3888:	e9 e5       	ldi	r30, 0x59	; 89
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	80 81       	ld	r24, Z
    388e:	82 60       	ori	r24, 0x02	; 2
    3890:	8c 93       	st	X, r24
			SET_BIT(TCCR0,FOC0);
    3892:	a3 e5       	ldi	r26, 0x53	; 83
    3894:	b0 e0       	ldi	r27, 0x00	; 0
    3896:	e3 e5       	ldi	r30, 0x53	; 83
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	80 81       	ld	r24, Z
    389c:	80 68       	ori	r24, 0x80	; 128
    389e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    38a0:	a3 e5       	ldi	r26, 0x53	; 83
    38a2:	b0 e0       	ldi	r27, 0x00	; 0
    38a4:	e3 e5       	ldi	r30, 0x53	; 83
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	80 81       	ld	r24, Z
    38aa:	88 60       	ori	r24, 0x08	; 8
    38ac:	8c 93       	st	X, r24
    38ae:	1c c0       	rjmp	.+56     	; 0x38e8 <TIMER0_init+0x210>
			break;
		case PWM_MODE:				/*FPWM=F_CPU/N*256*/
			SET_BIT(DDRB,PB3); 		/*Make OC0 as output pin*/
    38b0:	a7 e3       	ldi	r26, 0x37	; 55
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	e7 e3       	ldi	r30, 0x37	; 55
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	80 81       	ld	r24, Z
    38ba:	88 60       	ori	r24, 0x08	; 8
    38bc:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM00);
    38be:	a3 e5       	ldi	r26, 0x53	; 83
    38c0:	b0 e0       	ldi	r27, 0x00	; 0
    38c2:	e3 e5       	ldi	r30, 0x53	; 83
    38c4:	f0 e0       	ldi	r31, 0x00	; 0
    38c6:	80 81       	ld	r24, Z
    38c8:	80 64       	ori	r24, 0x40	; 64
    38ca:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    38cc:	a3 e5       	ldi	r26, 0x53	; 83
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	e3 e5       	ldi	r30, 0x53	; 83
    38d2:	f0 e0       	ldi	r31, 0x00	; 0
    38d4:	80 81       	ld	r24, Z
    38d6:	88 60       	ori	r24, 0x08	; 8
    38d8:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);	/*Non-Inverting Mode*/
    38da:	a3 e5       	ldi	r26, 0x53	; 83
    38dc:	b0 e0       	ldi	r27, 0x00	; 0
    38de:	e3 e5       	ldi	r30, 0x53	; 83
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	80 81       	ld	r24, Z
    38e4:	80 62       	ori	r24, 0x20	; 32
    38e6:	8c 93       	st	X, r24
			break;
	}
}
    38e8:	26 96       	adiw	r28, 0x06	; 6
    38ea:	0f b6       	in	r0, 0x3f	; 63
    38ec:	f8 94       	cli
    38ee:	de bf       	out	0x3e, r29	; 62
    38f0:	0f be       	out	0x3f, r0	; 63
    38f2:	cd bf       	out	0x3d, r28	; 61
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <TIMER0_setCallBackFunctionsOVF>:
 * [Inputs]:		Pointers to functions that will be called from Timer0 ISR
 *
 * [No Returns]:
 */
void TIMER0_setCallBackFunctionsOVF(void(*a_FunctionPtr_OVF)(void))
{
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <TIMER0_setCallBackFunctionsOVF+0x6>
    3900:	cd b7       	in	r28, 0x3d	; 61
    3902:	de b7       	in	r29, 0x3e	; 62
    3904:	9a 83       	std	Y+2, r25	; 0x02
    3906:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Ovf_g_callBackFunction_Ptr = a_FunctionPtr_OVF;
    3908:	89 81       	ldd	r24, Y+1	; 0x01
    390a:	9a 81       	ldd	r25, Y+2	; 0x02
    390c:	90 93 a8 01 	sts	0x01A8, r25
    3910:	80 93 a7 01 	sts	0x01A7, r24
}
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	08 95       	ret

0000391e <TIMER0_setCallBackFunctionCOMP>:
void TIMER0_setCallBackFunctionCOMP(void(*a_FunctionPtr_COMP)(void))
{
    391e:	df 93       	push	r29
    3920:	cf 93       	push	r28
    3922:	00 d0       	rcall	.+0      	; 0x3924 <TIMER0_setCallBackFunctionCOMP+0x6>
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	9a 83       	std	Y+2, r25	; 0x02
    392a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Comp_g_callBackFunction_Ptr = a_FunctionPtr_COMP;
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	9a 81       	ldd	r25, Y+2	; 0x02
    3930:	90 93 a6 01 	sts	0x01A6, r25
    3934:	80 93 a5 01 	sts	0x01A5, r24
}
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	cf 91       	pop	r28
    393e:	df 91       	pop	r29
    3940:	08 95       	ret

00003942 <TIMER0_Deinit>:
 * 					Function to turn off Timer0
 * [No Inputs]:
 * [No Returns]:
 */
void TIMER0_Deinit(void)
{
    3942:	df 93       	push	r29
    3944:	cf 93       	push	r28
    3946:	cd b7       	in	r28, 0x3d	; 61
    3948:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,PB0);		/*Detach T0*/
    394a:	a7 e3       	ldi	r26, 0x37	; 55
    394c:	b0 e0       	ldi	r27, 0x00	; 0
    394e:	e7 e3       	ldi	r30, 0x37	; 55
    3950:	f0 e0       	ldi	r31, 0x00	; 0
    3952:	80 81       	ld	r24, Z
    3954:	81 60       	ori	r24, 0x01	; 1
    3956:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB,PB3);	/*Detach OC0*/
    3958:	a7 e3       	ldi	r26, 0x37	; 55
    395a:	b0 e0       	ldi	r27, 0x00	; 0
    395c:	e7 e3       	ldi	r30, 0x37	; 55
    395e:	f0 e0       	ldi	r31, 0x00	; 0
    3960:	80 81       	ld	r24, Z
    3962:	87 7f       	andi	r24, 0xF7	; 247
    3964:	8c 93       	st	X, r24
	TCCR0 = 0;				/*Clear Timer0 Control Register*/
    3966:	e3 e5       	ldi	r30, 0x53	; 83
    3968:	f0 e0       	ldi	r31, 0x00	; 0
    396a:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0); /*Disable Overflow Mode Interrupt Module*/
    396c:	a9 e5       	ldi	r26, 0x59	; 89
    396e:	b0 e0       	ldi	r27, 0x00	; 0
    3970:	e9 e5       	ldi	r30, 0x59	; 89
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	80 81       	ld	r24, Z
    3976:	8d 7f       	andi	r24, 0xFD	; 253
    3978:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0); /*Disable Compare Mode Interrupt Module*/
    397a:	a9 e5       	ldi	r26, 0x59	; 89
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	e9 e5       	ldi	r30, 0x59	; 89
    3980:	f0 e0       	ldi	r31, 0x00	; 0
    3982:	80 81       	ld	r24, Z
    3984:	8e 7f       	andi	r24, 0xFE	; 254
    3986:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF0);	/*Clear Compare Mode Flag*/
    3988:	a8 e5       	ldi	r26, 0x58	; 88
    398a:	b0 e0       	ldi	r27, 0x00	; 0
    398c:	e8 e5       	ldi	r30, 0x58	; 88
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	80 81       	ld	r24, Z
    3992:	8d 7f       	andi	r24, 0xFD	; 253
    3994:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV0);	/*Clear Overflow Mode Flag*/
    3996:	a8 e5       	ldi	r26, 0x58	; 88
    3998:	b0 e0       	ldi	r27, 0x00	; 0
    399a:	e8 e5       	ldi	r30, 0x58	; 88
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	80 81       	ld	r24, Z
    39a0:	8e 7f       	andi	r24, 0xFE	; 254
    39a2:	8c 93       	st	X, r24
	OCR0  = 0;				/*Clear Compare Register*/
    39a4:	ec e5       	ldi	r30, 0x5C	; 92
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	10 82       	st	Z, r1
	TCNT0 = 0;				/*Clear Counter Register*/
    39aa:	e2 e5       	ldi	r30, 0x52	; 82
    39ac:	f0 e0       	ldi	r31, 0x00	; 0
    39ae:	10 82       	st	Z, r1
}
    39b0:	cf 91       	pop	r28
    39b2:	df 91       	pop	r29
    39b4:	08 95       	ret

000039b6 <TIMER1_init>:
 * [Inputs]:		TIMER1 Configuration structure by address
 *
 * [No Returns]:
 */
void TIMER1_init(TIMER_CONFIG_STRUCT *TIMER1_Config_Type)
{
    39b6:	df 93       	push	r29
    39b8:	cf 93       	push	r28
    39ba:	00 d0       	rcall	.+0      	; 0x39bc <TIMER1_init+0x6>
    39bc:	00 d0       	rcall	.+0      	; 0x39be <TIMER1_init+0x8>
    39be:	00 d0       	rcall	.+0      	; 0x39c0 <TIMER1_init+0xa>
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	9a 83       	std	Y+2, r25	; 0x02
    39c6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = TIMER1_Config_Type->Initial_value16;	/*Initial Value*/
    39c8:	ac e4       	ldi	r26, 0x4C	; 76
    39ca:	b0 e0       	ldi	r27, 0x00	; 0
    39cc:	e9 81       	ldd	r30, Y+1	; 0x01
    39ce:	fa 81       	ldd	r31, Y+2	; 0x02
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	93 81       	ldd	r25, Z+3	; 0x03
    39d4:	11 96       	adiw	r26, 0x01	; 1
    39d6:	9c 93       	st	X, r25
    39d8:	8e 93       	st	-X, r24
	OCR1A = TIMER1_Config_Type->Compare_Value16;	/*Compare Value*/
    39da:	aa e4       	ldi	r26, 0x4A	; 74
    39dc:	b0 e0       	ldi	r27, 0x00	; 0
    39de:	e9 81       	ldd	r30, Y+1	; 0x01
    39e0:	fa 81       	ldd	r31, Y+2	; 0x02
    39e2:	84 81       	ldd	r24, Z+4	; 0x04
    39e4:	95 81       	ldd	r25, Z+5	; 0x05
    39e6:	11 96       	adiw	r26, 0x01	; 1
    39e8:	9c 93       	st	X, r25
    39ea:	8e 93       	st	-X, r24
	ICR1  = TIMER1_Config_Type->Compare_Value16;	/*Top value in PWM Mode*/
    39ec:	a6 e4       	ldi	r26, 0x46	; 70
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	e9 81       	ldd	r30, Y+1	; 0x01
    39f2:	fa 81       	ldd	r31, Y+2	; 0x02
    39f4:	84 81       	ldd	r24, Z+4	; 0x04
    39f6:	95 81       	ldd	r25, Z+5	; 0x05
    39f8:	11 96       	adiw	r26, 0x01	; 1
    39fa:	9c 93       	st	X, r25
    39fc:	8e 93       	st	-X, r24
	/*switch to choose clock pre-scaler*/
	switch(TIMER1_Config_Type->TIMER_Prescaler)
    39fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3a00:	fa 81       	ldd	r31, Y+2	; 0x02
    3a02:	86 81       	ldd	r24, Z+6	; 0x06
    3a04:	28 2f       	mov	r18, r24
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	3e 83       	std	Y+6, r19	; 0x06
    3a0a:	2d 83       	std	Y+5, r18	; 0x05
    3a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a10:	86 30       	cpi	r24, 0x06	; 6
    3a12:	91 05       	cpc	r25, r1
    3a14:	09 f4       	brne	.+2      	; 0x3a18 <TIMER1_init+0x62>
    3a16:	46 c0       	rjmp	.+140    	; 0x3aa4 <TIMER1_init+0xee>
    3a18:	2d 81       	ldd	r18, Y+5	; 0x05
    3a1a:	3e 81       	ldd	r19, Y+6	; 0x06
    3a1c:	27 30       	cpi	r18, 0x07	; 7
    3a1e:	31 05       	cpc	r19, r1
    3a20:	84 f4       	brge	.+32     	; 0x3a42 <TIMER1_init+0x8c>
    3a22:	8d 81       	ldd	r24, Y+5	; 0x05
    3a24:	9e 81       	ldd	r25, Y+6	; 0x06
    3a26:	82 30       	cpi	r24, 0x02	; 2
    3a28:	91 05       	cpc	r25, r1
    3a2a:	29 f1       	breq	.+74     	; 0x3a76 <TIMER1_init+0xc0>
    3a2c:	2d 81       	ldd	r18, Y+5	; 0x05
    3a2e:	3e 81       	ldd	r19, Y+6	; 0x06
    3a30:	24 30       	cpi	r18, 0x04	; 4
    3a32:	31 05       	cpc	r19, r1
    3a34:	41 f1       	breq	.+80     	; 0x3a86 <TIMER1_init+0xd0>
    3a36:	8d 81       	ldd	r24, Y+5	; 0x05
    3a38:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3a:	81 30       	cpi	r24, 0x01	; 1
    3a3c:	91 05       	cpc	r25, r1
    3a3e:	99 f0       	breq	.+38     	; 0x3a66 <TIMER1_init+0xb0>
    3a40:	7a c0       	rjmp	.+244    	; 0x3b36 <TIMER1_init+0x180>
    3a42:	2d 81       	ldd	r18, Y+5	; 0x05
    3a44:	3e 81       	ldd	r19, Y+6	; 0x06
    3a46:	2a 30       	cpi	r18, 0x0A	; 10
    3a48:	31 05       	cpc	r19, r1
    3a4a:	09 f4       	brne	.+2      	; 0x3a4e <TIMER1_init+0x98>
    3a4c:	42 c0       	rjmp	.+132    	; 0x3ad2 <TIMER1_init+0x11c>
    3a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a50:	9e 81       	ldd	r25, Y+6	; 0x06
    3a52:	8b 30       	cpi	r24, 0x0B	; 11
    3a54:	91 05       	cpc	r25, r1
    3a56:	09 f4       	brne	.+2      	; 0x3a5a <TIMER1_init+0xa4>
    3a58:	52 c0       	rjmp	.+164    	; 0x3afe <TIMER1_init+0x148>
    3a5a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a5c:	3e 81       	ldd	r19, Y+6	; 0x06
    3a5e:	27 30       	cpi	r18, 0x07	; 7
    3a60:	31 05       	cpc	r19, r1
    3a62:	41 f1       	breq	.+80     	; 0x3ab4 <TIMER1_init+0xfe>
    3a64:	68 c0       	rjmp	.+208    	; 0x3b36 <TIMER1_init+0x180>
	{
		case F_CPU_CLOCK:
			SET_BIT(TCCR1B,CS10);
    3a66:	ae e4       	ldi	r26, 0x4E	; 78
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
    3a6a:	ee e4       	ldi	r30, 0x4E	; 78
    3a6c:	f0 e0       	ldi	r31, 0x00	; 0
    3a6e:	80 81       	ld	r24, Z
    3a70:	81 60       	ori	r24, 0x01	; 1
    3a72:	8c 93       	st	X, r24
    3a74:	60 c0       	rjmp	.+192    	; 0x3b36 <TIMER1_init+0x180>
			break;
		case F_CPU_N8:
			SET_BIT(TCCR1B,CS11);
    3a76:	ae e4       	ldi	r26, 0x4E	; 78
    3a78:	b0 e0       	ldi	r27, 0x00	; 0
    3a7a:	ee e4       	ldi	r30, 0x4E	; 78
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	80 81       	ld	r24, Z
    3a80:	82 60       	ori	r24, 0x02	; 2
    3a82:	8c 93       	st	X, r24
    3a84:	58 c0       	rjmp	.+176    	; 0x3b36 <TIMER1_init+0x180>
			break;
		case F_CPU_N64:
			SET_BIT(TCCR1B,CS10);
    3a86:	ae e4       	ldi	r26, 0x4E	; 78
    3a88:	b0 e0       	ldi	r27, 0x00	; 0
    3a8a:	ee e4       	ldi	r30, 0x4E	; 78
    3a8c:	f0 e0       	ldi	r31, 0x00	; 0
    3a8e:	80 81       	ld	r24, Z
    3a90:	81 60       	ori	r24, 0x01	; 1
    3a92:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    3a94:	ae e4       	ldi	r26, 0x4E	; 78
    3a96:	b0 e0       	ldi	r27, 0x00	; 0
    3a98:	ee e4       	ldi	r30, 0x4E	; 78
    3a9a:	f0 e0       	ldi	r31, 0x00	; 0
    3a9c:	80 81       	ld	r24, Z
    3a9e:	82 60       	ori	r24, 0x02	; 2
    3aa0:	8c 93       	st	X, r24
    3aa2:	49 c0       	rjmp	.+146    	; 0x3b36 <TIMER1_init+0x180>
			break;
		case F_CPU_N256:
			SET_BIT(TCCR1B,CS12);
    3aa4:	ae e4       	ldi	r26, 0x4E	; 78
    3aa6:	b0 e0       	ldi	r27, 0x00	; 0
    3aa8:	ee e4       	ldi	r30, 0x4E	; 78
    3aaa:	f0 e0       	ldi	r31, 0x00	; 0
    3aac:	80 81       	ld	r24, Z
    3aae:	84 60       	ori	r24, 0x04	; 4
    3ab0:	8c 93       	st	X, r24
    3ab2:	41 c0       	rjmp	.+130    	; 0x3b36 <TIMER1_init+0x180>
			break;
		case F_CPU_N1024:
			SET_BIT(TCCR1B,CS10);
    3ab4:	ae e4       	ldi	r26, 0x4E	; 78
    3ab6:	b0 e0       	ldi	r27, 0x00	; 0
    3ab8:	ee e4       	ldi	r30, 0x4E	; 78
    3aba:	f0 e0       	ldi	r31, 0x00	; 0
    3abc:	80 81       	ld	r24, Z
    3abe:	81 60       	ori	r24, 0x01	; 1
    3ac0:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
    3ac2:	ae e4       	ldi	r26, 0x4E	; 78
    3ac4:	b0 e0       	ldi	r27, 0x00	; 0
    3ac6:	ee e4       	ldi	r30, 0x4E	; 78
    3ac8:	f0 e0       	ldi	r31, 0x00	; 0
    3aca:	80 81       	ld	r24, Z
    3acc:	84 60       	ori	r24, 0x04	; 4
    3ace:	8c 93       	st	X, r24
    3ad0:	32 c0       	rjmp	.+100    	; 0x3b36 <TIMER1_init+0x180>
			break;
		case T1_EXTERNAL_CLOCK_FALLING:
			SET_BIT(TCCR1B,CS11);
    3ad2:	ae e4       	ldi	r26, 0x4E	; 78
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	ee e4       	ldi	r30, 0x4E	; 78
    3ad8:	f0 e0       	ldi	r31, 0x00	; 0
    3ada:	80 81       	ld	r24, Z
    3adc:	82 60       	ori	r24, 0x02	; 2
    3ade:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
    3ae0:	ae e4       	ldi	r26, 0x4E	; 78
    3ae2:	b0 e0       	ldi	r27, 0x00	; 0
    3ae4:	ee e4       	ldi	r30, 0x4E	; 78
    3ae6:	f0 e0       	ldi	r31, 0x00	; 0
    3ae8:	80 81       	ld	r24, Z
    3aea:	84 60       	ori	r24, 0x04	; 4
    3aec:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,PB1);
    3aee:	a7 e3       	ldi	r26, 0x37	; 55
    3af0:	b0 e0       	ldi	r27, 0x00	; 0
    3af2:	e7 e3       	ldi	r30, 0x37	; 55
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	80 81       	ld	r24, Z
    3af8:	8d 7f       	andi	r24, 0xFD	; 253
    3afa:	8c 93       	st	X, r24
    3afc:	1c c0       	rjmp	.+56     	; 0x3b36 <TIMER1_init+0x180>
			break;
		case T1_EXTERNAL_CLOCK_RISING:
			SET_BIT(TCCR1B,CS10);
    3afe:	ae e4       	ldi	r26, 0x4E	; 78
    3b00:	b0 e0       	ldi	r27, 0x00	; 0
    3b02:	ee e4       	ldi	r30, 0x4E	; 78
    3b04:	f0 e0       	ldi	r31, 0x00	; 0
    3b06:	80 81       	ld	r24, Z
    3b08:	81 60       	ori	r24, 0x01	; 1
    3b0a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    3b0c:	ae e4       	ldi	r26, 0x4E	; 78
    3b0e:	b0 e0       	ldi	r27, 0x00	; 0
    3b10:	ee e4       	ldi	r30, 0x4E	; 78
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	80 81       	ld	r24, Z
    3b16:	82 60       	ori	r24, 0x02	; 2
    3b18:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
    3b1a:	ae e4       	ldi	r26, 0x4E	; 78
    3b1c:	b0 e0       	ldi	r27, 0x00	; 0
    3b1e:	ee e4       	ldi	r30, 0x4E	; 78
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	80 81       	ld	r24, Z
    3b24:	84 60       	ori	r24, 0x04	; 4
    3b26:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,PB1);
    3b28:	a7 e3       	ldi	r26, 0x37	; 55
    3b2a:	b0 e0       	ldi	r27, 0x00	; 0
    3b2c:	e7 e3       	ldi	r30, 0x37	; 55
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	80 81       	ld	r24, Z
    3b32:	8d 7f       	andi	r24, 0xFD	; 253
    3b34:	8c 93       	st	X, r24
			break;
	}
	/*switch to choose mode*/
	switch(TIMER1_Config_Type->TIMER_Mode)
    3b36:	e9 81       	ldd	r30, Y+1	; 0x01
    3b38:	fa 81       	ldd	r31, Y+2	; 0x02
    3b3a:	87 81       	ldd	r24, Z+7	; 0x07
    3b3c:	28 2f       	mov	r18, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	3c 83       	std	Y+4, r19	; 0x04
    3b42:	2b 83       	std	Y+3, r18	; 0x03
    3b44:	8b 81       	ldd	r24, Y+3	; 0x03
    3b46:	9c 81       	ldd	r25, Y+4	; 0x04
    3b48:	81 30       	cpi	r24, 0x01	; 1
    3b4a:	91 05       	cpc	r25, r1
    3b4c:	01 f1       	breq	.+64     	; 0x3b8e <TIMER1_init+0x1d8>
    3b4e:	2b 81       	ldd	r18, Y+3	; 0x03
    3b50:	3c 81       	ldd	r19, Y+4	; 0x04
    3b52:	22 30       	cpi	r18, 0x02	; 2
    3b54:	31 05       	cpc	r19, r1
    3b56:	c1 f1       	breq	.+112    	; 0x3bc8 <TIMER1_init+0x212>
    3b58:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <TIMER1_init+0x1ac>
    3b60:	5d c0       	rjmp	.+186    	; 0x3c1c <TIMER1_init+0x266>
	{
		case OVERFLOW_MODE:
			SET_BIT(TIMSK,TOIE1);	/*Enable Overflow Mode Interrupt Module*/
    3b62:	a9 e5       	ldi	r26, 0x59	; 89
    3b64:	b0 e0       	ldi	r27, 0x00	; 0
    3b66:	e9 e5       	ldi	r30, 0x59	; 89
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	80 81       	ld	r24, Z
    3b6c:	84 60       	ori	r24, 0x04	; 4
    3b6e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1A);
    3b70:	af e4       	ldi	r26, 0x4F	; 79
    3b72:	b0 e0       	ldi	r27, 0x00	; 0
    3b74:	ef e4       	ldi	r30, 0x4F	; 79
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	80 81       	ld	r24, Z
    3b7a:	88 60       	ori	r24, 0x08	; 8
    3b7c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    3b7e:	af e4       	ldi	r26, 0x4F	; 79
    3b80:	b0 e0       	ldi	r27, 0x00	; 0
    3b82:	ef e4       	ldi	r30, 0x4F	; 79
    3b84:	f0 e0       	ldi	r31, 0x00	; 0
    3b86:	80 81       	ld	r24, Z
    3b88:	84 60       	ori	r24, 0x04	; 4
    3b8a:	8c 93       	st	X, r24
    3b8c:	47 c0       	rjmp	.+142    	; 0x3c1c <TIMER1_init+0x266>
			break;
		case COMPARE_MODE:
			SET_BIT(TIMSK,OCIE1A);	/*Enable Compare Mode Interrupt Module*/
    3b8e:	a9 e5       	ldi	r26, 0x59	; 89
    3b90:	b0 e0       	ldi	r27, 0x00	; 0
    3b92:	e9 e5       	ldi	r30, 0x59	; 89
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	80 81       	ld	r24, Z
    3b98:	80 61       	ori	r24, 0x10	; 16
    3b9a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1A);
    3b9c:	af e4       	ldi	r26, 0x4F	; 79
    3b9e:	b0 e0       	ldi	r27, 0x00	; 0
    3ba0:	ef e4       	ldi	r30, 0x4F	; 79
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	80 81       	ld	r24, Z
    3ba6:	88 60       	ori	r24, 0x08	; 8
    3ba8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    3baa:	af e4       	ldi	r26, 0x4F	; 79
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	ef e4       	ldi	r30, 0x4F	; 79
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	80 81       	ld	r24, Z
    3bb4:	84 60       	ori	r24, 0x04	; 4
    3bb6:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    3bb8:	ae e4       	ldi	r26, 0x4E	; 78
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	ee e4       	ldi	r30, 0x4E	; 78
    3bbe:	f0 e0       	ldi	r31, 0x00	; 0
    3bc0:	80 81       	ld	r24, Z
    3bc2:	88 60       	ori	r24, 0x08	; 8
    3bc4:	8c 93       	st	X, r24
    3bc6:	2a c0       	rjmp	.+84     	; 0x3c1c <TIMER1_init+0x266>
			break;
		case PWM_MODE:				/*FPWM=F_CPU/N*256*/
			SET_BIT(DDRD,PD5); 		/*Make OC1A as output pin*/
    3bc8:	a1 e3       	ldi	r26, 0x31	; 49
    3bca:	b0 e0       	ldi	r27, 0x00	; 0
    3bcc:	e1 e3       	ldi	r30, 0x31	; 49
    3bce:	f0 e0       	ldi	r31, 0x00	; 0
    3bd0:	80 81       	ld	r24, Z
    3bd2:	80 62       	ori	r24, 0x20	; 32
    3bd4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);	/*Non-Inverting Mode*/
    3bd6:	af e4       	ldi	r26, 0x4F	; 79
    3bd8:	b0 e0       	ldi	r27, 0x00	; 0
    3bda:	ef e4       	ldi	r30, 0x4F	; 79
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	80 81       	ld	r24, Z
    3be0:	80 68       	ori	r24, 0x80	; 128
    3be2:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B1);
    3be4:	af e4       	ldi	r26, 0x4F	; 79
    3be6:	b0 e0       	ldi	r27, 0x00	; 0
    3be8:	ef e4       	ldi	r30, 0x4F	; 79
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	80 81       	ld	r24, Z
    3bee:	80 62       	ori	r24, 0x20	; 32
    3bf0:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,WGM11);
    3bf2:	af e4       	ldi	r26, 0x4F	; 79
    3bf4:	b0 e0       	ldi	r27, 0x00	; 0
    3bf6:	ef e4       	ldi	r30, 0x4F	; 79
    3bf8:	f0 e0       	ldi	r31, 0x00	; 0
    3bfa:	80 81       	ld	r24, Z
    3bfc:	82 60       	ori	r24, 0x02	; 2
    3bfe:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    3c00:	ae e4       	ldi	r26, 0x4E	; 78
    3c02:	b0 e0       	ldi	r27, 0x00	; 0
    3c04:	ee e4       	ldi	r30, 0x4E	; 78
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	80 81       	ld	r24, Z
    3c0a:	88 60       	ori	r24, 0x08	; 8
    3c0c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM13);
    3c0e:	ae e4       	ldi	r26, 0x4E	; 78
    3c10:	b0 e0       	ldi	r27, 0x00	; 0
    3c12:	ee e4       	ldi	r30, 0x4E	; 78
    3c14:	f0 e0       	ldi	r31, 0x00	; 0
    3c16:	80 81       	ld	r24, Z
    3c18:	80 61       	ori	r24, 0x10	; 16
    3c1a:	8c 93       	st	X, r24
			break;
	}
}
    3c1c:	26 96       	adiw	r28, 0x06	; 6
    3c1e:	0f b6       	in	r0, 0x3f	; 63
    3c20:	f8 94       	cli
    3c22:	de bf       	out	0x3e, r29	; 62
    3c24:	0f be       	out	0x3f, r0	; 63
    3c26:	cd bf       	out	0x3d, r28	; 61
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	08 95       	ret

00003c2e <TIMER1_setCallBackFunctionsOVF>:
 * [Inputs]:		Pointers to functions that will be called from Timer1 ISR
 *
 * [No Returns]:
 */
void TIMER1_setCallBackFunctionsOVF(void(*a_FunctionPtr_OVF)(void))
{
    3c2e:	df 93       	push	r29
    3c30:	cf 93       	push	r28
    3c32:	00 d0       	rcall	.+0      	; 0x3c34 <TIMER1_setCallBackFunctionsOVF+0x6>
    3c34:	cd b7       	in	r28, 0x3d	; 61
    3c36:	de b7       	in	r29, 0x3e	; 62
    3c38:	9a 83       	std	Y+2, r25	; 0x02
    3c3a:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_Ovf_g_callBackFunction_Ptr = a_FunctionPtr_OVF;
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c40:	90 93 ac 01 	sts	0x01AC, r25
    3c44:	80 93 ab 01 	sts	0x01AB, r24
}
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	cf 91       	pop	r28
    3c4e:	df 91       	pop	r29
    3c50:	08 95       	ret

00003c52 <TIMER1_setCallBackFunctionCOMP>:
void TIMER1_setCallBackFunctionCOMP(void(*a_FunctionPtr_COMP)(void))
{
    3c52:	df 93       	push	r29
    3c54:	cf 93       	push	r28
    3c56:	00 d0       	rcall	.+0      	; 0x3c58 <TIMER1_setCallBackFunctionCOMP+0x6>
    3c58:	cd b7       	in	r28, 0x3d	; 61
    3c5a:	de b7       	in	r29, 0x3e	; 62
    3c5c:	9a 83       	std	Y+2, r25	; 0x02
    3c5e:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_Comp_g_callBackFunction_Ptr = a_FunctionPtr_COMP;
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	9a 81       	ldd	r25, Y+2	; 0x02
    3c64:	90 93 aa 01 	sts	0x01AA, r25
    3c68:	80 93 a9 01 	sts	0x01A9, r24
}
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	cf 91       	pop	r28
    3c72:	df 91       	pop	r29
    3c74:	08 95       	ret

00003c76 <TIMER1_Deinit>:
 * 					Function to turn off Timer1
 * [No Inputs]:
 * [No Returns]:
 */
void TIMER1_Deinit(void)
{
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,PB1);		/*Detach T1*/
    3c7e:	a7 e3       	ldi	r26, 0x37	; 55
    3c80:	b0 e0       	ldi	r27, 0x00	; 0
    3c82:	e7 e3       	ldi	r30, 0x37	; 55
    3c84:	f0 e0       	ldi	r31, 0x00	; 0
    3c86:	80 81       	ld	r24, Z
    3c88:	82 60       	ori	r24, 0x02	; 2
    3c8a:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD,PD5);	/*Detach OC1A*/
    3c8c:	a1 e3       	ldi	r26, 0x31	; 49
    3c8e:	b0 e0       	ldi	r27, 0x00	; 0
    3c90:	e1 e3       	ldi	r30, 0x31	; 49
    3c92:	f0 e0       	ldi	r31, 0x00	; 0
    3c94:	80 81       	ld	r24, Z
    3c96:	8f 7d       	andi	r24, 0xDF	; 223
    3c98:	8c 93       	st	X, r24
	TCCR1A = 0;				/*Clear Timer1 Control Register A*/
    3c9a:	ef e4       	ldi	r30, 0x4F	; 79
    3c9c:	f0 e0       	ldi	r31, 0x00	; 0
    3c9e:	10 82       	st	Z, r1
	TCCR1B = 0;				/*Clear Timer1 Control Register B*/
    3ca0:	ee e4       	ldi	r30, 0x4E	; 78
    3ca2:	f0 e0       	ldi	r31, 0x00	; 0
    3ca4:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE1);	/*Disable Overflow Interrupt Module*/
    3ca6:	a9 e5       	ldi	r26, 0x59	; 89
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	e9 e5       	ldi	r30, 0x59	; 89
    3cac:	f0 e0       	ldi	r31, 0x00	; 0
    3cae:	80 81       	ld	r24, Z
    3cb0:	8b 7f       	andi	r24, 0xFB	; 251
    3cb2:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1A);/*Disable CompareA Interrupt Module*/
    3cb4:	a9 e5       	ldi	r26, 0x59	; 89
    3cb6:	b0 e0       	ldi	r27, 0x00	; 0
    3cb8:	e9 e5       	ldi	r30, 0x59	; 89
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	80 81       	ld	r24, Z
    3cbe:	8f 7e       	andi	r24, 0xEF	; 239
    3cc0:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV0);	/*Clear Overflow Interrupt Flag*/
    3cc2:	a8 e5       	ldi	r26, 0x58	; 88
    3cc4:	b0 e0       	ldi	r27, 0x00	; 0
    3cc6:	e8 e5       	ldi	r30, 0x58	; 88
    3cc8:	f0 e0       	ldi	r31, 0x00	; 0
    3cca:	80 81       	ld	r24, Z
    3ccc:	8e 7f       	andi	r24, 0xFE	; 254
    3cce:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF1A);	/*Clear CompareA Interrupt Flag*/
    3cd0:	a8 e5       	ldi	r26, 0x58	; 88
    3cd2:	b0 e0       	ldi	r27, 0x00	; 0
    3cd4:	e8 e5       	ldi	r30, 0x58	; 88
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	80 81       	ld	r24, Z
    3cda:	8f 7e       	andi	r24, 0xEF	; 239
    3cdc:	8c 93       	st	X, r24
	ICR1 = 0;				/*Clear Input Capture Register */
    3cde:	e6 e4       	ldi	r30, 0x46	; 70
    3ce0:	f0 e0       	ldi	r31, 0x00	; 0
    3ce2:	11 82       	std	Z+1, r1	; 0x01
    3ce4:	10 82       	st	Z, r1
	OCR1A = 0;				/*Clear Compare Register 1A*/
    3ce6:	ea e4       	ldi	r30, 0x4A	; 74
    3ce8:	f0 e0       	ldi	r31, 0x00	; 0
    3cea:	11 82       	std	Z+1, r1	; 0x01
    3cec:	10 82       	st	Z, r1
	TCNT1 = 0;				/*Clear Timer1 COunter*/
    3cee:	ec e4       	ldi	r30, 0x4C	; 76
    3cf0:	f0 e0       	ldi	r31, 0x00	; 0
    3cf2:	11 82       	std	Z+1, r1	; 0x01
    3cf4:	10 82       	st	Z, r1
}
    3cf6:	cf 91       	pop	r28
    3cf8:	df 91       	pop	r29
    3cfa:	08 95       	ret

00003cfc <TIMER2_init>:
 * [Inputs]:		TIMER2 Configuration structure by address
 *
 * [No Returns]:
 */
void TIMER2_init(TIMER_CONFIG_STRUCT *TIMER2_Config_Type)
{
    3cfc:	df 93       	push	r29
    3cfe:	cf 93       	push	r28
    3d00:	00 d0       	rcall	.+0      	; 0x3d02 <TIMER2_init+0x6>
    3d02:	00 d0       	rcall	.+0      	; 0x3d04 <TIMER2_init+0x8>
    3d04:	00 d0       	rcall	.+0      	; 0x3d06 <TIMER2_init+0xa>
    3d06:	cd b7       	in	r28, 0x3d	; 61
    3d08:	de b7       	in	r29, 0x3e	; 62
    3d0a:	9a 83       	std	Y+2, r25	; 0x02
    3d0c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = TIMER2_Config_Type->Initial_value8;	/*Initial Value*/
    3d0e:	a4 e4       	ldi	r26, 0x44	; 68
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	e9 81       	ldd	r30, Y+1	; 0x01
    3d14:	fa 81       	ldd	r31, Y+2	; 0x02
    3d16:	80 81       	ld	r24, Z
    3d18:	8c 93       	st	X, r24
	OCR2  = TIMER2_Config_Type->Compare_Value8;	/*Compare Value*/
    3d1a:	a3 e4       	ldi	r26, 0x43	; 67
    3d1c:	b0 e0       	ldi	r27, 0x00	; 0
    3d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3d20:	fa 81       	ldd	r31, Y+2	; 0x02
    3d22:	81 81       	ldd	r24, Z+1	; 0x01
    3d24:	8c 93       	st	X, r24
	/*switch to choose clock pre-scaler*/
	switch(TIMER2_Config_Type->TIMER_Prescaler)
    3d26:	e9 81       	ldd	r30, Y+1	; 0x01
    3d28:	fa 81       	ldd	r31, Y+2	; 0x02
    3d2a:	86 81       	ldd	r24, Z+6	; 0x06
    3d2c:	28 2f       	mov	r18, r24
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	3e 83       	std	Y+6, r19	; 0x06
    3d32:	2d 83       	std	Y+5, r18	; 0x05
    3d34:	8d 81       	ldd	r24, Y+5	; 0x05
    3d36:	9e 81       	ldd	r25, Y+6	; 0x06
    3d38:	84 30       	cpi	r24, 0x04	; 4
    3d3a:	91 05       	cpc	r25, r1
    3d3c:	09 f4       	brne	.+2      	; 0x3d40 <TIMER2_init+0x44>
    3d3e:	46 c0       	rjmp	.+140    	; 0x3dcc <TIMER2_init+0xd0>
    3d40:	2d 81       	ldd	r18, Y+5	; 0x05
    3d42:	3e 81       	ldd	r19, Y+6	; 0x06
    3d44:	25 30       	cpi	r18, 0x05	; 5
    3d46:	31 05       	cpc	r19, r1
    3d48:	84 f4       	brge	.+32     	; 0x3d6a <TIMER2_init+0x6e>
    3d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d4e:	82 30       	cpi	r24, 0x02	; 2
    3d50:	91 05       	cpc	r25, r1
    3d52:	29 f1       	breq	.+74     	; 0x3d9e <TIMER2_init+0xa2>
    3d54:	2d 81       	ldd	r18, Y+5	; 0x05
    3d56:	3e 81       	ldd	r19, Y+6	; 0x06
    3d58:	23 30       	cpi	r18, 0x03	; 3
    3d5a:	31 05       	cpc	r19, r1
    3d5c:	44 f5       	brge	.+80     	; 0x3dae <TIMER2_init+0xb2>
    3d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d60:	9e 81       	ldd	r25, Y+6	; 0x06
    3d62:	81 30       	cpi	r24, 0x01	; 1
    3d64:	91 05       	cpc	r25, r1
    3d66:	99 f0       	breq	.+38     	; 0x3d8e <TIMER2_init+0x92>
    3d68:	6c c0       	rjmp	.+216    	; 0x3e42 <TIMER2_init+0x146>
    3d6a:	2d 81       	ldd	r18, Y+5	; 0x05
    3d6c:	3e 81       	ldd	r19, Y+6	; 0x06
    3d6e:	26 30       	cpi	r18, 0x06	; 6
    3d70:	31 05       	cpc	r19, r1
    3d72:	09 f4       	brne	.+2      	; 0x3d76 <TIMER2_init+0x7a>
    3d74:	42 c0       	rjmp	.+132    	; 0x3dfa <TIMER2_init+0xfe>
    3d76:	8d 81       	ldd	r24, Y+5	; 0x05
    3d78:	9e 81       	ldd	r25, Y+6	; 0x06
    3d7a:	86 30       	cpi	r24, 0x06	; 6
    3d7c:	91 05       	cpc	r25, r1
    3d7e:	74 f1       	brlt	.+92     	; 0x3ddc <TIMER2_init+0xe0>
    3d80:	2d 81       	ldd	r18, Y+5	; 0x05
    3d82:	3e 81       	ldd	r19, Y+6	; 0x06
    3d84:	27 30       	cpi	r18, 0x07	; 7
    3d86:	31 05       	cpc	r19, r1
    3d88:	09 f4       	brne	.+2      	; 0x3d8c <TIMER2_init+0x90>
    3d8a:	46 c0       	rjmp	.+140    	; 0x3e18 <TIMER2_init+0x11c>
    3d8c:	5a c0       	rjmp	.+180    	; 0x3e42 <TIMER2_init+0x146>
	{
		case F_CPU_CLOCK:
			SET_BIT(TCCR2,CS20);
    3d8e:	a5 e4       	ldi	r26, 0x45	; 69
    3d90:	b0 e0       	ldi	r27, 0x00	; 0
    3d92:	e5 e4       	ldi	r30, 0x45	; 69
    3d94:	f0 e0       	ldi	r31, 0x00	; 0
    3d96:	80 81       	ld	r24, Z
    3d98:	81 60       	ori	r24, 0x01	; 1
    3d9a:	8c 93       	st	X, r24
    3d9c:	52 c0       	rjmp	.+164    	; 0x3e42 <TIMER2_init+0x146>
			break;
		case F_CPU_N8:
			SET_BIT(TCCR2,CS21);
    3d9e:	a5 e4       	ldi	r26, 0x45	; 69
    3da0:	b0 e0       	ldi	r27, 0x00	; 0
    3da2:	e5 e4       	ldi	r30, 0x45	; 69
    3da4:	f0 e0       	ldi	r31, 0x00	; 0
    3da6:	80 81       	ld	r24, Z
    3da8:	82 60       	ori	r24, 0x02	; 2
    3daa:	8c 93       	st	X, r24
    3dac:	4a c0       	rjmp	.+148    	; 0x3e42 <TIMER2_init+0x146>
			break;
		case F_CPU_N32:
			SET_BIT(TCCR2,CS20);
    3dae:	a5 e4       	ldi	r26, 0x45	; 69
    3db0:	b0 e0       	ldi	r27, 0x00	; 0
    3db2:	e5 e4       	ldi	r30, 0x45	; 69
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	80 81       	ld	r24, Z
    3db8:	81 60       	ori	r24, 0x01	; 1
    3dba:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    3dbc:	a5 e4       	ldi	r26, 0x45	; 69
    3dbe:	b0 e0       	ldi	r27, 0x00	; 0
    3dc0:	e5 e4       	ldi	r30, 0x45	; 69
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	80 81       	ld	r24, Z
    3dc6:	82 60       	ori	r24, 0x02	; 2
    3dc8:	8c 93       	st	X, r24
    3dca:	3b c0       	rjmp	.+118    	; 0x3e42 <TIMER2_init+0x146>
			break;
		case F_CPU_N64:
			SET_BIT(TCCR2,CS22);
    3dcc:	a5 e4       	ldi	r26, 0x45	; 69
    3dce:	b0 e0       	ldi	r27, 0x00	; 0
    3dd0:	e5 e4       	ldi	r30, 0x45	; 69
    3dd2:	f0 e0       	ldi	r31, 0x00	; 0
    3dd4:	80 81       	ld	r24, Z
    3dd6:	84 60       	ori	r24, 0x04	; 4
    3dd8:	8c 93       	st	X, r24
    3dda:	33 c0       	rjmp	.+102    	; 0x3e42 <TIMER2_init+0x146>
			break;
		case F_CPU_N128:
			SET_BIT(TCCR2,CS20);
    3ddc:	a5 e4       	ldi	r26, 0x45	; 69
    3dde:	b0 e0       	ldi	r27, 0x00	; 0
    3de0:	e5 e4       	ldi	r30, 0x45	; 69
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	80 81       	ld	r24, Z
    3de6:	81 60       	ori	r24, 0x01	; 1
    3de8:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS22);
    3dea:	a5 e4       	ldi	r26, 0x45	; 69
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	e5 e4       	ldi	r30, 0x45	; 69
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	80 81       	ld	r24, Z
    3df4:	84 60       	ori	r24, 0x04	; 4
    3df6:	8c 93       	st	X, r24
    3df8:	24 c0       	rjmp	.+72     	; 0x3e42 <TIMER2_init+0x146>
			break;
		case F_CPU_N256:
			SET_BIT(TCCR2,CS21);
    3dfa:	a5 e4       	ldi	r26, 0x45	; 69
    3dfc:	b0 e0       	ldi	r27, 0x00	; 0
    3dfe:	e5 e4       	ldi	r30, 0x45	; 69
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	80 81       	ld	r24, Z
    3e04:	82 60       	ori	r24, 0x02	; 2
    3e06:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS22);
    3e08:	a5 e4       	ldi	r26, 0x45	; 69
    3e0a:	b0 e0       	ldi	r27, 0x00	; 0
    3e0c:	e5 e4       	ldi	r30, 0x45	; 69
    3e0e:	f0 e0       	ldi	r31, 0x00	; 0
    3e10:	80 81       	ld	r24, Z
    3e12:	84 60       	ori	r24, 0x04	; 4
    3e14:	8c 93       	st	X, r24
    3e16:	15 c0       	rjmp	.+42     	; 0x3e42 <TIMER2_init+0x146>
			break;
		case F_CPU_N1024:
			SET_BIT(TCCR2,CS20);
    3e18:	a5 e4       	ldi	r26, 0x45	; 69
    3e1a:	b0 e0       	ldi	r27, 0x00	; 0
    3e1c:	e5 e4       	ldi	r30, 0x45	; 69
    3e1e:	f0 e0       	ldi	r31, 0x00	; 0
    3e20:	80 81       	ld	r24, Z
    3e22:	81 60       	ori	r24, 0x01	; 1
    3e24:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    3e26:	a5 e4       	ldi	r26, 0x45	; 69
    3e28:	b0 e0       	ldi	r27, 0x00	; 0
    3e2a:	e5 e4       	ldi	r30, 0x45	; 69
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	80 81       	ld	r24, Z
    3e30:	82 60       	ori	r24, 0x02	; 2
    3e32:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS22);
    3e34:	a5 e4       	ldi	r26, 0x45	; 69
    3e36:	b0 e0       	ldi	r27, 0x00	; 0
    3e38:	e5 e4       	ldi	r30, 0x45	; 69
    3e3a:	f0 e0       	ldi	r31, 0x00	; 0
    3e3c:	80 81       	ld	r24, Z
    3e3e:	84 60       	ori	r24, 0x04	; 4
    3e40:	8c 93       	st	X, r24
			break;
	}
	/*switch to choose mode*/
	switch(TIMER2_Config_Type->TIMER_Mode)
    3e42:	e9 81       	ldd	r30, Y+1	; 0x01
    3e44:	fa 81       	ldd	r31, Y+2	; 0x02
    3e46:	87 81       	ldd	r24, Z+7	; 0x07
    3e48:	28 2f       	mov	r18, r24
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	3c 83       	std	Y+4, r19	; 0x04
    3e4e:	2b 83       	std	Y+3, r18	; 0x03
    3e50:	8b 81       	ldd	r24, Y+3	; 0x03
    3e52:	9c 81       	ldd	r25, Y+4	; 0x04
    3e54:	81 30       	cpi	r24, 0x01	; 1
    3e56:	91 05       	cpc	r25, r1
    3e58:	c9 f0       	breq	.+50     	; 0x3e8c <TIMER2_init+0x190>
    3e5a:	2b 81       	ldd	r18, Y+3	; 0x03
    3e5c:	3c 81       	ldd	r19, Y+4	; 0x04
    3e5e:	22 30       	cpi	r18, 0x02	; 2
    3e60:	31 05       	cpc	r19, r1
    3e62:	51 f1       	breq	.+84     	; 0x3eb8 <TIMER2_init+0x1bc>
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	9c 81       	ldd	r25, Y+4	; 0x04
    3e68:	00 97       	sbiw	r24, 0x00	; 0
    3e6a:	09 f0       	breq	.+2      	; 0x3e6e <TIMER2_init+0x172>
    3e6c:	41 c0       	rjmp	.+130    	; 0x3ef0 <TIMER2_init+0x1f4>
	{
		case OVERFLOW_MODE:
			SET_BIT(TIMSK,TOIE2);	/*Enable Overflow Mode Interrupt Module*/
    3e6e:	a9 e5       	ldi	r26, 0x59	; 89
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	e9 e5       	ldi	r30, 0x59	; 89
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	80 81       	ld	r24, Z
    3e78:	80 64       	ori	r24, 0x40	; 64
    3e7a:	8c 93       	st	X, r24
			SET_BIT(TCCR2,FOC2);
    3e7c:	a5 e4       	ldi	r26, 0x45	; 69
    3e7e:	b0 e0       	ldi	r27, 0x00	; 0
    3e80:	e5 e4       	ldi	r30, 0x45	; 69
    3e82:	f0 e0       	ldi	r31, 0x00	; 0
    3e84:	80 81       	ld	r24, Z
    3e86:	80 68       	ori	r24, 0x80	; 128
    3e88:	8c 93       	st	X, r24
    3e8a:	32 c0       	rjmp	.+100    	; 0x3ef0 <TIMER2_init+0x1f4>
			break;
		case COMPARE_MODE:
			SET_BIT(TIMSK,OCIE2);	/*Enable Compare Mode Interrupt Module*/
    3e8c:	a9 e5       	ldi	r26, 0x59	; 89
    3e8e:	b0 e0       	ldi	r27, 0x00	; 0
    3e90:	e9 e5       	ldi	r30, 0x59	; 89
    3e92:	f0 e0       	ldi	r31, 0x00	; 0
    3e94:	80 81       	ld	r24, Z
    3e96:	80 68       	ori	r24, 0x80	; 128
    3e98:	8c 93       	st	X, r24
			SET_BIT(TCCR2,FOC2);
    3e9a:	a5 e4       	ldi	r26, 0x45	; 69
    3e9c:	b0 e0       	ldi	r27, 0x00	; 0
    3e9e:	e5 e4       	ldi	r30, 0x45	; 69
    3ea0:	f0 e0       	ldi	r31, 0x00	; 0
    3ea2:	80 81       	ld	r24, Z
    3ea4:	80 68       	ori	r24, 0x80	; 128
    3ea6:	8c 93       	st	X, r24
			SET_BIT(TCCR2,WGM21);
    3ea8:	a5 e4       	ldi	r26, 0x45	; 69
    3eaa:	b0 e0       	ldi	r27, 0x00	; 0
    3eac:	e5 e4       	ldi	r30, 0x45	; 69
    3eae:	f0 e0       	ldi	r31, 0x00	; 0
    3eb0:	80 81       	ld	r24, Z
    3eb2:	88 60       	ori	r24, 0x08	; 8
    3eb4:	8c 93       	st	X, r24
    3eb6:	1c c0       	rjmp	.+56     	; 0x3ef0 <TIMER2_init+0x1f4>
			break;
		case PWM_MODE:				/*FPWM=F_CPU/N*256*/
			SET_BIT(DDRD,PD7); 		/*Make OC2 as output pin*/
    3eb8:	a1 e3       	ldi	r26, 0x31	; 49
    3eba:	b0 e0       	ldi	r27, 0x00	; 0
    3ebc:	e1 e3       	ldi	r30, 0x31	; 49
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	80 81       	ld	r24, Z
    3ec2:	80 68       	ori	r24, 0x80	; 128
    3ec4:	8c 93       	st	X, r24
			SET_BIT(TCCR2,WGM20);
    3ec6:	a5 e4       	ldi	r26, 0x45	; 69
    3ec8:	b0 e0       	ldi	r27, 0x00	; 0
    3eca:	e5 e4       	ldi	r30, 0x45	; 69
    3ecc:	f0 e0       	ldi	r31, 0x00	; 0
    3ece:	80 81       	ld	r24, Z
    3ed0:	80 64       	ori	r24, 0x40	; 64
    3ed2:	8c 93       	st	X, r24
			SET_BIT(TCCR2,WGM21);
    3ed4:	a5 e4       	ldi	r26, 0x45	; 69
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	e5 e4       	ldi	r30, 0x45	; 69
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	80 81       	ld	r24, Z
    3ede:	88 60       	ori	r24, 0x08	; 8
    3ee0:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);	/*Non-Inverting Mode*/
    3ee2:	a5 e4       	ldi	r26, 0x45	; 69
    3ee4:	b0 e0       	ldi	r27, 0x00	; 0
    3ee6:	e5 e4       	ldi	r30, 0x45	; 69
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	80 81       	ld	r24, Z
    3eec:	80 62       	ori	r24, 0x20	; 32
    3eee:	8c 93       	st	X, r24
			break;
	}
}
    3ef0:	26 96       	adiw	r28, 0x06	; 6
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	f8 94       	cli
    3ef6:	de bf       	out	0x3e, r29	; 62
    3ef8:	0f be       	out	0x3f, r0	; 63
    3efa:	cd bf       	out	0x3d, r28	; 61
    3efc:	cf 91       	pop	r28
    3efe:	df 91       	pop	r29
    3f00:	08 95       	ret

00003f02 <TIMER2_setCallBackFunctionsOVF>:
 * [Inputs]:		Pointers to functions that will be called from Timer2 ISR
 *
 * [No Returns]:
 */
void TIMER2_setCallBackFunctionsOVF(void(*a_FunctionPtr_OVF)(void))
{
    3f02:	df 93       	push	r29
    3f04:	cf 93       	push	r28
    3f06:	00 d0       	rcall	.+0      	; 0x3f08 <TIMER2_setCallBackFunctionsOVF+0x6>
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	9a 83       	std	Y+2, r25	; 0x02
    3f0e:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_Ovf_g_callBackFunction_Ptr = a_FunctionPtr_OVF;
    3f10:	89 81       	ldd	r24, Y+1	; 0x01
    3f12:	9a 81       	ldd	r25, Y+2	; 0x02
    3f14:	90 93 b0 01 	sts	0x01B0, r25
    3f18:	80 93 af 01 	sts	0x01AF, r24
}
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	cf 91       	pop	r28
    3f22:	df 91       	pop	r29
    3f24:	08 95       	ret

00003f26 <TIMER2_setCallBackFunctionCOMP>:
void TIMER2_setCallBackFunctionCOMP(void(*a_FunctionPtr_COMP)(void))
{
    3f26:	df 93       	push	r29
    3f28:	cf 93       	push	r28
    3f2a:	00 d0       	rcall	.+0      	; 0x3f2c <TIMER2_setCallBackFunctionCOMP+0x6>
    3f2c:	cd b7       	in	r28, 0x3d	; 61
    3f2e:	de b7       	in	r29, 0x3e	; 62
    3f30:	9a 83       	std	Y+2, r25	; 0x02
    3f32:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_Comp_g_callBackFunction_Ptr = a_FunctionPtr_COMP;
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	9a 81       	ldd	r25, Y+2	; 0x02
    3f38:	90 93 ae 01 	sts	0x01AE, r25
    3f3c:	80 93 ad 01 	sts	0x01AD, r24
}
    3f40:	0f 90       	pop	r0
    3f42:	0f 90       	pop	r0
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	08 95       	ret

00003f4a <TIMER2_Deinit>:
 * 					Function to turn off Timer2
 * [No Inputs]:
 * [No Returns]:
 */
void TIMER2_Deinit(void)
{
    3f4a:	df 93       	push	r29
    3f4c:	cf 93       	push	r28
    3f4e:	cd b7       	in	r28, 0x3d	; 61
    3f50:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DDRD,PD7);	/*Detach OC2*/
    3f52:	a1 e3       	ldi	r26, 0x31	; 49
    3f54:	b0 e0       	ldi	r27, 0x00	; 0
    3f56:	e1 e3       	ldi	r30, 0x31	; 49
    3f58:	f0 e0       	ldi	r31, 0x00	; 0
    3f5a:	80 81       	ld	r24, Z
    3f5c:	8f 77       	andi	r24, 0x7F	; 127
    3f5e:	8c 93       	st	X, r24
	TCCR2 = 0;				/*Clear Timer2 Control Register*/
    3f60:	e5 e4       	ldi	r30, 0x45	; 69
    3f62:	f0 e0       	ldi	r31, 0x00	; 0
    3f64:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE2); /*Disable Overflow Mode Interrupt Module*/
    3f66:	a9 e5       	ldi	r26, 0x59	; 89
    3f68:	b0 e0       	ldi	r27, 0x00	; 0
    3f6a:	e9 e5       	ldi	r30, 0x59	; 89
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	80 81       	ld	r24, Z
    3f70:	8f 77       	andi	r24, 0x7F	; 127
    3f72:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE2); /*Disable Compare Mode Interrupt Module*/
    3f74:	a9 e5       	ldi	r26, 0x59	; 89
    3f76:	b0 e0       	ldi	r27, 0x00	; 0
    3f78:	e9 e5       	ldi	r30, 0x59	; 89
    3f7a:	f0 e0       	ldi	r31, 0x00	; 0
    3f7c:	80 81       	ld	r24, Z
    3f7e:	8f 7b       	andi	r24, 0xBF	; 191
    3f80:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF2);	/*Clear Compare Mode Flag*/
    3f82:	a8 e5       	ldi	r26, 0x58	; 88
    3f84:	b0 e0       	ldi	r27, 0x00	; 0
    3f86:	e8 e5       	ldi	r30, 0x58	; 88
    3f88:	f0 e0       	ldi	r31, 0x00	; 0
    3f8a:	80 81       	ld	r24, Z
    3f8c:	8f 77       	andi	r24, 0x7F	; 127
    3f8e:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV2);	/*Clear Overflow Mode Flag*/
    3f90:	a8 e5       	ldi	r26, 0x58	; 88
    3f92:	b0 e0       	ldi	r27, 0x00	; 0
    3f94:	e8 e5       	ldi	r30, 0x58	; 88
    3f96:	f0 e0       	ldi	r31, 0x00	; 0
    3f98:	80 81       	ld	r24, Z
    3f9a:	8f 7b       	andi	r24, 0xBF	; 191
    3f9c:	8c 93       	st	X, r24
	OCR2  = 0;				/*Clear Compare Register*/
    3f9e:	e3 e4       	ldi	r30, 0x43	; 67
    3fa0:	f0 e0       	ldi	r31, 0x00	; 0
    3fa2:	10 82       	st	Z, r1
	TCNT2 = 0;				/*Clear Counter Register*/
    3fa4:	e4 e4       	ldi	r30, 0x44	; 68
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	10 82       	st	Z, r1
}
    3faa:	cf 91       	pop	r28
    3fac:	df 91       	pop	r29
    3fae:	08 95       	ret

00003fb0 <UART_init>:
 * [Inputs]:		UART Configuration structure by address
 *
 * [No Returns]:
 */
void UART_init(UART_USART_Configuration_Struct *UART_USART_Configuration_Ptr)
{
    3fb0:	df 93       	push	r29
    3fb2:	cf 93       	push	r28
    3fb4:	cd b7       	in	r28, 0x3d	; 61
    3fb6:	de b7       	in	r29, 0x3e	; 62
    3fb8:	2c 97       	sbiw	r28, 0x0c	; 12
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	9c 83       	std	Y+4, r25	; 0x04
    3fc6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value = 0; /*Register to set Baudarte value*/
    3fc8:	1a 82       	std	Y+2, r1	; 0x02
    3fca:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRA,U2X); /*Always the USART is in Double Transmission Speed mode*/
    3fcc:	ab e2       	ldi	r26, 0x2B	; 43
    3fce:	b0 e0       	ldi	r27, 0x00	; 0
    3fd0:	eb e2       	ldi	r30, 0x2B	; 43
    3fd2:	f0 e0       	ldi	r31, 0x00	; 0
    3fd4:	80 81       	ld	r24, Z
    3fd6:	82 60       	ori	r24, 0x02	; 2
    3fd8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN); /*Enable Receiving*/
    3fda:	aa e2       	ldi	r26, 0x2A	; 42
    3fdc:	b0 e0       	ldi	r27, 0x00	; 0
    3fde:	ea e2       	ldi	r30, 0x2A	; 42
    3fe0:	f0 e0       	ldi	r31, 0x00	; 0
    3fe2:	80 81       	ld	r24, Z
    3fe4:	80 61       	ori	r24, 0x10	; 16
    3fe6:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN); /*Enable Transmitting*/
    3fe8:	aa e2       	ldi	r26, 0x2A	; 42
    3fea:	b0 e0       	ldi	r27, 0x00	; 0
    3fec:	ea e2       	ldi	r30, 0x2A	; 42
    3fee:	f0 e0       	ldi	r31, 0x00	; 0
    3ff0:	80 81       	ld	r24, Z
    3ff2:	88 60       	ori	r24, 0x08	; 8
    3ff4:	8c 93       	st	X, r24
	SET_BIT(UCSRC,URSEL); /*This must be set to 1 when writing to UCSRC*/
    3ff6:	a0 e4       	ldi	r26, 0x40	; 64
    3ff8:	b0 e0       	ldi	r27, 0x00	; 0
    3ffa:	e0 e4       	ldi	r30, 0x40	; 64
    3ffc:	f0 e0       	ldi	r31, 0x00	; 0
    3ffe:	80 81       	ld	r24, Z
    4000:	80 68       	ori	r24, 0x80	; 128
    4002:	8c 93       	st	X, r24
	/*Clear Character size selection bits initially*/
	CLEAR_BIT(UCSRB,UCSZ2);
    4004:	aa e2       	ldi	r26, 0x2A	; 42
    4006:	b0 e0       	ldi	r27, 0x00	; 0
    4008:	ea e2       	ldi	r30, 0x2A	; 42
    400a:	f0 e0       	ldi	r31, 0x00	; 0
    400c:	80 81       	ld	r24, Z
    400e:	8b 7f       	andi	r24, 0xFB	; 251
    4010:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ0);
    4012:	a0 e4       	ldi	r26, 0x40	; 64
    4014:	b0 e0       	ldi	r27, 0x00	; 0
    4016:	e0 e4       	ldi	r30, 0x40	; 64
    4018:	f0 e0       	ldi	r31, 0x00	; 0
    401a:	80 81       	ld	r24, Z
    401c:	8d 7f       	andi	r24, 0xFD	; 253
    401e:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1);
    4020:	a0 e4       	ldi	r26, 0x40	; 64
    4022:	b0 e0       	ldi	r27, 0x00	; 0
    4024:	e0 e4       	ldi	r30, 0x40	; 64
    4026:	f0 e0       	ldi	r31, 0x00	; 0
    4028:	80 81       	ld	r24, Z
    402a:	8b 7f       	andi	r24, 0xFB	; 251
    402c:	8c 93       	st	X, r24
	/*UART Character Size coditions*/
	switch(UART_USART_Configuration_Ptr->UART_CHARACTER_SIZE)
    402e:	eb 81       	ldd	r30, Y+3	; 0x03
    4030:	fc 81       	ldd	r31, Y+4	; 0x04
    4032:	85 81       	ldd	r24, Z+5	; 0x05
    4034:	28 2f       	mov	r18, r24
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	3c 87       	std	Y+12, r19	; 0x0c
    403a:	2b 87       	std	Y+11, r18	; 0x0b
    403c:	8b 85       	ldd	r24, Y+11	; 0x0b
    403e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4040:	82 30       	cpi	r24, 0x02	; 2
    4042:	91 05       	cpc	r25, r1
    4044:	d1 f1       	breq	.+116    	; 0x40ba <UART_init+0x10a>
    4046:	2b 85       	ldd	r18, Y+11	; 0x0b
    4048:	3c 85       	ldd	r19, Y+12	; 0x0c
    404a:	23 30       	cpi	r18, 0x03	; 3
    404c:	31 05       	cpc	r19, r1
    404e:	34 f4       	brge	.+12     	; 0x405c <UART_init+0xac>
    4050:	8b 85       	ldd	r24, Y+11	; 0x0b
    4052:	9c 85       	ldd	r25, Y+12	; 0x0c
    4054:	81 30       	cpi	r24, 0x01	; 1
    4056:	91 05       	cpc	r25, r1
    4058:	c1 f1       	breq	.+112    	; 0x40ca <UART_init+0x11a>
    405a:	3e c0       	rjmp	.+124    	; 0x40d8 <UART_init+0x128>
    405c:	2b 85       	ldd	r18, Y+11	; 0x0b
    405e:	3c 85       	ldd	r19, Y+12	; 0x0c
    4060:	23 30       	cpi	r18, 0x03	; 3
    4062:	31 05       	cpc	r19, r1
    4064:	d9 f0       	breq	.+54     	; 0x409c <UART_init+0xec>
    4066:	8b 85       	ldd	r24, Y+11	; 0x0b
    4068:	9c 85       	ldd	r25, Y+12	; 0x0c
    406a:	87 30       	cpi	r24, 0x07	; 7
    406c:	91 05       	cpc	r25, r1
    406e:	a1 f5       	brne	.+104    	; 0x40d8 <UART_init+0x128>
	{
		case NineBit:
			/*Set character size = 9 bits*/
			SET_BIT(UCSRB,UCSZ2);
    4070:	aa e2       	ldi	r26, 0x2A	; 42
    4072:	b0 e0       	ldi	r27, 0x00	; 0
    4074:	ea e2       	ldi	r30, 0x2A	; 42
    4076:	f0 e0       	ldi	r31, 0x00	; 0
    4078:	80 81       	ld	r24, Z
    407a:	84 60       	ori	r24, 0x04	; 4
    407c:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ0);
    407e:	a0 e4       	ldi	r26, 0x40	; 64
    4080:	b0 e0       	ldi	r27, 0x00	; 0
    4082:	e0 e4       	ldi	r30, 0x40	; 64
    4084:	f0 e0       	ldi	r31, 0x00	; 0
    4086:	80 81       	ld	r24, Z
    4088:	82 60       	ori	r24, 0x02	; 2
    408a:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    408c:	a0 e4       	ldi	r26, 0x40	; 64
    408e:	b0 e0       	ldi	r27, 0x00	; 0
    4090:	e0 e4       	ldi	r30, 0x40	; 64
    4092:	f0 e0       	ldi	r31, 0x00	; 0
    4094:	80 81       	ld	r24, Z
    4096:	84 60       	ori	r24, 0x04	; 4
    4098:	8c 93       	st	X, r24
    409a:	1e c0       	rjmp	.+60     	; 0x40d8 <UART_init+0x128>
			break;
		case EightBit:
			/*Set character size = 8 bits*/
			SET_BIT(UCSRC,UCSZ0);
    409c:	a0 e4       	ldi	r26, 0x40	; 64
    409e:	b0 e0       	ldi	r27, 0x00	; 0
    40a0:	e0 e4       	ldi	r30, 0x40	; 64
    40a2:	f0 e0       	ldi	r31, 0x00	; 0
    40a4:	80 81       	ld	r24, Z
    40a6:	82 60       	ori	r24, 0x02	; 2
    40a8:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    40aa:	a0 e4       	ldi	r26, 0x40	; 64
    40ac:	b0 e0       	ldi	r27, 0x00	; 0
    40ae:	e0 e4       	ldi	r30, 0x40	; 64
    40b0:	f0 e0       	ldi	r31, 0x00	; 0
    40b2:	80 81       	ld	r24, Z
    40b4:	84 60       	ori	r24, 0x04	; 4
    40b6:	8c 93       	st	X, r24
    40b8:	0f c0       	rjmp	.+30     	; 0x40d8 <UART_init+0x128>
			break;
		case SevenBit:
			/*Set character size = 7 bits*/
			SET_BIT(UCSRC,UCSZ1);
    40ba:	a0 e4       	ldi	r26, 0x40	; 64
    40bc:	b0 e0       	ldi	r27, 0x00	; 0
    40be:	e0 e4       	ldi	r30, 0x40	; 64
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	80 81       	ld	r24, Z
    40c4:	84 60       	ori	r24, 0x04	; 4
    40c6:	8c 93       	st	X, r24
    40c8:	07 c0       	rjmp	.+14     	; 0x40d8 <UART_init+0x128>
			break;
		case SixBit:
			/*Set character size = 6 bits*/
			SET_BIT(UCSRC,UCSZ0);
    40ca:	a0 e4       	ldi	r26, 0x40	; 64
    40cc:	b0 e0       	ldi	r27, 0x00	; 0
    40ce:	e0 e4       	ldi	r30, 0x40	; 64
    40d0:	f0 e0       	ldi	r31, 0x00	; 0
    40d2:	80 81       	ld	r24, Z
    40d4:	82 60       	ori	r24, 0x02	; 2
    40d6:	8c 93       	st	X, r24
			/*Set character size = 5 bit*/
			/*keep them set to 0*/
			break;
	}
	/*UART Synchronization coditions*/
	switch(UART_USART_Configuration_Ptr->USART_SYNCHRONIZATION)
    40d8:	eb 81       	ldd	r30, Y+3	; 0x03
    40da:	fc 81       	ldd	r31, Y+4	; 0x04
    40dc:	80 81       	ld	r24, Z
    40de:	28 2f       	mov	r18, r24
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	3a 87       	std	Y+10, r19	; 0x0a
    40e4:	29 87       	std	Y+9, r18	; 0x09
    40e6:	89 85       	ldd	r24, Y+9	; 0x09
    40e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ea:	00 97       	sbiw	r24, 0x00	; 0
    40ec:	31 f0       	breq	.+12     	; 0x40fa <UART_init+0x14a>
    40ee:	29 85       	ldd	r18, Y+9	; 0x09
    40f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    40f2:	21 30       	cpi	r18, 0x01	; 1
    40f4:	31 05       	cpc	r19, r1
    40f6:	49 f0       	breq	.+18     	; 0x410a <UART_init+0x15a>
    40f8:	16 c0       	rjmp	.+44     	; 0x4126 <UART_init+0x176>
	{
		case Asynchronous_Operation:
			CLEAR_BIT(UCSRC,UMSEL); /*Enable Asynchronous Mode*/
    40fa:	a0 e4       	ldi	r26, 0x40	; 64
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	e0 e4       	ldi	r30, 0x40	; 64
    4100:	f0 e0       	ldi	r31, 0x00	; 0
    4102:	80 81       	ld	r24, Z
    4104:	8f 7b       	andi	r24, 0xBF	; 191
    4106:	8c 93       	st	X, r24
    4108:	0e c0       	rjmp	.+28     	; 0x4126 <UART_init+0x176>
			break;
		case Synchronous_Operation:
			SET_BIT(UCSRC,UMSEL); /*Enable Synchronous Mode*/
    410a:	a0 e4       	ldi	r26, 0x40	; 64
    410c:	b0 e0       	ldi	r27, 0x00	; 0
    410e:	e0 e4       	ldi	r30, 0x40	; 64
    4110:	f0 e0       	ldi	r31, 0x00	; 0
    4112:	80 81       	ld	r24, Z
    4114:	80 64       	ori	r24, 0x40	; 64
    4116:	8c 93       	st	X, r24
			/*if in Synchronous Mode always transmit at rising edge and receive at falling edge*/
			CLEAR_BIT(UCSRC,UCPOL);
    4118:	a0 e4       	ldi	r26, 0x40	; 64
    411a:	b0 e0       	ldi	r27, 0x00	; 0
    411c:	e0 e4       	ldi	r30, 0x40	; 64
    411e:	f0 e0       	ldi	r31, 0x00	; 0
    4120:	80 81       	ld	r24, Z
    4122:	8e 7f       	andi	r24, 0xFE	; 254
    4124:	8c 93       	st	X, r24
			break;
	}
	/*UART Polarity Mode coditions*/
	switch(UART_USART_Configuration_Ptr->UART_PARITY_MODE)
    4126:	eb 81       	ldd	r30, Y+3	; 0x03
    4128:	fc 81       	ldd	r31, Y+4	; 0x04
    412a:	87 81       	ldd	r24, Z+7	; 0x07
    412c:	28 2f       	mov	r18, r24
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	38 87       	std	Y+8, r19	; 0x08
    4132:	2f 83       	std	Y+7, r18	; 0x07
    4134:	8f 81       	ldd	r24, Y+7	; 0x07
    4136:	98 85       	ldd	r25, Y+8	; 0x08
    4138:	82 30       	cpi	r24, 0x02	; 2
    413a:	91 05       	cpc	r25, r1
    413c:	c1 f0       	breq	.+48     	; 0x416e <UART_init+0x1be>
    413e:	2f 81       	ldd	r18, Y+7	; 0x07
    4140:	38 85       	ldd	r19, Y+8	; 0x08
    4142:	23 30       	cpi	r18, 0x03	; 3
    4144:	31 05       	cpc	r19, r1
    4146:	11 f1       	breq	.+68     	; 0x418c <UART_init+0x1dc>
    4148:	8f 81       	ldd	r24, Y+7	; 0x07
    414a:	98 85       	ldd	r25, Y+8	; 0x08
    414c:	00 97       	sbiw	r24, 0x00	; 0
    414e:	61 f5       	brne	.+88     	; 0x41a8 <UART_init+0x1f8>
	{
	case Parity_Disabled:
		CLEAR_BIT(UCSRC,UPM0);
    4150:	a0 e4       	ldi	r26, 0x40	; 64
    4152:	b0 e0       	ldi	r27, 0x00	; 0
    4154:	e0 e4       	ldi	r30, 0x40	; 64
    4156:	f0 e0       	ldi	r31, 0x00	; 0
    4158:	80 81       	ld	r24, Z
    415a:	8f 7e       	andi	r24, 0xEF	; 239
    415c:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    415e:	a0 e4       	ldi	r26, 0x40	; 64
    4160:	b0 e0       	ldi	r27, 0x00	; 0
    4162:	e0 e4       	ldi	r30, 0x40	; 64
    4164:	f0 e0       	ldi	r31, 0x00	; 0
    4166:	80 81       	ld	r24, Z
    4168:	8f 7d       	andi	r24, 0xDF	; 223
    416a:	8c 93       	st	X, r24
    416c:	1d c0       	rjmp	.+58     	; 0x41a8 <UART_init+0x1f8>
		break;
	case Even_Parity:
		SET_BIT(UCSRC,UPM0);
    416e:	a0 e4       	ldi	r26, 0x40	; 64
    4170:	b0 e0       	ldi	r27, 0x00	; 0
    4172:	e0 e4       	ldi	r30, 0x40	; 64
    4174:	f0 e0       	ldi	r31, 0x00	; 0
    4176:	80 81       	ld	r24, Z
    4178:	80 61       	ori	r24, 0x10	; 16
    417a:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    417c:	a0 e4       	ldi	r26, 0x40	; 64
    417e:	b0 e0       	ldi	r27, 0x00	; 0
    4180:	e0 e4       	ldi	r30, 0x40	; 64
    4182:	f0 e0       	ldi	r31, 0x00	; 0
    4184:	80 81       	ld	r24, Z
    4186:	8f 7d       	andi	r24, 0xDF	; 223
    4188:	8c 93       	st	X, r24
    418a:	0e c0       	rjmp	.+28     	; 0x41a8 <UART_init+0x1f8>
		break;
	case Odd_Parity:
		SET_BIT(UCSRC,UPM0);
    418c:	a0 e4       	ldi	r26, 0x40	; 64
    418e:	b0 e0       	ldi	r27, 0x00	; 0
    4190:	e0 e4       	ldi	r30, 0x40	; 64
    4192:	f0 e0       	ldi	r31, 0x00	; 0
    4194:	80 81       	ld	r24, Z
    4196:	80 61       	ori	r24, 0x10	; 16
    4198:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    419a:	a0 e4       	ldi	r26, 0x40	; 64
    419c:	b0 e0       	ldi	r27, 0x00	; 0
    419e:	e0 e4       	ldi	r30, 0x40	; 64
    41a0:	f0 e0       	ldi	r31, 0x00	; 0
    41a2:	80 81       	ld	r24, Z
    41a4:	80 62       	ori	r24, 0x20	; 32
    41a6:	8c 93       	st	X, r24
		break;
	}
	/*UART stop bit coditions*/
	switch(UART_USART_Configuration_Ptr->UART_STOP_BIT_NUMBER)
    41a8:	eb 81       	ldd	r30, Y+3	; 0x03
    41aa:	fc 81       	ldd	r31, Y+4	; 0x04
    41ac:	86 81       	ldd	r24, Z+6	; 0x06
    41ae:	28 2f       	mov	r18, r24
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	3e 83       	std	Y+6, r19	; 0x06
    41b4:	2d 83       	std	Y+5, r18	; 0x05
    41b6:	8d 81       	ldd	r24, Y+5	; 0x05
    41b8:	9e 81       	ldd	r25, Y+6	; 0x06
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	31 f0       	breq	.+12     	; 0x41ca <UART_init+0x21a>
    41be:	2d 81       	ldd	r18, Y+5	; 0x05
    41c0:	3e 81       	ldd	r19, Y+6	; 0x06
    41c2:	21 30       	cpi	r18, 0x01	; 1
    41c4:	31 05       	cpc	r19, r1
    41c6:	49 f0       	breq	.+18     	; 0x41da <UART_init+0x22a>
    41c8:	0f c0       	rjmp	.+30     	; 0x41e8 <UART_init+0x238>
	{
		case OneBit:
			CLEAR_BIT(UCSRC,USBS);
    41ca:	a0 e4       	ldi	r26, 0x40	; 64
    41cc:	b0 e0       	ldi	r27, 0x00	; 0
    41ce:	e0 e4       	ldi	r30, 0x40	; 64
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	80 81       	ld	r24, Z
    41d4:	87 7f       	andi	r24, 0xF7	; 247
    41d6:	8c 93       	st	X, r24
    41d8:	07 c0       	rjmp	.+14     	; 0x41e8 <UART_init+0x238>
			break;
		case TwoBit:
			SET_BIT(UCSRC,USBS);
    41da:	a0 e4       	ldi	r26, 0x40	; 64
    41dc:	b0 e0       	ldi	r27, 0x00	; 0
    41de:	e0 e4       	ldi	r30, 0x40	; 64
    41e0:	f0 e0       	ldi	r31, 0x00	; 0
    41e2:	80 81       	ld	r24, Z
    41e4:	88 60       	ori	r24, 0x08	; 8
    41e6:	8c 93       	st	X, r24
			break;
	}
	/*F_CPU is already declared quantity*/
	/*System Frequency must be 8 times greater than Baud rate*/
	UBRR_value = (uint16)(((F_CPU)/(UART_USART_Configuration_Ptr->UART_BAUDRATE * 8UL))-1);
    41e8:	eb 81       	ldd	r30, Y+3	; 0x03
    41ea:	fc 81       	ldd	r31, Y+4	; 0x04
    41ec:	81 81       	ldd	r24, Z+1	; 0x01
    41ee:	92 81       	ldd	r25, Z+2	; 0x02
    41f0:	a3 81       	ldd	r26, Z+3	; 0x03
    41f2:	b4 81       	ldd	r27, Z+4	; 0x04
    41f4:	88 0f       	add	r24, r24
    41f6:	99 1f       	adc	r25, r25
    41f8:	aa 1f       	adc	r26, r26
    41fa:	bb 1f       	adc	r27, r27
    41fc:	88 0f       	add	r24, r24
    41fe:	99 1f       	adc	r25, r25
    4200:	aa 1f       	adc	r26, r26
    4202:	bb 1f       	adc	r27, r27
    4204:	88 0f       	add	r24, r24
    4206:	99 1f       	adc	r25, r25
    4208:	aa 1f       	adc	r26, r26
    420a:	bb 1f       	adc	r27, r27
    420c:	9c 01       	movw	r18, r24
    420e:	ad 01       	movw	r20, r26
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	92 e1       	ldi	r25, 0x12	; 18
    4214:	aa e7       	ldi	r26, 0x7A	; 122
    4216:	b0 e0       	ldi	r27, 0x00	; 0
    4218:	bc 01       	movw	r22, r24
    421a:	cd 01       	movw	r24, r26
    421c:	0e 94 cb 21 	call	0x4396	; 0x4396 <__udivmodsi4>
    4220:	da 01       	movw	r26, r20
    4222:	c9 01       	movw	r24, r18
    4224:	01 97       	sbiw	r24, 0x01	; 1
    4226:	9a 83       	std	Y+2, r25	; 0x02
    4228:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBRR_value>>8;
    422a:	e0 e4       	ldi	r30, 0x40	; 64
    422c:	f0 e0       	ldi	r31, 0x00	; 0
    422e:	89 81       	ldd	r24, Y+1	; 0x01
    4230:	9a 81       	ldd	r25, Y+2	; 0x02
    4232:	89 2f       	mov	r24, r25
    4234:	99 27       	eor	r25, r25
    4236:	80 83       	st	Z, r24
	UBRRL = UBRR_value;
    4238:	e9 e2       	ldi	r30, 0x29	; 41
    423a:	f0 e0       	ldi	r31, 0x00	; 0
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	80 83       	st	Z, r24
}
    4240:	2c 96       	adiw	r28, 0x0c	; 12
    4242:	0f b6       	in	r0, 0x3f	; 63
    4244:	f8 94       	cli
    4246:	de bf       	out	0x3e, r29	; 62
    4248:	0f be       	out	0x3f, r0	; 63
    424a:	cd bf       	out	0x3d, r28	; 61
    424c:	cf 91       	pop	r28
    424e:	df 91       	pop	r29
    4250:	08 95       	ret

00004252 <UART_receiveByte>:
 * [Returns]:
 * 				Received Data
 *
 */
uint8 UART_receiveByte(void)
{
    4252:	df 93       	push	r29
    4254:	cf 93       	push	r28
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /*while receiving isn't complete (flag != 1)*/
    425a:	eb e2       	ldi	r30, 0x2B	; 43
    425c:	f0 e0       	ldi	r31, 0x00	; 0
    425e:	80 81       	ld	r24, Z
    4260:	88 23       	and	r24, r24
    4262:	dc f7       	brge	.-10     	; 0x425a <UART_receiveByte+0x8>
	/*if there is no frame error or parity error*/
	//if(BIT_IS_CLEAR(UCSRA,PE) && BIT_IS_CLEAR(UCSRA,FE))
		return UDR;
    4264:	ec e2       	ldi	r30, 0x2C	; 44
    4266:	f0 e0       	ldi	r31, 0x00	; 0
    4268:	80 81       	ld	r24, Z
}
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	08 95       	ret

00004270 <UART_sendByte>:
 * [Inputs]:		the data needed to be transmitted
 *
 * [No Returns]:
 */
void UART_sendByte(uint8 data)
{
    4270:	df 93       	push	r29
    4272:	cf 93       	push	r28
    4274:	0f 92       	push	r0
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)); /*while UDR register is not empty*/
    427c:	eb e2       	ldi	r30, 0x2B	; 43
    427e:	f0 e0       	ldi	r31, 0x00	; 0
    4280:	80 81       	ld	r24, Z
    4282:	88 2f       	mov	r24, r24
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	80 72       	andi	r24, 0x20	; 32
    4288:	90 70       	andi	r25, 0x00	; 0
    428a:	00 97       	sbiw	r24, 0x00	; 0
    428c:	b9 f3       	breq	.-18     	; 0x427c <UART_sendByte+0xc>
	UDR = data;
    428e:	ec e2       	ldi	r30, 0x2C	; 44
    4290:	f0 e0       	ldi	r31, 0x00	; 0
    4292:	89 81       	ldd	r24, Y+1	; 0x01
    4294:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)); /*while transmission isn't complete (flag != 1)*/
    4296:	eb e2       	ldi	r30, 0x2B	; 43
    4298:	f0 e0       	ldi	r31, 0x00	; 0
    429a:	80 81       	ld	r24, Z
    429c:	88 2f       	mov	r24, r24
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	80 74       	andi	r24, 0x40	; 64
    42a2:	90 70       	andi	r25, 0x00	; 0
    42a4:	00 97       	sbiw	r24, 0x00	; 0
    42a6:	b9 f3       	breq	.-18     	; 0x4296 <UART_sendByte+0x26>
	SET_BIT(UCSRA,TXC);	/*clear complete transmission flag*/
    42a8:	ab e2       	ldi	r26, 0x2B	; 43
    42aa:	b0 e0       	ldi	r27, 0x00	; 0
    42ac:	eb e2       	ldi	r30, 0x2B	; 43
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	80 81       	ld	r24, Z
    42b2:	80 64       	ori	r24, 0x40	; 64
    42b4:	8c 93       	st	X, r24
}
    42b6:	0f 90       	pop	r0
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	08 95       	ret

000042be <UART_sendString>:
 * [Inputs]:		pointer to the string wanted to be transmitted
 *
 * [No Returns]:
 */
void UART_sendString(const char* string)
{
    42be:	df 93       	push	r29
    42c0:	cf 93       	push	r28
    42c2:	00 d0       	rcall	.+0      	; 0x42c4 <UART_sendString+0x6>
    42c4:	0f 92       	push	r0
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	9b 83       	std	Y+3, r25	; 0x03
    42cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    42ce:	19 82       	std	Y+1, r1	; 0x01
    42d0:	0e c0       	rjmp	.+28     	; 0x42ee <UART_sendString+0x30>
	/*transmit the string character by character*/
	while(string[counter] != '\0')
	{
		UART_sendByte(string[counter]);
    42d2:	89 81       	ldd	r24, Y+1	; 0x01
    42d4:	28 2f       	mov	r18, r24
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	8a 81       	ldd	r24, Y+2	; 0x02
    42da:	9b 81       	ldd	r25, Y+3	; 0x03
    42dc:	fc 01       	movw	r30, r24
    42de:	e2 0f       	add	r30, r18
    42e0:	f3 1f       	adc	r31, r19
    42e2:	80 81       	ld	r24, Z
    42e4:	0e 94 38 21 	call	0x4270	; 0x4270 <UART_sendByte>
		counter++;
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	8f 5f       	subi	r24, 0xFF	; 255
    42ec:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const char* string)
{
	uint8 counter=0;
	/*transmit the string character by character*/
	while(string[counter] != '\0')
    42ee:	89 81       	ldd	r24, Y+1	; 0x01
    42f0:	28 2f       	mov	r18, r24
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	8a 81       	ldd	r24, Y+2	; 0x02
    42f6:	9b 81       	ldd	r25, Y+3	; 0x03
    42f8:	fc 01       	movw	r30, r24
    42fa:	e2 0f       	add	r30, r18
    42fc:	f3 1f       	adc	r31, r19
    42fe:	80 81       	ld	r24, Z
    4300:	88 23       	and	r24, r24
    4302:	39 f7       	brne	.-50     	; 0x42d2 <UART_sendString+0x14>
	{
		UART_sendByte(string[counter]);
		counter++;
	}
}
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	0f 90       	pop	r0
    430a:	cf 91       	pop	r28
    430c:	df 91       	pop	r29
    430e:	08 95       	ret

00004310 <UART_receiveString>:
 * [Inputs]:		pointer to the string wanted to be received to store it in the address of the pointer
 *
 * [No Returns]:
 */
void UART_receiveString(char* string)
{
    4310:	0f 93       	push	r16
    4312:	1f 93       	push	r17
    4314:	df 93       	push	r29
    4316:	cf 93       	push	r28
    4318:	00 d0       	rcall	.+0      	; 0x431a <UART_receiveString+0xa>
    431a:	0f 92       	push	r0
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62
    4320:	9b 83       	std	Y+3, r25	; 0x03
    4322:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    4324:	19 82       	std	Y+1, r1	; 0x01
	string[counter] = UART_receiveByte();
    4326:	89 81       	ldd	r24, Y+1	; 0x01
    4328:	28 2f       	mov	r18, r24
    432a:	30 e0       	ldi	r19, 0x00	; 0
    432c:	8a 81       	ldd	r24, Y+2	; 0x02
    432e:	9b 81       	ldd	r25, Y+3	; 0x03
    4330:	8c 01       	movw	r16, r24
    4332:	02 0f       	add	r16, r18
    4334:	13 1f       	adc	r17, r19
    4336:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    433a:	f8 01       	movw	r30, r16
    433c:	80 83       	st	Z, r24
    433e:	0f c0       	rjmp	.+30     	; 0x435e <UART_receiveString+0x4e>
	/*===========================This loop is Re-configurable=============================*/
	/*'#' is pre-agreement character chosen between the transimitter and the receiver*/
	/*to tell the end of the string*/
	while(string[counter] != '#')
	{
		counter++;
    4340:	89 81       	ldd	r24, Y+1	; 0x01
    4342:	8f 5f       	subi	r24, 0xFF	; 255
    4344:	89 83       	std	Y+1, r24	; 0x01
		string[counter] = UART_receiveByte();
    4346:	89 81       	ldd	r24, Y+1	; 0x01
    4348:	28 2f       	mov	r18, r24
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	8a 81       	ldd	r24, Y+2	; 0x02
    434e:	9b 81       	ldd	r25, Y+3	; 0x03
    4350:	8c 01       	movw	r16, r24
    4352:	02 0f       	add	r16, r18
    4354:	13 1f       	adc	r17, r19
    4356:	0e 94 29 21 	call	0x4252	; 0x4252 <UART_receiveByte>
    435a:	f8 01       	movw	r30, r16
    435c:	80 83       	st	Z, r24
	string[counter] = UART_receiveByte();
	/*receive the string character by character*/
	/*===========================This loop is Re-configurable=============================*/
	/*'#' is pre-agreement character chosen between the transimitter and the receiver*/
	/*to tell the end of the string*/
	while(string[counter] != '#')
    435e:	89 81       	ldd	r24, Y+1	; 0x01
    4360:	28 2f       	mov	r18, r24
    4362:	30 e0       	ldi	r19, 0x00	; 0
    4364:	8a 81       	ldd	r24, Y+2	; 0x02
    4366:	9b 81       	ldd	r25, Y+3	; 0x03
    4368:	fc 01       	movw	r30, r24
    436a:	e2 0f       	add	r30, r18
    436c:	f3 1f       	adc	r31, r19
    436e:	80 81       	ld	r24, Z
    4370:	83 32       	cpi	r24, 0x23	; 35
    4372:	31 f7       	brne	.-52     	; 0x4340 <UART_receiveString+0x30>
	{
		counter++;
		string[counter] = UART_receiveByte();
	}
	string[counter]='\0';
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	28 2f       	mov	r18, r24
    4378:	30 e0       	ldi	r19, 0x00	; 0
    437a:	8a 81       	ldd	r24, Y+2	; 0x02
    437c:	9b 81       	ldd	r25, Y+3	; 0x03
    437e:	fc 01       	movw	r30, r24
    4380:	e2 0f       	add	r30, r18
    4382:	f3 1f       	adc	r31, r19
    4384:	10 82       	st	Z, r1
}
    4386:	0f 90       	pop	r0
    4388:	0f 90       	pop	r0
    438a:	0f 90       	pop	r0
    438c:	cf 91       	pop	r28
    438e:	df 91       	pop	r29
    4390:	1f 91       	pop	r17
    4392:	0f 91       	pop	r16
    4394:	08 95       	ret

00004396 <__udivmodsi4>:
    4396:	a1 e2       	ldi	r26, 0x21	; 33
    4398:	1a 2e       	mov	r1, r26
    439a:	aa 1b       	sub	r26, r26
    439c:	bb 1b       	sub	r27, r27
    439e:	fd 01       	movw	r30, r26
    43a0:	0d c0       	rjmp	.+26     	; 0x43bc <__udivmodsi4_ep>

000043a2 <__udivmodsi4_loop>:
    43a2:	aa 1f       	adc	r26, r26
    43a4:	bb 1f       	adc	r27, r27
    43a6:	ee 1f       	adc	r30, r30
    43a8:	ff 1f       	adc	r31, r31
    43aa:	a2 17       	cp	r26, r18
    43ac:	b3 07       	cpc	r27, r19
    43ae:	e4 07       	cpc	r30, r20
    43b0:	f5 07       	cpc	r31, r21
    43b2:	20 f0       	brcs	.+8      	; 0x43bc <__udivmodsi4_ep>
    43b4:	a2 1b       	sub	r26, r18
    43b6:	b3 0b       	sbc	r27, r19
    43b8:	e4 0b       	sbc	r30, r20
    43ba:	f5 0b       	sbc	r31, r21

000043bc <__udivmodsi4_ep>:
    43bc:	66 1f       	adc	r22, r22
    43be:	77 1f       	adc	r23, r23
    43c0:	88 1f       	adc	r24, r24
    43c2:	99 1f       	adc	r25, r25
    43c4:	1a 94       	dec	r1
    43c6:	69 f7       	brne	.-38     	; 0x43a2 <__udivmodsi4_loop>
    43c8:	60 95       	com	r22
    43ca:	70 95       	com	r23
    43cc:	80 95       	com	r24
    43ce:	90 95       	com	r25
    43d0:	9b 01       	movw	r18, r22
    43d2:	ac 01       	movw	r20, r24
    43d4:	bd 01       	movw	r22, r26
    43d6:	cf 01       	movw	r24, r30
    43d8:	08 95       	ret

000043da <__prologue_saves__>:
    43da:	2f 92       	push	r2
    43dc:	3f 92       	push	r3
    43de:	4f 92       	push	r4
    43e0:	5f 92       	push	r5
    43e2:	6f 92       	push	r6
    43e4:	7f 92       	push	r7
    43e6:	8f 92       	push	r8
    43e8:	9f 92       	push	r9
    43ea:	af 92       	push	r10
    43ec:	bf 92       	push	r11
    43ee:	cf 92       	push	r12
    43f0:	df 92       	push	r13
    43f2:	ef 92       	push	r14
    43f4:	ff 92       	push	r15
    43f6:	0f 93       	push	r16
    43f8:	1f 93       	push	r17
    43fa:	cf 93       	push	r28
    43fc:	df 93       	push	r29
    43fe:	cd b7       	in	r28, 0x3d	; 61
    4400:	de b7       	in	r29, 0x3e	; 62
    4402:	ca 1b       	sub	r28, r26
    4404:	db 0b       	sbc	r29, r27
    4406:	0f b6       	in	r0, 0x3f	; 63
    4408:	f8 94       	cli
    440a:	de bf       	out	0x3e, r29	; 62
    440c:	0f be       	out	0x3f, r0	; 63
    440e:	cd bf       	out	0x3d, r28	; 61
    4410:	09 94       	ijmp

00004412 <__epilogue_restores__>:
    4412:	2a 88       	ldd	r2, Y+18	; 0x12
    4414:	39 88       	ldd	r3, Y+17	; 0x11
    4416:	48 88       	ldd	r4, Y+16	; 0x10
    4418:	5f 84       	ldd	r5, Y+15	; 0x0f
    441a:	6e 84       	ldd	r6, Y+14	; 0x0e
    441c:	7d 84       	ldd	r7, Y+13	; 0x0d
    441e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4420:	9b 84       	ldd	r9, Y+11	; 0x0b
    4422:	aa 84       	ldd	r10, Y+10	; 0x0a
    4424:	b9 84       	ldd	r11, Y+9	; 0x09
    4426:	c8 84       	ldd	r12, Y+8	; 0x08
    4428:	df 80       	ldd	r13, Y+7	; 0x07
    442a:	ee 80       	ldd	r14, Y+6	; 0x06
    442c:	fd 80       	ldd	r15, Y+5	; 0x05
    442e:	0c 81       	ldd	r16, Y+4	; 0x04
    4430:	1b 81       	ldd	r17, Y+3	; 0x03
    4432:	aa 81       	ldd	r26, Y+2	; 0x02
    4434:	b9 81       	ldd	r27, Y+1	; 0x01
    4436:	ce 0f       	add	r28, r30
    4438:	d1 1d       	adc	r29, r1
    443a:	0f b6       	in	r0, 0x3f	; 63
    443c:	f8 94       	cli
    443e:	de bf       	out	0x3e, r29	; 62
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	cd bf       	out	0x3d, r28	; 61
    4444:	ed 01       	movw	r28, r26
    4446:	08 95       	ret

00004448 <itoa>:
    4448:	fb 01       	movw	r30, r22
    444a:	9f 01       	movw	r18, r30
    444c:	e8 94       	clt
    444e:	42 30       	cpi	r20, 0x02	; 2
    4450:	c4 f0       	brlt	.+48     	; 0x4482 <itoa+0x3a>
    4452:	45 32       	cpi	r20, 0x25	; 37
    4454:	b4 f4       	brge	.+44     	; 0x4482 <itoa+0x3a>
    4456:	4a 30       	cpi	r20, 0x0A	; 10
    4458:	29 f4       	brne	.+10     	; 0x4464 <itoa+0x1c>
    445a:	97 fb       	bst	r25, 7
    445c:	1e f4       	brtc	.+6      	; 0x4464 <itoa+0x1c>
    445e:	90 95       	com	r25
    4460:	81 95       	neg	r24
    4462:	9f 4f       	sbci	r25, 0xFF	; 255
    4464:	64 2f       	mov	r22, r20
    4466:	77 27       	eor	r23, r23
    4468:	0e 94 55 22 	call	0x44aa	; 0x44aa <__udivmodhi4>
    446c:	80 5d       	subi	r24, 0xD0	; 208
    446e:	8a 33       	cpi	r24, 0x3A	; 58
    4470:	0c f0       	brlt	.+2      	; 0x4474 <itoa+0x2c>
    4472:	89 5d       	subi	r24, 0xD9	; 217
    4474:	81 93       	st	Z+, r24
    4476:	cb 01       	movw	r24, r22
    4478:	00 97       	sbiw	r24, 0x00	; 0
    447a:	a1 f7       	brne	.-24     	; 0x4464 <itoa+0x1c>
    447c:	16 f4       	brtc	.+4      	; 0x4482 <itoa+0x3a>
    447e:	5d e2       	ldi	r21, 0x2D	; 45
    4480:	51 93       	st	Z+, r21
    4482:	10 82       	st	Z, r1
    4484:	c9 01       	movw	r24, r18
    4486:	0c 94 45 22 	jmp	0x448a	; 0x448a <strrev>

0000448a <strrev>:
    448a:	dc 01       	movw	r26, r24
    448c:	fc 01       	movw	r30, r24
    448e:	67 2f       	mov	r22, r23
    4490:	71 91       	ld	r23, Z+
    4492:	77 23       	and	r23, r23
    4494:	e1 f7       	brne	.-8      	; 0x448e <strrev+0x4>
    4496:	32 97       	sbiw	r30, 0x02	; 2
    4498:	04 c0       	rjmp	.+8      	; 0x44a2 <strrev+0x18>
    449a:	7c 91       	ld	r23, X
    449c:	6d 93       	st	X+, r22
    449e:	70 83       	st	Z, r23
    44a0:	62 91       	ld	r22, -Z
    44a2:	ae 17       	cp	r26, r30
    44a4:	bf 07       	cpc	r27, r31
    44a6:	c8 f3       	brcs	.-14     	; 0x449a <strrev+0x10>
    44a8:	08 95       	ret

000044aa <__udivmodhi4>:
    44aa:	aa 1b       	sub	r26, r26
    44ac:	bb 1b       	sub	r27, r27
    44ae:	51 e1       	ldi	r21, 0x11	; 17
    44b0:	07 c0       	rjmp	.+14     	; 0x44c0 <__udivmodhi4_ep>

000044b2 <__udivmodhi4_loop>:
    44b2:	aa 1f       	adc	r26, r26
    44b4:	bb 1f       	adc	r27, r27
    44b6:	a6 17       	cp	r26, r22
    44b8:	b7 07       	cpc	r27, r23
    44ba:	10 f0       	brcs	.+4      	; 0x44c0 <__udivmodhi4_ep>
    44bc:	a6 1b       	sub	r26, r22
    44be:	b7 0b       	sbc	r27, r23

000044c0 <__udivmodhi4_ep>:
    44c0:	88 1f       	adc	r24, r24
    44c2:	99 1f       	adc	r25, r25
    44c4:	5a 95       	dec	r21
    44c6:	a9 f7       	brne	.-22     	; 0x44b2 <__udivmodhi4_loop>
    44c8:	80 95       	com	r24
    44ca:	90 95       	com	r25
    44cc:	bc 01       	movw	r22, r24
    44ce:	cd 01       	movw	r24, r26
    44d0:	08 95       	ret

000044d2 <_exit>:
    44d2:	f8 94       	cli

000044d4 <__stop_program>:
    44d4:	ff cf       	rjmp	.-2      	; 0x44d4 <__stop_program>
