
ECU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000200a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000200a  0000209e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  0080007c  0080007c  000020ba  2**0
                  ALLOC
  3 .stab         00002ec8  00000000  00000000  000020bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018c1  00000000  00000000  00004f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_4>
      14:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <__vector_9>
      28:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_10>
      2c:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
      8a:	0c 94 03 10 	jmp	0x2006	; 0x2006 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer1_Control>:
 * 					needed time it turns off the timer and reset all used global variables
 * [No Inputs]:
 * [No Returns]:
 */
void Timer1_Control(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	g_timer_counts++;
      9a:	80 91 7f 00 	lds	r24, 0x007F
      9e:	8f 5f       	subi	r24, 0xFF	; 255
      a0:	80 93 7f 00 	sts	0x007F, r24
	if(g_timer_counts == 10)
      a4:	80 91 7f 00 	lds	r24, 0x007F
      a8:	8a 30       	cpi	r24, 0x0A	; 10
      aa:	31 f4       	brne	.+12     	; 0xb8 <Timer1_Control+0x26>
	{
		TIMER1_Deinit();
      ac:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <TIMER1_Deinit>
		g_timer_counts = 0;
      b0:	10 92 7f 00 	sts	0x007F, r1
		Timer1_ON = 0;
      b4:	10 92 7e 00 	sts	0x007E, r1
	}
}
      b8:	cf 91       	pop	r28
      ba:	df 91       	pop	r29
      bc:	08 95       	ret

000000be <ControlECU2_init>:
 * 					Initialization Function to initialize any device
 * [No Inputs]:
 * [No Returns]:
 */
void ControlECU2_init(void)
{
      be:	df 93       	push	r29
      c0:	cf 93       	push	r28
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
	sei(); /*Enable Global Interrupt*/
      c6:	78 94       	sei
	UART_init(&UART_USART_Configuration);
      c8:	80 e6       	ldi	r24, 0x60	; 96
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <UART_init>
	TWI_init(&TWI_Config);
      d0:	88 e6       	ldi	r24, 0x68	; 104
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <TWI_init>
	TIMER1_setCallBackFunctionCOMP(Timer1_Control);	/*Set Timer1 (Compare mode) Call back function*/
      d8:	89 e4       	ldi	r24, 0x49	; 73
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	0e 94 4f 0b 	call	0x169e	; 0x169e <TIMER1_setCallBackFunctionCOMP>
	DcMotor_init();
      e0:	0e 94 05 03 	call	0x60a	; 0x60a <DcMotor_init>
	BUZZER_init();
      e4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <BUZZER_init>
}
      e8:	cf 91       	pop	r28
      ea:	df 91       	pop	r29
      ec:	08 95       	ret

000000ee <Receive_New_Password>:
 * 					Function to receive new password from ECU1
 * [No Inputs]:
 * [No Returns]:
 */
void Receive_New_Password(void)
{
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	df 93       	push	r29
      f4:	cf 93       	push	r28
      f6:	00 d0       	rcall	.+0      	; 0xf8 <Receive_New_Password+0xa>
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
      fc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     100:	80 31       	cpi	r24, 0x10	; 16
     102:	e1 f7       	brne	.-8      	; 0xfc <Receive_New_Password+0xe>
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     104:	1a 82       	std	Y+2, r1	; 0x02
     106:	0f c0       	rjmp	.+30     	; 0x126 <Receive_New_Password+0x38>
	{
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);
     108:	80 e1       	ldi	r24, 0x10	; 16
     10a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
		Password[i] = UART_receiveByte();
     10e:	8a 81       	ldd	r24, Y+2	; 0x02
     110:	08 2f       	mov	r16, r24
     112:	10 e0       	ldi	r17, 0x00	; 0
     114:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     118:	f8 01       	movw	r30, r16
     11a:	e3 57       	subi	r30, 0x73	; 115
     11c:	ff 4f       	sbci	r31, 0xFF	; 255
     11e:	80 83       	st	Z, r24
 * [No Returns]:
 */
void Receive_New_Password(void)
{
	while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     120:	8a 81       	ldd	r24, Y+2	; 0x02
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	8a 83       	std	Y+2, r24	; 0x02
     126:	8a 81       	ldd	r24, Y+2	; 0x02
     128:	86 30       	cpi	r24, 0x06	; 6
     12a:	70 f3       	brcs	.-36     	; 0x108 <Receive_New_Password+0x1a>
	{
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);
		Password[i] = UART_receiveByte();
	}
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     12c:	19 82       	std	Y+1, r1	; 0x01
     12e:	0f c0       	rjmp	.+30     	; 0x14e <Receive_New_Password+0x60>
	{
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);
     130:	80 e1       	ldi	r24, 0x10	; 16
     132:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
		Password_check[i] = UART_receiveByte();
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	08 2f       	mov	r16, r24
     13a:	10 e0       	ldi	r17, 0x00	; 0
     13c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     140:	f8 01       	movw	r30, r16
     142:	ed 56       	subi	r30, 0x6D	; 109
     144:	ff 4f       	sbci	r31, 0xFF	; 255
     146:	80 83       	st	Z, r24
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
	{
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);
		Password[i] = UART_receiveByte();
	}
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	8f 5f       	subi	r24, 0xFF	; 255
     14c:	89 83       	std	Y+1, r24	; 0x01
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	86 30       	cpi	r24, 0x06	; 6
     152:	70 f3       	brcs	.-36     	; 0x130 <Receive_New_Password+0x42>
	{
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);
		Password_check[i] = UART_receiveByte();
	}
}
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	cf 91       	pop	r28
     15a:	df 91       	pop	r29
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	08 95       	ret

00000162 <Check_Password_Match>:
 * 					and a variable containing their size
 *
 * [Returns]:		unsigned char variable to indicate if they are matched or not
 */
unsigned char Check_Password_Match (unsigned char* P1,unsigned char* P2,unsigned char size)
{
     162:	df 93       	push	r29
     164:	cf 93       	push	r28
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	27 97       	sbiw	r28, 0x07	; 7
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	9b 83       	std	Y+3, r25	; 0x03
     178:	8a 83       	std	Y+2, r24	; 0x02
     17a:	7d 83       	std	Y+5, r23	; 0x05
     17c:	6c 83       	std	Y+4, r22	; 0x04
     17e:	4e 83       	std	Y+6, r20	; 0x06
	for(unsigned char i=0 ; i<size ; i++)
     180:	19 82       	std	Y+1, r1	; 0x01
     182:	19 c0       	rjmp	.+50     	; 0x1b6 <Check_Password_Match+0x54>
		if(*(P1+i) != *(P2+i))
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	28 2f       	mov	r18, r24
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	8a 81       	ldd	r24, Y+2	; 0x02
     18c:	9b 81       	ldd	r25, Y+3	; 0x03
     18e:	fc 01       	movw	r30, r24
     190:	e2 0f       	add	r30, r18
     192:	f3 1f       	adc	r31, r19
     194:	40 81       	ld	r20, Z
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	8c 81       	ldd	r24, Y+4	; 0x04
     19e:	9d 81       	ldd	r25, Y+5	; 0x05
     1a0:	fc 01       	movw	r30, r24
     1a2:	e2 0f       	add	r30, r18
     1a4:	f3 1f       	adc	r31, r19
     1a6:	80 81       	ld	r24, Z
     1a8:	48 17       	cp	r20, r24
     1aa:	11 f0       	breq	.+4      	; 0x1b0 <Check_Password_Match+0x4e>
			return 0;	/*Not Matched*/
     1ac:	1f 82       	std	Y+7, r1	; 0x07
     1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <Check_Password_Match+0x60>
 *
 * [Returns]:		unsigned char variable to indicate if they are matched or not
 */
unsigned char Check_Password_Match (unsigned char* P1,unsigned char* P2,unsigned char size)
{
	for(unsigned char i=0 ; i<size ; i++)
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	8f 5f       	subi	r24, 0xFF	; 255
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	99 81       	ldd	r25, Y+1	; 0x01
     1b8:	8e 81       	ldd	r24, Y+6	; 0x06
     1ba:	98 17       	cp	r25, r24
     1bc:	18 f3       	brcs	.-58     	; 0x184 <Check_Password_Match+0x22>
		if(*(P1+i) != *(P2+i))
			return 0;	/*Not Matched*/
	return 1;			/*Matched*/
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	8f 83       	std	Y+7, r24	; 0x07
     1c2:	8f 81       	ldd	r24, Y+7	; 0x07
}
     1c4:	27 96       	adiw	r28, 0x07	; 7
     1c6:	0f b6       	in	r0, 0x3f	; 63
     1c8:	f8 94       	cli
     1ca:	de bf       	out	0x3e, r29	; 62
     1cc:	0f be       	out	0x3f, r0	; 63
     1ce:	cd bf       	out	0x3d, r28	; 61
     1d0:	cf 91       	pop	r28
     1d2:	df 91       	pop	r29
     1d4:	08 95       	ret

000001d6 <Receive_Password>:
 * 					Function to receive the registered password from ECU1
 * [No Inputs]:
 * [No Returns]:
 */
void Receive_Password(void)
{
     1d6:	0f 93       	push	r16
     1d8:	1f 93       	push	r17
     1da:	df 93       	push	r29
     1dc:	cf 93       	push	r28
     1de:	0f 92       	push	r0
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
     1e4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     1e8:	80 31       	cpi	r24, 0x10	; 16
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <Receive_Password+0xe>
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     1ec:	19 82       	std	Y+1, r1	; 0x01
     1ee:	0f c0       	rjmp	.+30     	; 0x20e <Receive_Password+0x38>
	{
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);
     1f0:	80 e1       	ldi	r24, 0x10	; 16
     1f2:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
		Password_check[i] = UART_receiveByte();
     1f6:	89 81       	ldd	r24, Y+1	; 0x01
     1f8:	08 2f       	mov	r16, r24
     1fa:	10 e0       	ldi	r17, 0x00	; 0
     1fc:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     200:	f8 01       	movw	r30, r16
     202:	ed 56       	subi	r30, 0x6D	; 109
     204:	ff 4f       	sbci	r31, 0xFF	; 255
     206:	80 83       	st	Z, r24
 * [No Returns]:
 */
void Receive_Password(void)
{
	while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     208:	89 81       	ldd	r24, Y+1	; 0x01
     20a:	8f 5f       	subi	r24, 0xFF	; 255
     20c:	89 83       	std	Y+1, r24	; 0x01
     20e:	89 81       	ldd	r24, Y+1	; 0x01
     210:	86 30       	cpi	r24, 0x06	; 6
     212:	70 f3       	brcs	.-36     	; 0x1f0 <Receive_Password+0x1a>
	{
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);
		Password_check[i] = UART_receiveByte();
	}
}
     214:	0f 90       	pop	r0
     216:	cf 91       	pop	r28
     218:	df 91       	pop	r29
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	08 95       	ret

00000220 <Store_Password_EEPROM>:
 * 					Function to store the password in EEPROM
 * [No Inputs]:
 * [No Returns]:
 */
void Store_Password_EEPROM(void)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	0f 92       	push	r0
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     22a:	19 82       	std	Y+1, r1	; 0x01
     22c:	14 c0       	rjmp	.+40     	; 0x256 <Store_Password_EEPROM+0x36>
	{
		EEPROM_witeByte(PASSWORD_START_ADDRESS+i,Password[i]);
     22e:	89 81       	ldd	r24, Y+1	; 0x01
     230:	88 2f       	mov	r24, r24
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	80 50       	subi	r24, 0x00	; 0
     236:	9b 4f       	sbci	r25, 0xFB	; 251
     238:	ac 01       	movw	r20, r24
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	fc 01       	movw	r30, r24
     242:	e3 57       	subi	r30, 0x73	; 115
     244:	ff 4f       	sbci	r31, 0xFF	; 255
     246:	20 81       	ld	r18, Z
     248:	ca 01       	movw	r24, r20
     24a:	62 2f       	mov	r22, r18
     24c:	0e 94 81 03 	call	0x702	; 0x702 <EEPROM_witeByte>
 * [No Inputs]:
 * [No Returns]:
 */
void Store_Password_EEPROM(void)
{
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	86 30       	cpi	r24, 0x06	; 6
     25a:	48 f3       	brcs	.-46     	; 0x22e <Store_Password_EEPROM+0xe>
	{
		EEPROM_witeByte(PASSWORD_START_ADDRESS+i,Password[i]);
	}
}
     25c:	0f 90       	pop	r0
     25e:	cf 91       	pop	r28
     260:	df 91       	pop	r29
     262:	08 95       	ret

00000264 <Get_Password_EEPROM>:
 * 					Function to get the password from EEPROM
 * [No Inputs]:
 * [No Returns]:
 */
void Get_Password_EEPROM(void)
{
     264:	df 93       	push	r29
     266:	cf 93       	push	r28
     268:	0f 92       	push	r0
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     26e:	19 82       	std	Y+1, r1	; 0x01
     270:	13 c0       	rjmp	.+38     	; 0x298 <Get_Password_EEPROM+0x34>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS+i,&Password[i]);
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	88 2f       	mov	r24, r24
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	80 50       	subi	r24, 0x00	; 0
     27a:	9b 4f       	sbci	r25, 0xFB	; 251
     27c:	ac 01       	movw	r20, r24
     27e:	89 81       	ldd	r24, Y+1	; 0x01
     280:	88 2f       	mov	r24, r24
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	9c 01       	movw	r18, r24
     286:	23 57       	subi	r18, 0x73	; 115
     288:	3f 4f       	sbci	r19, 0xFF	; 255
     28a:	ca 01       	movw	r24, r20
     28c:	b9 01       	movw	r22, r18
     28e:	0e 94 c2 03 	call	0x784	; 0x784 <EEPROM_readByte>
 * [No Inputs]:
 * [No Returns]:
 */
void Get_Password_EEPROM(void)
{
	for(unsigned char i=0 ; i<PASSWORD_SIZE ; i++)
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	8f 5f       	subi	r24, 0xFF	; 255
     296:	89 83       	std	Y+1, r24	; 0x01
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	86 30       	cpi	r24, 0x06	; 6
     29c:	50 f3       	brcs	.-44     	; 0x272 <Get_Password_EEPROM+0xe>
	{
		EEPROM_readByte(PASSWORD_START_ADDRESS+i,&Password[i]);
	}
}
     29e:	0f 90       	pop	r0
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <main>:
/*===================================================MAIN========================================================*/
int main(void)
{
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
	ControlECU2_init();					/*Initialization Function*/
     2ae:	0e 94 5f 00 	call	0xbe	; 0xbe <ControlECU2_init>
	/*---------------------------------------------------------------------------------------------------*/
	EEPROM_readByte(PASSWORD_START_ADDRESS+End_Point,&Password[End_Point]); /*Read Password Array last element*/
     2b2:	22 e9       	ldi	r18, 0x92	; 146
     2b4:	30 e0       	ldi	r19, 0x00	; 0
     2b6:	85 e0       	ldi	r24, 0x05	; 5
     2b8:	95 e0       	ldi	r25, 0x05	; 5
     2ba:	b9 01       	movw	r22, r18
     2bc:	0e 94 c2 03 	call	0x784	; 0x784 <EEPROM_readByte>
	while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};				/*Polling until ECU1 is Synchronized*/
     2c0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     2c4:	80 31       	cpi	r24, 0x10	; 16
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0x1a>
	UART_sendByte(Password[End_Point]);	   /*Send Password Array last element to check if it's first time or not*/
     2c8:	80 91 92 00 	lds	r24, 0x0092
     2cc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
	/*---------------------------------------------------------------------------------------------------*/
	if(Password [End_Point] != '#')		/*If last element of the array is not # means no password is registered before*/
     2d0:	80 91 92 00 	lds	r24, 0x0092
     2d4:	83 32       	cpi	r24, 0x23	; 35
     2d6:	01 f1       	breq	.+64     	; 0x318 <main+0x72>
     2d8:	17 c0       	rjmp	.+46     	; 0x308 <main+0x62>
	{
		while(password_match != 1)
		{
			Receive_New_Password();					   /*Receive the new Password from ECU1*/
     2da:	0e 94 77 00 	call	0xee	; 0xee <Receive_New_Password>
			password_match = Check_Password_Match(Password,Password_check,PASSWORD_SIZE);/*Check if password is matched*/
     2de:	8d e8       	ldi	r24, 0x8D	; 141
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	23 e9       	ldi	r18, 0x93	; 147
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	b9 01       	movw	r22, r18
     2e8:	46 e0       	ldi	r20, 0x06	; 6
     2ea:	0e 94 b1 00 	call	0x162	; 0x162 <Check_Password_Match>
     2ee:	80 93 7c 00 	sts	0x007C, r24
			UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
     2f2:	80 e1       	ldi	r24, 0x10	; 16
     2f4:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
			while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
     2f8:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     2fc:	80 31       	cpi	r24, 0x10	; 16
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x52>
			UART_sendByte(password_match);	/*Send password is matched or not*/
     300:	80 91 7c 00 	lds	r24, 0x007C
     304:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
	while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};				/*Polling until ECU1 is Synchronized*/
	UART_sendByte(Password[End_Point]);	   /*Send Password Array last element to check if it's first time or not*/
	/*---------------------------------------------------------------------------------------------------*/
	if(Password [End_Point] != '#')		/*If last element of the array is not # means no password is registered before*/
	{
		while(password_match != 1)
     308:	80 91 7c 00 	lds	r24, 0x007C
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	29 f7       	brne	.-54     	; 0x2da <main+0x34>
			password_match = Check_Password_Match(Password,Password_check,PASSWORD_SIZE);/*Check if password is matched*/
			UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
			while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
			UART_sendByte(password_match);	/*Send password is matched or not*/
		}
		password_match = 0; /*End Matching Case*/
     310:	10 92 7c 00 	sts	0x007C, r1
		Store_Password_EEPROM(); /*Store the password in the EEPROM*/
     314:	0e 94 10 01 	call	0x220	; 0x220 <Store_Password_EEPROM>
	}
	/*---------------------------------------------------------------------------------------------------*/
	while(1)
	{
		while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){}; /*Polling until ECU1 is Synchronized*/
     318:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     31c:	80 31       	cpi	r24, 0x10	; 16
     31e:	e1 f7       	brne	.-8      	; 0x318 <main+0x72>
		UART_sendByte(UART_SEND_OR_RECEIVE_READY);					/*Send that this ECU is Synchronized*/
     320:	80 e1       	ldi	r24, 0x10	; 16
     322:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
		Main_Menu_Choice = UART_receiveByte();
     326:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     32a:	80 93 7d 00 	sts	0x007D, r24
		if(Main_Menu_Choice == '+')
     32e:	80 91 7d 00 	lds	r24, 0x007D
     332:	8b 32       	cpi	r24, 0x2B	; 43
     334:	09 f0       	breq	.+2      	; 0x338 <main+0x92>
     336:	b3 c0       	rjmp	.+358    	; 0x49e <main+0x1f8>
		{
			while(1)
			{
				Receive_Password();		/*Receive entered password from ECU1*/
     338:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Receive_Password>
				Get_Password_EEPROM();	/*Get the stored password in EEPROM*/
     33c:	0e 94 32 01 	call	0x264	; 0x264 <Get_Password_EEPROM>
				password_match = Check_Password_Match(Password,Password_check,PASSWORD_SIZE); /*Check password match*/
     340:	8d e8       	ldi	r24, 0x8D	; 141
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	23 e9       	ldi	r18, 0x93	; 147
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	b9 01       	movw	r22, r18
     34a:	46 e0       	ldi	r20, 0x06	; 6
     34c:	0e 94 b1 00 	call	0x162	; 0x162 <Check_Password_Match>
     350:	80 93 7c 00 	sts	0x007C, r24
				UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
     354:	80 e1       	ldi	r24, 0x10	; 16
     356:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
				while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
     35a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     35e:	80 31       	cpi	r24, 0x10	; 16
     360:	e1 f7       	brne	.-8      	; 0x35a <main+0xb4>
				/*Beware at this point*/
				UART_sendByte(password_match);	/*Send password is matched or not*/
     362:	80 91 7c 00 	lds	r24, 0x007C
     366:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
				if(password_match == 1)			/*If matched*/
     36a:	80 91 7c 00 	lds	r24, 0x007C
     36e:	81 30       	cpi	r24, 0x01	; 1
     370:	09 f0       	breq	.+2      	; 0x374 <main+0xce>
     372:	4f c0       	rjmp	.+158    	; 0x412 <main+0x16c>
				{
					while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
     374:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     378:	80 31       	cpi	r24, 0x10	; 16
     37a:	e1 f7       	brne	.-8      	; 0x374 <main+0xce>
					/*Beware at this point*/
					UART_sendByte(UART_SEND_OR_RECEIVE_READY); /*Send that this ECU is Synchronized*/
     37c:	80 e1       	ldi	r24, 0x10	; 16
     37e:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
					/*-------------------------------------------------------------------------*/
					TIMER1_Config.Compare_Value16 = Compare_Value_For_15_Seconds;
     382:	8b e1       	ldi	r24, 0x1B	; 27
     384:	97 eb       	ldi	r25, 0xB7	; 183
     386:	90 93 70 00 	sts	0x0070, r25
     38a:	80 93 6f 00 	sts	0x006F, r24
					TIMER1_init(&TIMER1_Config);
     38e:	8b e6       	ldi	r24, 0x6B	; 107
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
					Timer1_ON = 1;
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	80 93 7e 00 	sts	0x007E, r24
					DcMotor_Rotate(CW,100);
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	64 e6       	ldi	r22, 0x64	; 100
     3a0:	0e 94 20 03 	call	0x640	; 0x640 <DcMotor_Rotate>
					while(Timer1_ON == 1){}
     3a4:	80 91 7e 00 	lds	r24, 0x007E
     3a8:	81 30       	cpi	r24, 0x01	; 1
     3aa:	e1 f3       	breq	.-8      	; 0x3a4 <main+0xfe>
					/*-------------------------------------------------------------------------*/
					TIMER1_Config.Compare_Value16 = Compare_Value_For_3_Seconds;
     3ac:	8f e9       	ldi	r24, 0x9F	; 159
     3ae:	94 e2       	ldi	r25, 0x24	; 36
     3b0:	90 93 70 00 	sts	0x0070, r25
     3b4:	80 93 6f 00 	sts	0x006F, r24
					TIMER1_init(&TIMER1_Config);
     3b8:	8b e6       	ldi	r24, 0x6B	; 107
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
					Timer1_ON = 1;
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	80 93 7e 00 	sts	0x007E, r24
					DcMotor_Rotate(stop,0);
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	0e 94 20 03 	call	0x640	; 0x640 <DcMotor_Rotate>
					while(Timer1_ON == 1){}
     3ce:	80 91 7e 00 	lds	r24, 0x007E
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	e1 f3       	breq	.-8      	; 0x3ce <main+0x128>
					/*-------------------------------------------------------------------------*/
					TIMER1_Config.Compare_Value16 = Compare_Value_For_15_Seconds;
     3d6:	8b e1       	ldi	r24, 0x1B	; 27
     3d8:	97 eb       	ldi	r25, 0xB7	; 183
     3da:	90 93 70 00 	sts	0x0070, r25
     3de:	80 93 6f 00 	sts	0x006F, r24
					TIMER1_init(&TIMER1_Config);
     3e2:	8b e6       	ldi	r24, 0x6B	; 107
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
					Timer1_ON = 1;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	80 93 7e 00 	sts	0x007E, r24
					DcMotor_Rotate(A_CW,100);
     3f0:	82 e0       	ldi	r24, 0x02	; 2
     3f2:	64 e6       	ldi	r22, 0x64	; 100
     3f4:	0e 94 20 03 	call	0x640	; 0x640 <DcMotor_Rotate>
					while(Timer1_ON == 1){}
     3f8:	80 91 7e 00 	lds	r24, 0x007E
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	e1 f3       	breq	.-8      	; 0x3f8 <main+0x152>
					DcMotor_Rotate(stop,0); /*Finally Stop the DC Motor*/
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	0e 94 20 03 	call	0x640	; 0x640 <DcMotor_Rotate>
					/*-------------------------------------------------------------------------*/
					Wrong_Entries_Number = 0;	/*Reset number of wrong entries*/
     408:	10 92 80 00 	sts	0x0080, r1
					password_match = 0;			/*End Matching Case*/
     40c:	10 92 7c 00 	sts	0x007C, r1
     410:	43 c0       	rjmp	.+134    	; 0x498 <main+0x1f2>
					break; /*Exit the While Loop and ask again for options*/
				}
				else if(password_match == 0)
     412:	80 91 7c 00 	lds	r24, 0x007C
     416:	88 23       	and	r24, r24
     418:	09 f0       	breq	.+2      	; 0x41c <main+0x176>
     41a:	8e cf       	rjmp	.-228    	; 0x338 <main+0x92>
				{
					Wrong_Entries_Number++;
     41c:	80 91 80 00 	lds	r24, 0x0080
     420:	8f 5f       	subi	r24, 0xFF	; 255
     422:	80 93 80 00 	sts	0x0080, r24
					if(Wrong_Entries_Number == 3)
     426:	80 91 80 00 	lds	r24, 0x0080
     42a:	83 30       	cpi	r24, 0x03	; 3
     42c:	09 f0       	breq	.+2      	; 0x430 <main+0x18a>
     42e:	84 cf       	rjmp	.-248    	; 0x338 <main+0x92>
					{
						while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
     430:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     434:	80 31       	cpi	r24, 0x10	; 16
     436:	e1 f7       	brne	.-8      	; 0x430 <main+0x18a>
						/*Beware at this point*/
						UART_sendByte(UART_SEND_OR_RECEIVE_READY); /*Send that this ECU is Synchronized*/
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
						TIMER1_Config.Compare_Value16 = Compare_Value_For_60_Seconds;
     43e:	84 e2       	ldi	r24, 0x24	; 36
     440:	94 ef       	ldi	r25, 0xF4	; 244
     442:	90 93 70 00 	sts	0x0070, r25
     446:	80 93 6f 00 	sts	0x006F, r24
						/*3 times - 20secondsx3 times = 60 seconds*/
						TIMER1_init(&TIMER1_Config);
     44a:	8b e6       	ldi	r24, 0x6B	; 107
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
						Timer1_ON = 1;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 7e 00 	sts	0x007E, r24
						/*Starting the Alarm*/
						BUZZER_On();
     458:	0e 94 ed 02 	call	0x5da	; 0x5da <BUZZER_On>
						while(Timer1_ON == 1){};
     45c:	80 91 7e 00 	lds	r24, 0x007E
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	e1 f3       	breq	.-8      	; 0x45c <main+0x1b6>
						TIMER1_init(&TIMER1_Config);
     464:	8b e6       	ldi	r24, 0x6B	; 107
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
						Timer1_ON = 1;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	80 93 7e 00 	sts	0x007E, r24
						while(Timer1_ON == 1){};
     472:	80 91 7e 00 	lds	r24, 0x007E
     476:	81 30       	cpi	r24, 0x01	; 1
     478:	e1 f3       	breq	.-8      	; 0x472 <main+0x1cc>
						TIMER1_init(&TIMER1_Config);
     47a:	8b e6       	ldi	r24, 0x6B	; 107
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
						Timer1_ON = 1;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 7e 00 	sts	0x007E, r24
						while(Timer1_ON == 1){};
     488:	80 91 7e 00 	lds	r24, 0x007E
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	e1 f3       	breq	.-8      	; 0x488 <main+0x1e2>
						/*End the Alarm*/
						BUZZER_Off();
     490:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <BUZZER_Off>
						/*-------------------------------------------------------------------------*/
						Wrong_Entries_Number = 0;	/*Reset number of wrong entries*/
     494:	10 92 80 00 	sts	0x0080, r1
						break; /*Exit the While Loop and ask again for options*/
					}
				}
			}
			Main_Menu_Choice = 0;	/*Reset main menu choice*/
     498:	10 92 7d 00 	sts	0x007D, r1
     49c:	3d cf       	rjmp	.-390    	; 0x318 <main+0x72>
		}
		else if (Main_Menu_Choice == '-')
     49e:	80 91 7d 00 	lds	r24, 0x007D
     4a2:	8d 32       	cpi	r24, 0x2D	; 45
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <main+0x202>
     4a6:	38 cf       	rjmp	.-400    	; 0x318 <main+0x72>
		{
			while(1)
			{
				Receive_Password();		/*Receive entered password from ECU1*/
     4a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Receive_Password>
				Get_Password_EEPROM();	/*Get the stored password in EEPROM*/
     4ac:	0e 94 32 01 	call	0x264	; 0x264 <Get_Password_EEPROM>
				password_match = Check_Password_Match(Password,Password_check,PASSWORD_SIZE); /*Check password match*/
     4b0:	8d e8       	ldi	r24, 0x8D	; 141
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	23 e9       	ldi	r18, 0x93	; 147
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	b9 01       	movw	r22, r18
     4ba:	46 e0       	ldi	r20, 0x06	; 6
     4bc:	0e 94 b1 00 	call	0x162	; 0x162 <Check_Password_Match>
     4c0:	80 93 7c 00 	sts	0x007C, r24
				UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
     4c4:	80 e1       	ldi	r24, 0x10	; 16
     4c6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
				while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
     4ca:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     4ce:	80 31       	cpi	r24, 0x10	; 16
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <main+0x224>
				/*Beware at this point*/
				UART_sendByte(password_match);	/*Send password is matched or not*/
     4d2:	80 91 7c 00 	lds	r24, 0x007C
     4d6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
				if(password_match == 1)			/*If matched*/
     4da:	80 91 7c 00 	lds	r24, 0x007C
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	29 f5       	brne	.+74     	; 0x52c <main+0x286>
				{
					password_match = 0;	/*End Matching Case*/
     4e2:	10 92 7c 00 	sts	0x007C, r1
     4e6:	17 c0       	rjmp	.+46     	; 0x516 <main+0x270>
					while(password_match != 1)
					{
						Receive_New_Password();					   /*Receive the new Password from ECU1*/
     4e8:	0e 94 77 00 	call	0xee	; 0xee <Receive_New_Password>
						password_match = Check_Password_Match(Password,Password_check,PASSWORD_SIZE);/*Check if password is matched*/
     4ec:	8d e8       	ldi	r24, 0x8D	; 141
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	23 e9       	ldi	r18, 0x93	; 147
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	b9 01       	movw	r22, r18
     4f6:	46 e0       	ldi	r20, 0x06	; 6
     4f8:	0e 94 b1 00 	call	0x162	; 0x162 <Check_Password_Match>
     4fc:	80 93 7c 00 	sts	0x007C, r24
						UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
     500:	80 e1       	ldi	r24, 0x10	; 16
     502:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
						while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
     506:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     50a:	80 31       	cpi	r24, 0x10	; 16
     50c:	e1 f7       	brne	.-8      	; 0x506 <main+0x260>
						UART_sendByte(password_match);	/*Send password is matched or not*/
     50e:	80 91 7c 00 	lds	r24, 0x007C
     512:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
				/*Beware at this point*/
				UART_sendByte(password_match);	/*Send password is matched or not*/
				if(password_match == 1)			/*If matched*/
				{
					password_match = 0;	/*End Matching Case*/
					while(password_match != 1)
     516:	80 91 7c 00 	lds	r24, 0x007C
     51a:	81 30       	cpi	r24, 0x01	; 1
     51c:	29 f7       	brne	.-54     	; 0x4e8 <main+0x242>
						password_match = Check_Password_Match(Password,Password_check,PASSWORD_SIZE);/*Check if password is matched*/
						UART_sendByte(UART_SEND_OR_RECEIVE_READY);	/*Send that this ECU is Synchronized*/
						while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
						UART_sendByte(password_match);	/*Send password is matched or not*/
					}
					password_match = 0; /*End Matching Case*/
     51e:	10 92 7c 00 	sts	0x007C, r1
					Store_Password_EEPROM(); /*Store the password in the EEPROM*/
     522:	0e 94 10 01 	call	0x220	; 0x220 <Store_Password_EEPROM>
					Wrong_Entries_Number = 0;	/*Reset number of wrong entries*/
     526:	10 92 80 00 	sts	0x0080, r1
     52a:	f6 ce       	rjmp	.-532    	; 0x318 <main+0x72>
					break; /*Exit the While Loop and ask again for options*/

				}
				else if(password_match == 0)
     52c:	80 91 7c 00 	lds	r24, 0x007C
     530:	88 23       	and	r24, r24
     532:	09 f0       	breq	.+2      	; 0x536 <main+0x290>
     534:	3e c0       	rjmp	.+124    	; 0x5b2 <main+0x30c>
				{
					Wrong_Entries_Number++;
     536:	80 91 80 00 	lds	r24, 0x0080
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	80 93 80 00 	sts	0x0080, r24
					if(Wrong_Entries_Number == 3)
     540:	80 91 80 00 	lds	r24, 0x0080
     544:	83 30       	cpi	r24, 0x03	; 3
     546:	a9 f5       	brne	.+106    	; 0x5b2 <main+0x30c>
					{
						while(UART_receiveByte() != UART_SEND_OR_RECEIVE_READY){};/*Polling until ECU1 is Synchronized*/
     548:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
     54c:	80 31       	cpi	r24, 0x10	; 16
     54e:	e1 f7       	brne	.-8      	; 0x548 <main+0x2a2>
						/*Beware at this point*/
						UART_sendByte(UART_SEND_OR_RECEIVE_READY); /*Send that this ECU is Synchronized*/
     550:	80 e1       	ldi	r24, 0x10	; 16
     552:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
						TIMER1_Config.Compare_Value16 = Compare_Value_For_60_Seconds;
     556:	84 e2       	ldi	r24, 0x24	; 36
     558:	94 ef       	ldi	r25, 0xF4	; 244
     55a:	90 93 70 00 	sts	0x0070, r25
     55e:	80 93 6f 00 	sts	0x006F, r24
						/*3 times - 20secondsx3 times = 60 seconds*/
						TIMER1_init(&TIMER1_Config);
     562:	8b e6       	ldi	r24, 0x6B	; 107
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
						Timer1_ON = 1;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	80 93 7e 00 	sts	0x007E, r24
						/*Starting the Alarm*/
						BUZZER_On();
     570:	0e 94 ed 02 	call	0x5da	; 0x5da <BUZZER_On>
						while(Timer1_ON == 1){};
     574:	80 91 7e 00 	lds	r24, 0x007E
     578:	81 30       	cpi	r24, 0x01	; 1
     57a:	e1 f3       	breq	.-8      	; 0x574 <main+0x2ce>
						TIMER1_init(&TIMER1_Config);
     57c:	8b e6       	ldi	r24, 0x6B	; 107
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
						Timer1_ON = 1;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 93 7e 00 	sts	0x007E, r24
						while(Timer1_ON == 1){};
     58a:	80 91 7e 00 	lds	r24, 0x007E
     58e:	81 30       	cpi	r24, 0x01	; 1
     590:	e1 f3       	breq	.-8      	; 0x58a <main+0x2e4>
						TIMER1_init(&TIMER1_Config);
     592:	8b e6       	ldi	r24, 0x6B	; 107
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 01 0a 	call	0x1402	; 0x1402 <TIMER1_init>
						Timer1_ON = 1;
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	80 93 7e 00 	sts	0x007E, r24
						while(Timer1_ON == 1){};
     5a0:	80 91 7e 00 	lds	r24, 0x007E
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	e1 f3       	breq	.-8      	; 0x5a0 <main+0x2fa>
						/*End the Alarm*/
						BUZZER_Off();
     5a8:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <BUZZER_Off>
						/*-------------------------------------------------------------------------*/
						Wrong_Entries_Number = 0;	/*Reset number of wrong entries*/
     5ac:	10 92 80 00 	sts	0x0080, r1
     5b0:	b3 ce       	rjmp	.-666    	; 0x318 <main+0x72>
						break; /*Exit the While Loop and ask again for options*/
					}
				}
				Main_Menu_Choice = 0;	/*Reset main menu choice*/
     5b2:	10 92 7d 00 	sts	0x007D, r1
     5b6:	78 cf       	rjmp	.-272    	; 0x4a8 <main+0x202>

000005b8 <BUZZER_init>:
 * 					Function to initialize the buzzer using gpio driver by determining its output pin
 * [No Inputs]:
 * [No Returns]:
 */
void BUZZER_init(void)
{
     5b8:	df 93       	push	r29
     5ba:	cf 93       	push	r28
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT); /*Set pin Output*/
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	60 e0       	ldi	r22, 0x00	; 0
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	0e 94 22 04 	call	0x844	; 0x844 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,BUZZER_OFF);			 /*Initially set buzzer off*/
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	40 e0       	ldi	r20, 0x00	; 0
     5d0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
}
     5d4:	cf 91       	pop	r28
     5d6:	df 91       	pop	r29
     5d8:	08 95       	ret

000005da <BUZZER_On>:
 * 					Function to Turn on the buzzer
 * [No Inputs]:
 * [No Returns]:
 */
void BUZZER_On(void)
{
     5da:	df 93       	push	r29
     5dc:	cf 93       	push	r28
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,BUZZER_ON);
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
}
     5ec:	cf 91       	pop	r28
     5ee:	df 91       	pop	r29
     5f0:	08 95       	ret

000005f2 <BUZZER_Off>:
 * 					Function to Turn off the buzzer
 * [No Inputs]:
 * [No Returns]:
 */
void BUZZER_Off(void)
{
     5f2:	df 93       	push	r29
     5f4:	cf 93       	push	r28
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,BUZZER_OFF);
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
}
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <DcMotor_init>:
 * Function to initialize DC Motor
 * [No Inputs]
 * [No Returns]
 */
void DcMotor_init(void)
{
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DCMOTOR_A_PORT_ID,DCMOTOR_A_PIN_ID,PIN_OUTPUT); /*Set Pin A of motor as output*/
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	0e 94 22 04 	call	0x844	; 0x844 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_B_PORT_ID,DCMOTOR_B_PIN_ID,PIN_OUTPUT); /*Set Pin B of motor as output*/
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	60 e0       	ldi	r22, 0x00	; 0
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	0e 94 22 04 	call	0x844	; 0x844 <GPIO_setupPinDirection>
	GPIO_writePin(DCMOTOR_A_PORT_ID,DCMOTOR_A_PIN_ID,LOGIC_LOW); /*Stop the DC Motor initially*/
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
	GPIO_writePin(DCMOTOR_A_PORT_ID,DCMOTOR_B_PIN_ID,LOGIC_LOW);
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
}
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	08 95       	ret

00000640 <DcMotor_Rotate>:
 * [Inputs]:
 * 			desired state to rotate & speed
 * [No Returns]
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	00 d0       	rcall	.+0      	; 0x646 <DcMotor_Rotate+0x6>
     646:	00 d0       	rcall	.+0      	; 0x648 <DcMotor_Rotate+0x8>
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	89 83       	std	Y+1, r24	; 0x01
     64e:	6a 83       	std	Y+2, r22	; 0x02

	switch(state)
     650:	89 81       	ldd	r24, Y+1	; 0x01
     652:	28 2f       	mov	r18, r24
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	3c 83       	std	Y+4, r19	; 0x04
     658:	2b 83       	std	Y+3, r18	; 0x03
     65a:	8b 81       	ldd	r24, Y+3	; 0x03
     65c:	9c 81       	ldd	r25, Y+4	; 0x04
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	91 05       	cpc	r25, r1
     662:	a1 f0       	breq	.+40     	; 0x68c <DcMotor_Rotate+0x4c>
     664:	2b 81       	ldd	r18, Y+3	; 0x03
     666:	3c 81       	ldd	r19, Y+4	; 0x04
     668:	22 30       	cpi	r18, 0x02	; 2
     66a:	31 05       	cpc	r19, r1
     66c:	d1 f0       	breq	.+52     	; 0x6a2 <DcMotor_Rotate+0x62>
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	00 97       	sbiw	r24, 0x00	; 0
     674:	01 f5       	brne	.+64     	; 0x6b6 <DcMotor_Rotate+0x76>
	{
		case(stop):
			GPIO_writePin(DCMOTOR_A_PORT_ID,DCMOTOR_A_PIN_ID,LOGIC_LOW); /*Stop the DC Motor*/
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
			GPIO_writePin(DCMOTOR_A_PORT_ID,DCMOTOR_B_PIN_ID,LOGIC_LOW);
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
     68a:	15 c0       	rjmp	.+42     	; 0x6b6 <DcMotor_Rotate+0x76>
			break;
		case(CW):
			GPIO_writePin(DCMOTOR_A_PORT_ID,DCMOTOR_A_PIN_ID,LOGIC_LOW); /*DC Motor in clock wise*/
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
			GPIO_writePin(DCMOTOR_A_PORT_ID,DCMOTOR_B_PIN_ID,LOGIC_HIGH);
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <DcMotor_Rotate+0x76>
			break;
		case(A_CW):
			GPIO_writePin(DCMOTOR_A_PORT_ID,DCMOTOR_A_PIN_ID,LOGIC_HIGH); /*DC Motor in anti-clock wise*/
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	41 e0       	ldi	r20, 0x01	; 1
     6a8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
			GPIO_writePin(DCMOTOR_A_PORT_ID,DCMOTOR_B_PIN_ID,LOGIC_LOW);
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <GPIO_writePin>
			break;
	}
	speed = (uint8)(((uint16)(speed*255))/100);
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	48 2f       	mov	r20, r24
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	ca 01       	movw	r24, r20
     6be:	9c 01       	movw	r18, r24
     6c0:	22 0f       	add	r18, r18
     6c2:	33 1f       	adc	r19, r19
     6c4:	c9 01       	movw	r24, r18
     6c6:	96 95       	lsr	r25
     6c8:	98 2f       	mov	r25, r24
     6ca:	88 27       	eor	r24, r24
     6cc:	97 95       	ror	r25
     6ce:	87 95       	ror	r24
     6d0:	82 1b       	sub	r24, r18
     6d2:	93 0b       	sbc	r25, r19
     6d4:	84 0f       	add	r24, r20
     6d6:	95 1f       	adc	r25, r21
     6d8:	24 e6       	ldi	r18, 0x64	; 100
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	b9 01       	movw	r22, r18
     6de:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__udivmodhi4>
     6e2:	cb 01       	movw	r24, r22
     6e4:	8a 83       	std	Y+2, r24	; 0x02
	TIMER0_Config.Compare_Value8 = speed; /*edit configuration according to speed used*/
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	80 93 74 00 	sts	0x0074, r24
	TIMER0_init(&TIMER0_Config);
     6ec:	83 e7       	ldi	r24, 0x73	; 115
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 92 08 	call	0x1124	; 0x1124 <TIMER0_init>
}
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	cf 91       	pop	r28
     6fe:	df 91       	pop	r29
     700:	08 95       	ret

00000702 <EEPROM_witeByte>:
 * [Inputs]:	data to be written, Address of the EEPROM and the location to write the byte
 *
 * [Returns]: 	Transmission Status
 */
uint8 EEPROM_witeByte(uint16 u16Address,uint8 data)
{
     702:	df 93       	push	r29
     704:	cf 93       	push	r28
     706:	00 d0       	rcall	.+0      	; 0x708 <EEPROM_witeByte+0x6>
     708:	00 d0       	rcall	.+0      	; 0x70a <EEPROM_witeByte+0x8>
     70a:	cd b7       	in	r28, 0x3d	; 61
     70c:	de b7       	in	r29, 0x3e	; 62
     70e:	9a 83       	std	Y+2, r25	; 0x02
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	6b 83       	std	Y+3, r22	; 0x03
	/*Send Start condition*/
	TWI_start();
     714:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <TWI_start>
	/*If isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_START)
     718:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     71c:	88 30       	cpi	r24, 0x08	; 8
     71e:	11 f0       	breq	.+4      	; 0x724 <EEPROM_witeByte+0x22>
		return ERROR;
     720:	1c 82       	std	Y+4, r1	; 0x04
     722:	28 c0       	rjmp	.+80     	; 0x774 <EEPROM_witeByte+0x72>
	/*Send 1010xxx0b - x xx stands for A10,A9,A8 Addresses in the external  EEPROM - last 0 stands for write*/
	/*Over all it expresses Device Address and Write*/
	TWI_writeByte((uint8)(0xA0 | ((u16Address & 0x700)>>7)));
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	9a 81       	ldd	r25, Y+2	; 0x02
     728:	80 70       	andi	r24, 0x00	; 0
     72a:	97 70       	andi	r25, 0x07	; 7
     72c:	88 0f       	add	r24, r24
     72e:	89 2f       	mov	r24, r25
     730:	88 1f       	adc	r24, r24
     732:	99 0b       	sbc	r25, r25
     734:	91 95       	neg	r25
     736:	80 6a       	ori	r24, 0xA0	; 160
     738:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <TWI_writeByte>
	/*If status of writing with ACK isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_MST_SLA_W_ACK)
     73c:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     740:	88 31       	cpi	r24, 0x18	; 24
     742:	11 f0       	breq	.+4      	; 0x748 <EEPROM_witeByte+0x46>
		return ERROR;
     744:	1c 82       	std	Y+4, r1	; 0x04
     746:	16 c0       	rjmp	.+44     	; 0x774 <EEPROM_witeByte+0x72>
	/*Send Address where i want to the write the byte in the external EEPROM*/
	TWI_writeByte((uint8)(u16Address));
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <TWI_writeByte>
	/*If status of writing with ACK isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
     74e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     752:	88 32       	cpi	r24, 0x28	; 40
     754:	11 f0       	breq	.+4      	; 0x75a <EEPROM_witeByte+0x58>
		return ERROR;
     756:	1c 82       	std	Y+4, r1	; 0x04
     758:	0d c0       	rjmp	.+26     	; 0x774 <EEPROM_witeByte+0x72>
	/*Write the byte in the external EEPROM*/
	TWI_writeByte(data);
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <TWI_writeByte>
	/*If status of writing with ACK isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
     760:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     764:	88 32       	cpi	r24, 0x28	; 40
     766:	11 f0       	breq	.+4      	; 0x76c <EEPROM_witeByte+0x6a>
		return ERROR;
     768:	1c 82       	std	Y+4, r1	; 0x04
     76a:	04 c0       	rjmp	.+8      	; 0x774 <EEPROM_witeByte+0x72>
	/*Send Stop condition*/
	TWI_stop();
     76c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <TWI_stop>
	/*Finally Successfully Sent then return with SUCCESS*/
	return SUCCESS;
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	8c 83       	std	Y+4, r24	; 0x04
     774:	8c 81       	ldd	r24, Y+4	; 0x04
}
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	cf 91       	pop	r28
     780:	df 91       	pop	r29
     782:	08 95       	ret

00000784 <EEPROM_readByte>:
 * [Inputs]:	pointer to uint8 to store data inside, Address of the EEPROM and the location to Read the byte from
 *
 * [Returns]: 	Transmission Status
 */
uint8 EEPROM_readByte(uint16 u16Address,uint8* data)
{
     784:	df 93       	push	r29
     786:	cf 93       	push	r28
     788:	00 d0       	rcall	.+0      	; 0x78a <EEPROM_readByte+0x6>
     78a:	00 d0       	rcall	.+0      	; 0x78c <EEPROM_readByte+0x8>
     78c:	0f 92       	push	r0
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	9a 83       	std	Y+2, r25	; 0x02
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	7c 83       	std	Y+4, r23	; 0x04
     798:	6b 83       	std	Y+3, r22	; 0x03
	/*Send Start condition*/
	TWI_start();
     79a:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <TWI_start>
	/*If isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_START)
     79e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     7a2:	88 30       	cpi	r24, 0x08	; 8
     7a4:	11 f0       	breq	.+4      	; 0x7aa <EEPROM_readByte+0x26>
		return ERROR;
     7a6:	1d 82       	std	Y+5, r1	; 0x05
     7a8:	44 c0       	rjmp	.+136    	; 0x832 <EEPROM_readByte+0xae>
	/*Send 1010xxx0b - xxx stands for A10,A9,A8 Addresses in the external  EEPROM - last 0 stands for write*/
	/*Over all it expresses Device Address and Write*/
	TWI_writeByte((uint8)(0xA0 | ((u16Address & 0x700)>>7)));
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	9a 81       	ldd	r25, Y+2	; 0x02
     7ae:	80 70       	andi	r24, 0x00	; 0
     7b0:	97 70       	andi	r25, 0x07	; 7
     7b2:	88 0f       	add	r24, r24
     7b4:	89 2f       	mov	r24, r25
     7b6:	88 1f       	adc	r24, r24
     7b8:	99 0b       	sbc	r25, r25
     7ba:	91 95       	neg	r25
     7bc:	80 6a       	ori	r24, 0xA0	; 160
     7be:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <TWI_writeByte>
	/*If status of writing with ACK isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_MST_SLA_W_ACK)
     7c2:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     7c6:	88 31       	cpi	r24, 0x18	; 24
     7c8:	11 f0       	breq	.+4      	; 0x7ce <EEPROM_readByte+0x4a>
		return ERROR;
     7ca:	1d 82       	std	Y+5, r1	; 0x05
     7cc:	32 c0       	rjmp	.+100    	; 0x832 <EEPROM_readByte+0xae>
	/*Send Address where i want to the write the byte in the external EEPROM*/
	TWI_writeByte((uint8)(u16Address));
     7ce:	89 81       	ldd	r24, Y+1	; 0x01
     7d0:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <TWI_writeByte>
	/*If status of writing with ACK isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_MT_DATA_ACK)
     7d4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     7d8:	88 32       	cpi	r24, 0x28	; 40
     7da:	11 f0       	breq	.+4      	; 0x7e0 <EEPROM_readByte+0x5c>
		return ERROR;
     7dc:	1d 82       	std	Y+5, r1	; 0x05
     7de:	29 c0       	rjmp	.+82     	; 0x832 <EEPROM_readByte+0xae>
	/*Send repreated Start Condition*/
	TWI_start();
     7e0:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <TWI_start>
	/*If isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_REP_START)
     7e4:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     7e8:	80 31       	cpi	r24, 0x10	; 16
     7ea:	11 f0       	breq	.+4      	; 0x7f0 <EEPROM_readByte+0x6c>
		return ERROR;
     7ec:	1d 82       	std	Y+5, r1	; 0x05
     7ee:	21 c0       	rjmp	.+66     	; 0x832 <EEPROM_readByte+0xae>
	/*Send again 1010xxx1b - xxx stands for A10,A9,A8 Addresses in the external  EEPROM - last 1 stands for Read*/
	TWI_writeByte((uint8)((0xA0 | ((u16Address & 0x700)>>7)) | 1));
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	80 70       	andi	r24, 0x00	; 0
     7f6:	97 70       	andi	r25, 0x07	; 7
     7f8:	88 0f       	add	r24, r24
     7fa:	89 2f       	mov	r24, r25
     7fc:	88 1f       	adc	r24, r24
     7fe:	99 0b       	sbc	r25, r25
     800:	91 95       	neg	r25
     802:	81 6a       	ori	r24, 0xA1	; 161
     804:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <TWI_writeByte>
	/*If status of writing with ACK isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_MST_SLA_R_ACK)
     808:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     80c:	80 34       	cpi	r24, 0x40	; 64
     80e:	11 f0       	breq	.+4      	; 0x814 <EEPROM_readByte+0x90>
		return ERROR;
     810:	1d 82       	std	Y+5, r1	; 0x05
     812:	0f c0       	rjmp	.+30     	; 0x832 <EEPROM_readByte+0xae>
	/*Read data in the chosen location from the EEPROM*/
	*data = TWI_readByteWithNACK();
     814:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <TWI_readByteWithNACK>
     818:	eb 81       	ldd	r30, Y+3	; 0x03
     81a:	fc 81       	ldd	r31, Y+4	; 0x04
     81c:	80 83       	st	Z, r24
	/*If reading isn't complete return with ERROR*/
	if(TWI_getStatus() != TWI_MR_DATA_NACK)
     81e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <TWI_getStatus>
     822:	88 35       	cpi	r24, 0x58	; 88
     824:	11 f0       	breq	.+4      	; 0x82a <EEPROM_readByte+0xa6>
			return ERROR;
     826:	1d 82       	std	Y+5, r1	; 0x05
     828:	04 c0       	rjmp	.+8      	; 0x832 <EEPROM_readByte+0xae>
	/*Send Stop condition*/
	TWI_stop();
     82a:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <TWI_stop>
	return SUCCESS;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	8d 83       	std	Y+5, r24	; 0x05
     832:	8d 81       	ldd	r24, Y+5	; 0x05
}
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	08 95       	ret

00000844 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     844:	df 93       	push	r29
     846:	cf 93       	push	r28
     848:	00 d0       	rcall	.+0      	; 0x84a <GPIO_setupPinDirection+0x6>
     84a:	00 d0       	rcall	.+0      	; 0x84c <GPIO_setupPinDirection+0x8>
     84c:	0f 92       	push	r0
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	89 83       	std	Y+1, r24	; 0x01
     854:	6a 83       	std	Y+2, r22	; 0x02
     856:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	88 30       	cpi	r24, 0x08	; 8
     85c:	08 f0       	brcs	.+2      	; 0x860 <__stack+0x1>
     85e:	d5 c0       	rjmp	.+426    	; 0xa0a <__stack+0x1ab>
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	84 30       	cpi	r24, 0x04	; 4
     864:	08 f0       	brcs	.+2      	; 0x868 <__stack+0x9>
     866:	d1 c0       	rjmp	.+418    	; 0xa0a <__stack+0x1ab>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	28 2f       	mov	r18, r24
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	3d 83       	std	Y+5, r19	; 0x05
     870:	2c 83       	std	Y+4, r18	; 0x04
     872:	8c 81       	ldd	r24, Y+4	; 0x04
     874:	9d 81       	ldd	r25, Y+5	; 0x05
     876:	81 30       	cpi	r24, 0x01	; 1
     878:	91 05       	cpc	r25, r1
     87a:	09 f4       	brne	.+2      	; 0x87e <__stack+0x1f>
     87c:	43 c0       	rjmp	.+134    	; 0x904 <__stack+0xa5>
     87e:	2c 81       	ldd	r18, Y+4	; 0x04
     880:	3d 81       	ldd	r19, Y+5	; 0x05
     882:	22 30       	cpi	r18, 0x02	; 2
     884:	31 05       	cpc	r19, r1
     886:	2c f4       	brge	.+10     	; 0x892 <__stack+0x33>
     888:	8c 81       	ldd	r24, Y+4	; 0x04
     88a:	9d 81       	ldd	r25, Y+5	; 0x05
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	71 f0       	breq	.+28     	; 0x8ac <__stack+0x4d>
     890:	bc c0       	rjmp	.+376    	; 0xa0a <__stack+0x1ab>
     892:	2c 81       	ldd	r18, Y+4	; 0x04
     894:	3d 81       	ldd	r19, Y+5	; 0x05
     896:	22 30       	cpi	r18, 0x02	; 2
     898:	31 05       	cpc	r19, r1
     89a:	09 f4       	brne	.+2      	; 0x89e <__stack+0x3f>
     89c:	5f c0       	rjmp	.+190    	; 0x95c <__stack+0xfd>
     89e:	8c 81       	ldd	r24, Y+4	; 0x04
     8a0:	9d 81       	ldd	r25, Y+5	; 0x05
     8a2:	83 30       	cpi	r24, 0x03	; 3
     8a4:	91 05       	cpc	r25, r1
     8a6:	09 f4       	brne	.+2      	; 0x8aa <__stack+0x4b>
     8a8:	85 c0       	rjmp	.+266    	; 0x9b4 <__stack+0x155>
     8aa:	af c0       	rjmp	.+350    	; 0xa0a <__stack+0x1ab>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	a1 f4       	brne	.+40     	; 0x8da <__stack+0x7b>
			{
				SET_BIT(DDRA,pin_num);
     8b2:	aa e3       	ldi	r26, 0x3A	; 58
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	ea e3       	ldi	r30, 0x3A	; 58
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	80 81       	ld	r24, Z
     8bc:	48 2f       	mov	r20, r24
     8be:	8a 81       	ldd	r24, Y+2	; 0x02
     8c0:	28 2f       	mov	r18, r24
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	02 2e       	mov	r0, r18
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <__stack+0x71>
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	0a 94       	dec	r0
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <__stack+0x6d>
     8d4:	84 2b       	or	r24, r20
     8d6:	8c 93       	st	X, r24
     8d8:	98 c0       	rjmp	.+304    	; 0xa0a <__stack+0x1ab>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     8da:	aa e3       	ldi	r26, 0x3A	; 58
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	ea e3       	ldi	r30, 0x3A	; 58
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 81       	ld	r24, Z
     8e4:	48 2f       	mov	r20, r24
     8e6:	8a 81       	ldd	r24, Y+2	; 0x02
     8e8:	28 2f       	mov	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	02 2e       	mov	r0, r18
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	0a 94       	dec	r0
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__stack+0x95>
     8fc:	80 95       	com	r24
     8fe:	84 23       	and	r24, r20
     900:	8c 93       	st	X, r24
     902:	83 c0       	rjmp	.+262    	; 0xa0a <__stack+0x1ab>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     904:	8b 81       	ldd	r24, Y+3	; 0x03
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	a1 f4       	brne	.+40     	; 0x932 <__stack+0xd3>
			{
				SET_BIT(DDRB,pin_num);
     90a:	a7 e3       	ldi	r26, 0x37	; 55
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	e7 e3       	ldi	r30, 0x37	; 55
     910:	f0 e0       	ldi	r31, 0x00	; 0
     912:	80 81       	ld	r24, Z
     914:	48 2f       	mov	r20, r24
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	28 2f       	mov	r18, r24
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	02 2e       	mov	r0, r18
     922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0xc9>
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	0a 94       	dec	r0
     92a:	e2 f7       	brpl	.-8      	; 0x924 <__stack+0xc5>
     92c:	84 2b       	or	r24, r20
     92e:	8c 93       	st	X, r24
     930:	6c c0       	rjmp	.+216    	; 0xa0a <__stack+0x1ab>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     932:	a7 e3       	ldi	r26, 0x37	; 55
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e7 e3       	ldi	r30, 0x37	; 55
     938:	f0 e0       	ldi	r31, 0x00	; 0
     93a:	80 81       	ld	r24, Z
     93c:	48 2f       	mov	r20, r24
     93e:	8a 81       	ldd	r24, Y+2	; 0x02
     940:	28 2f       	mov	r18, r24
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	02 2e       	mov	r0, r18
     94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0xf1>
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	0a 94       	dec	r0
     952:	e2 f7       	brpl	.-8      	; 0x94c <__stack+0xed>
     954:	80 95       	com	r24
     956:	84 23       	and	r24, r20
     958:	8c 93       	st	X, r24
     95a:	57 c0       	rjmp	.+174    	; 0xa0a <__stack+0x1ab>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	81 30       	cpi	r24, 0x01	; 1
     960:	a1 f4       	brne	.+40     	; 0x98a <__stack+0x12b>
			{
				SET_BIT(DDRC,pin_num);
     962:	a4 e3       	ldi	r26, 0x34	; 52
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e4 e3       	ldi	r30, 0x34	; 52
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	80 81       	ld	r24, Z
     96c:	48 2f       	mov	r20, r24
     96e:	8a 81       	ldd	r24, Y+2	; 0x02
     970:	28 2f       	mov	r18, r24
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 2e       	mov	r0, r18
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x121>
     97c:	88 0f       	add	r24, r24
     97e:	99 1f       	adc	r25, r25
     980:	0a 94       	dec	r0
     982:	e2 f7       	brpl	.-8      	; 0x97c <__stack+0x11d>
     984:	84 2b       	or	r24, r20
     986:	8c 93       	st	X, r24
     988:	40 c0       	rjmp	.+128    	; 0xa0a <__stack+0x1ab>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     98a:	a4 e3       	ldi	r26, 0x34	; 52
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	e4 e3       	ldi	r30, 0x34	; 52
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	48 2f       	mov	r20, r24
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	28 2f       	mov	r18, r24
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	02 2e       	mov	r0, r18
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0x149>
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	0a 94       	dec	r0
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <__stack+0x145>
     9ac:	80 95       	com	r24
     9ae:	84 23       	and	r24, r20
     9b0:	8c 93       	st	X, r24
     9b2:	2b c0       	rjmp	.+86     	; 0xa0a <__stack+0x1ab>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	a1 f4       	brne	.+40     	; 0x9e2 <__stack+0x183>
			{
				SET_BIT(DDRD,pin_num);
     9ba:	a1 e3       	ldi	r26, 0x31	; 49
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	e1 e3       	ldi	r30, 0x31	; 49
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	48 2f       	mov	r20, r24
     9c6:	8a 81       	ldd	r24, Y+2	; 0x02
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	02 2e       	mov	r0, r18
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <__stack+0x179>
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	0a 94       	dec	r0
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <__stack+0x175>
     9dc:	84 2b       	or	r24, r20
     9de:	8c 93       	st	X, r24
     9e0:	14 c0       	rjmp	.+40     	; 0xa0a <__stack+0x1ab>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     9e2:	a1 e3       	ldi	r26, 0x31	; 49
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	e1 e3       	ldi	r30, 0x31	; 49
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	80 81       	ld	r24, Z
     9ec:	48 2f       	mov	r20, r24
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	28 2f       	mov	r18, r24
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	02 2e       	mov	r0, r18
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__stack+0x1a1>
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	0a 94       	dec	r0
     a02:	e2 f7       	brpl	.-8      	; 0x9fc <__stack+0x19d>
     a04:	80 95       	com	r24
     a06:	84 23       	and	r24, r20
     a08:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	cf 91       	pop	r28
     a16:	df 91       	pop	r29
     a18:	08 95       	ret

00000a1a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <GPIO_writePin+0x6>
     a20:	00 d0       	rcall	.+0      	; 0xa22 <GPIO_writePin+0x8>
     a22:	0f 92       	push	r0
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	89 83       	std	Y+1, r24	; 0x01
     a2a:	6a 83       	std	Y+2, r22	; 0x02
     a2c:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= 4 || pin_num >= 8)
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	08 f0       	brcs	.+2      	; 0xa36 <GPIO_writePin+0x1c>
     a34:	d5 c0       	rjmp	.+426    	; 0xbe0 <GPIO_writePin+0x1c6>
     a36:	8a 81       	ldd	r24, Y+2	; 0x02
     a38:	88 30       	cpi	r24, 0x08	; 8
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <GPIO_writePin+0x24>
     a3c:	d1 c0       	rjmp	.+418    	; 0xbe0 <GPIO_writePin+0x1c6>
		{
			/*do nothing*/
		}
		else
		{
			switch (port_num)
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	28 2f       	mov	r18, r24
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	3d 83       	std	Y+5, r19	; 0x05
     a46:	2c 83       	std	Y+4, r18	; 0x04
     a48:	8c 81       	ldd	r24, Y+4	; 0x04
     a4a:	9d 81       	ldd	r25, Y+5	; 0x05
     a4c:	81 30       	cpi	r24, 0x01	; 1
     a4e:	91 05       	cpc	r25, r1
     a50:	09 f4       	brne	.+2      	; 0xa54 <GPIO_writePin+0x3a>
     a52:	43 c0       	rjmp	.+134    	; 0xada <GPIO_writePin+0xc0>
     a54:	2c 81       	ldd	r18, Y+4	; 0x04
     a56:	3d 81       	ldd	r19, Y+5	; 0x05
     a58:	22 30       	cpi	r18, 0x02	; 2
     a5a:	31 05       	cpc	r19, r1
     a5c:	2c f4       	brge	.+10     	; 0xa68 <GPIO_writePin+0x4e>
     a5e:	8c 81       	ldd	r24, Y+4	; 0x04
     a60:	9d 81       	ldd	r25, Y+5	; 0x05
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	71 f0       	breq	.+28     	; 0xa82 <GPIO_writePin+0x68>
     a66:	bc c0       	rjmp	.+376    	; 0xbe0 <GPIO_writePin+0x1c6>
     a68:	2c 81       	ldd	r18, Y+4	; 0x04
     a6a:	3d 81       	ldd	r19, Y+5	; 0x05
     a6c:	22 30       	cpi	r18, 0x02	; 2
     a6e:	31 05       	cpc	r19, r1
     a70:	09 f4       	brne	.+2      	; 0xa74 <GPIO_writePin+0x5a>
     a72:	5f c0       	rjmp	.+190    	; 0xb32 <GPIO_writePin+0x118>
     a74:	8c 81       	ldd	r24, Y+4	; 0x04
     a76:	9d 81       	ldd	r25, Y+5	; 0x05
     a78:	83 30       	cpi	r24, 0x03	; 3
     a7a:	91 05       	cpc	r25, r1
     a7c:	09 f4       	brne	.+2      	; 0xa80 <GPIO_writePin+0x66>
     a7e:	85 c0       	rjmp	.+266    	; 0xb8a <GPIO_writePin+0x170>
     a80:	af c0       	rjmp	.+350    	; 0xbe0 <GPIO_writePin+0x1c6>
		{
			case PORTA_ID:
				if(value == LOGIC_HIGH)
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	81 30       	cpi	r24, 0x01	; 1
     a86:	a1 f4       	brne	.+40     	; 0xab0 <GPIO_writePin+0x96>
				{
					SET_BIT(PORTA,pin_num);
     a88:	ab e3       	ldi	r26, 0x3B	; 59
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	eb e3       	ldi	r30, 0x3B	; 59
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	48 2f       	mov	r20, r24
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	28 2f       	mov	r18, r24
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	02 2e       	mov	r0, r18
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <GPIO_writePin+0x8c>
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	0a 94       	dec	r0
     aa8:	e2 f7       	brpl	.-8      	; 0xaa2 <GPIO_writePin+0x88>
     aaa:	84 2b       	or	r24, r20
     aac:	8c 93       	st	X, r24
     aae:	98 c0       	rjmp	.+304    	; 0xbe0 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTA,pin_num);
     ab0:	ab e3       	ldi	r26, 0x3B	; 59
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	eb e3       	ldi	r30, 0x3B	; 59
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	80 81       	ld	r24, Z
     aba:	48 2f       	mov	r20, r24
     abc:	8a 81       	ldd	r24, Y+2	; 0x02
     abe:	28 2f       	mov	r18, r24
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 2e       	mov	r0, r18
     ac8:	02 c0       	rjmp	.+4      	; 0xace <GPIO_writePin+0xb4>
     aca:	88 0f       	add	r24, r24
     acc:	99 1f       	adc	r25, r25
     ace:	0a 94       	dec	r0
     ad0:	e2 f7       	brpl	.-8      	; 0xaca <GPIO_writePin+0xb0>
     ad2:	80 95       	com	r24
     ad4:	84 23       	and	r24, r20
     ad6:	8c 93       	st	X, r24
     ad8:	83 c0       	rjmp	.+262    	; 0xbe0 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTB_ID:
				if(value == LOGIC_HIGH)
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	a1 f4       	brne	.+40     	; 0xb08 <GPIO_writePin+0xee>
				{
					SET_BIT(PORTB,pin_num);
     ae0:	a8 e3       	ldi	r26, 0x38	; 56
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e8 e3       	ldi	r30, 0x38	; 56
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	80 81       	ld	r24, Z
     aea:	48 2f       	mov	r20, r24
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	28 2f       	mov	r18, r24
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 2e       	mov	r0, r18
     af8:	02 c0       	rjmp	.+4      	; 0xafe <GPIO_writePin+0xe4>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <GPIO_writePin+0xe0>
     b02:	84 2b       	or	r24, r20
     b04:	8c 93       	st	X, r24
     b06:	6c c0       	rjmp	.+216    	; 0xbe0 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTB,pin_num);
     b08:	a8 e3       	ldi	r26, 0x38	; 56
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	e8 e3       	ldi	r30, 0x38	; 56
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	80 81       	ld	r24, Z
     b12:	48 2f       	mov	r20, r24
     b14:	8a 81       	ldd	r24, Y+2	; 0x02
     b16:	28 2f       	mov	r18, r24
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	02 2e       	mov	r0, r18
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <GPIO_writePin+0x10c>
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	0a 94       	dec	r0
     b28:	e2 f7       	brpl	.-8      	; 0xb22 <GPIO_writePin+0x108>
     b2a:	80 95       	com	r24
     b2c:	84 23       	and	r24, r20
     b2e:	8c 93       	st	X, r24
     b30:	57 c0       	rjmp	.+174    	; 0xbe0 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTC_ID:
				if(value == LOGIC_HIGH)
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	81 30       	cpi	r24, 0x01	; 1
     b36:	a1 f4       	brne	.+40     	; 0xb60 <GPIO_writePin+0x146>
				{
					SET_BIT(PORTC,pin_num);
     b38:	a5 e3       	ldi	r26, 0x35	; 53
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	e5 e3       	ldi	r30, 0x35	; 53
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	48 2f       	mov	r20, r24
     b44:	8a 81       	ldd	r24, Y+2	; 0x02
     b46:	28 2f       	mov	r18, r24
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	02 2e       	mov	r0, r18
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <GPIO_writePin+0x13c>
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	0a 94       	dec	r0
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <GPIO_writePin+0x138>
     b5a:	84 2b       	or	r24, r20
     b5c:	8c 93       	st	X, r24
     b5e:	40 c0       	rjmp	.+128    	; 0xbe0 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTC,pin_num);
     b60:	a5 e3       	ldi	r26, 0x35	; 53
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e5 e3       	ldi	r30, 0x35	; 53
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	48 2f       	mov	r20, r24
     b6c:	8a 81       	ldd	r24, Y+2	; 0x02
     b6e:	28 2f       	mov	r18, r24
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	02 2e       	mov	r0, r18
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <GPIO_writePin+0x164>
     b7a:	88 0f       	add	r24, r24
     b7c:	99 1f       	adc	r25, r25
     b7e:	0a 94       	dec	r0
     b80:	e2 f7       	brpl	.-8      	; 0xb7a <GPIO_writePin+0x160>
     b82:	80 95       	com	r24
     b84:	84 23       	and	r24, r20
     b86:	8c 93       	st	X, r24
     b88:	2b c0       	rjmp	.+86     	; 0xbe0 <GPIO_writePin+0x1c6>
				}
				break;
			case PORTD_ID:
				if(value == LOGIC_HIGH)
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	a1 f4       	brne	.+40     	; 0xbb8 <GPIO_writePin+0x19e>
				{
					SET_BIT(PORTD,pin_num);
     b90:	a2 e3       	ldi	r26, 0x32	; 50
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	e2 e3       	ldi	r30, 0x32	; 50
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	48 2f       	mov	r20, r24
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	28 2f       	mov	r18, r24
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	02 2e       	mov	r0, r18
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <GPIO_writePin+0x194>
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	0a 94       	dec	r0
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <GPIO_writePin+0x190>
     bb2:	84 2b       	or	r24, r20
     bb4:	8c 93       	st	X, r24
     bb6:	14 c0       	rjmp	.+40     	; 0xbe0 <GPIO_writePin+0x1c6>
				}
				else
				{
					CLEAR_BIT(PORTD,pin_num);
     bb8:	a2 e3       	ldi	r26, 0x32	; 50
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	e2 e3       	ldi	r30, 0x32	; 50
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	48 2f       	mov	r20, r24
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	28 2f       	mov	r18, r24
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	02 2e       	mov	r0, r18
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <GPIO_writePin+0x1bc>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	0a 94       	dec	r0
     bd8:	e2 f7       	brpl	.-8      	; 0xbd2 <GPIO_writePin+0x1b8>
     bda:	80 95       	com	r24
     bdc:	84 23       	and	r24, r20
     bde:	8c 93       	st	X, r24
				}
				break;
		}
		}
}
     be0:	0f 90       	pop	r0
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	0f 90       	pop	r0
     be8:	0f 90       	pop	r0
     bea:	cf 91       	pop	r28
     bec:	df 91       	pop	r29
     bee:	08 95       	ret

00000bf0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     bf0:	df 93       	push	r29
     bf2:	cf 93       	push	r28
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <GPIO_readPin+0x6>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <GPIO_readPin+0x8>
     bf8:	0f 92       	push	r0
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	8a 83       	std	Y+2, r24	; 0x02
     c00:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value;
	if(port_num >= 4 || pin_num >= 8)
     c02:	8a 81       	ldd	r24, Y+2	; 0x02
     c04:	84 30       	cpi	r24, 0x04	; 4
     c06:	18 f4       	brcc	.+6      	; 0xc0e <GPIO_readPin+0x1e>
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	88 30       	cpi	r24, 0x08	; 8
     c0c:	10 f0       	brcs	.+4      	; 0xc12 <GPIO_readPin+0x22>
	{
		value = LOGIC_LOW;
     c0e:	19 82       	std	Y+1, r1	; 0x01
     c10:	80 c0       	rjmp	.+256    	; 0xd12 <GPIO_readPin+0x122>
	}
	else
	{
		switch (port_num)
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	3d 83       	std	Y+5, r19	; 0x05
     c1a:	2c 83       	std	Y+4, r18	; 0x04
     c1c:	4c 81       	ldd	r20, Y+4	; 0x04
     c1e:	5d 81       	ldd	r21, Y+5	; 0x05
     c20:	41 30       	cpi	r20, 0x01	; 1
     c22:	51 05       	cpc	r21, r1
     c24:	79 f1       	breq	.+94     	; 0xc84 <GPIO_readPin+0x94>
     c26:	8c 81       	ldd	r24, Y+4	; 0x04
     c28:	9d 81       	ldd	r25, Y+5	; 0x05
     c2a:	82 30       	cpi	r24, 0x02	; 2
     c2c:	91 05       	cpc	r25, r1
     c2e:	34 f4       	brge	.+12     	; 0xc3c <GPIO_readPin+0x4c>
     c30:	2c 81       	ldd	r18, Y+4	; 0x04
     c32:	3d 81       	ldd	r19, Y+5	; 0x05
     c34:	21 15       	cp	r18, r1
     c36:	31 05       	cpc	r19, r1
     c38:	69 f0       	breq	.+26     	; 0xc54 <GPIO_readPin+0x64>
     c3a:	6b c0       	rjmp	.+214    	; 0xd12 <GPIO_readPin+0x122>
     c3c:	4c 81       	ldd	r20, Y+4	; 0x04
     c3e:	5d 81       	ldd	r21, Y+5	; 0x05
     c40:	42 30       	cpi	r20, 0x02	; 2
     c42:	51 05       	cpc	r21, r1
     c44:	b9 f1       	breq	.+110    	; 0xcb4 <GPIO_readPin+0xc4>
     c46:	8c 81       	ldd	r24, Y+4	; 0x04
     c48:	9d 81       	ldd	r25, Y+5	; 0x05
     c4a:	83 30       	cpi	r24, 0x03	; 3
     c4c:	91 05       	cpc	r25, r1
     c4e:	09 f4       	brne	.+2      	; 0xc52 <GPIO_readPin+0x62>
     c50:	49 c0       	rjmp	.+146    	; 0xce4 <GPIO_readPin+0xf4>
     c52:	5f c0       	rjmp	.+190    	; 0xd12 <GPIO_readPin+0x122>
	{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     c54:	e9 e3       	ldi	r30, 0x39	; 57
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 2f       	mov	r24, r24
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	a9 01       	movw	r20, r18
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <GPIO_readPin+0x7c>
     c68:	55 95       	asr	r21
     c6a:	47 95       	ror	r20
     c6c:	8a 95       	dec	r24
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <GPIO_readPin+0x78>
     c70:	ca 01       	movw	r24, r20
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	90 70       	andi	r25, 0x00	; 0
     c76:	88 23       	and	r24, r24
     c78:	19 f0       	breq	.+6      	; 0xc80 <GPIO_readPin+0x90>
			{
				value =  LOGIC_HIGH;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	89 83       	std	Y+1, r24	; 0x01
     c7e:	49 c0       	rjmp	.+146    	; 0xd12 <GPIO_readPin+0x122>
			}
			else
				value = LOGIC_LOW;
     c80:	19 82       	std	Y+1, r1	; 0x01
     c82:	47 c0       	rjmp	.+142    	; 0xd12 <GPIO_readPin+0x122>
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     c84:	e6 e3       	ldi	r30, 0x36	; 54
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	28 2f       	mov	r18, r24
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	88 2f       	mov	r24, r24
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a9 01       	movw	r20, r18
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <GPIO_readPin+0xac>
     c98:	55 95       	asr	r21
     c9a:	47 95       	ror	r20
     c9c:	8a 95       	dec	r24
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <GPIO_readPin+0xa8>
     ca0:	ca 01       	movw	r24, r20
     ca2:	81 70       	andi	r24, 0x01	; 1
     ca4:	90 70       	andi	r25, 0x00	; 0
     ca6:	88 23       	and	r24, r24
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <GPIO_readPin+0xc0>
			{
				value = LOGIC_HIGH;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	31 c0       	rjmp	.+98     	; 0xd12 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
     cb0:	19 82       	std	Y+1, r1	; 0x01
     cb2:	2f c0       	rjmp	.+94     	; 0xd12 <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     cb4:	e3 e3       	ldi	r30, 0x33	; 51
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a9 01       	movw	r20, r18
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <GPIO_readPin+0xdc>
     cc8:	55 95       	asr	r21
     cca:	47 95       	ror	r20
     ccc:	8a 95       	dec	r24
     cce:	e2 f7       	brpl	.-8      	; 0xcc8 <GPIO_readPin+0xd8>
     cd0:	ca 01       	movw	r24, r20
     cd2:	81 70       	andi	r24, 0x01	; 1
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	88 23       	and	r24, r24
     cd8:	19 f0       	breq	.+6      	; 0xce0 <GPIO_readPin+0xf0>
			{
				value = LOGIC_HIGH;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	19 c0       	rjmp	.+50     	; 0xd12 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
     ce0:	19 82       	std	Y+1, r1	; 0x01
     ce2:	17 c0       	rjmp	.+46     	; 0xd12 <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     ce4:	e0 e3       	ldi	r30, 0x30	; 48
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	a9 01       	movw	r20, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <GPIO_readPin+0x10c>
     cf8:	55 95       	asr	r21
     cfa:	47 95       	ror	r20
     cfc:	8a 95       	dec	r24
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <GPIO_readPin+0x108>
     d00:	ca 01       	movw	r24, r20
     d02:	81 70       	andi	r24, 0x01	; 1
     d04:	90 70       	andi	r25, 0x00	; 0
     d06:	88 23       	and	r24, r24
     d08:	19 f0       	breq	.+6      	; 0xd10 <GPIO_readPin+0x120>
			{
				value = LOGIC_HIGH;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <GPIO_readPin+0x122>
			}
			else
			{
				value = LOGIC_LOW;
     d10:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
	}
	}
	return value;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	08 95       	ret

00000d24 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
     d24:	df 93       	push	r29
     d26:	cf 93       	push	r28
     d28:	00 d0       	rcall	.+0      	; 0xd2a <GPIO_setupPortDirection+0x6>
     d2a:	00 d0       	rcall	.+0      	; 0xd2c <GPIO_setupPortDirection+0x8>
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	84 30       	cpi	r24, 0x04	; 4
     d38:	90 f5       	brcc	.+100    	; 0xd9e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	3c 83       	std	Y+4, r19	; 0x04
     d42:	2b 83       	std	Y+3, r18	; 0x03
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	81 30       	cpi	r24, 0x01	; 1
     d4a:	91 05       	cpc	r25, r1
     d4c:	d1 f0       	breq	.+52     	; 0xd82 <GPIO_setupPortDirection+0x5e>
     d4e:	2b 81       	ldd	r18, Y+3	; 0x03
     d50:	3c 81       	ldd	r19, Y+4	; 0x04
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	2c f4       	brge	.+10     	; 0xd62 <GPIO_setupPortDirection+0x3e>
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	61 f0       	breq	.+24     	; 0xd78 <GPIO_setupPortDirection+0x54>
     d60:	1e c0       	rjmp	.+60     	; 0xd9e <GPIO_setupPortDirection+0x7a>
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	22 30       	cpi	r18, 0x02	; 2
     d68:	31 05       	cpc	r19, r1
     d6a:	81 f0       	breq	.+32     	; 0xd8c <GPIO_setupPortDirection+0x68>
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	91 05       	cpc	r25, r1
     d74:	81 f0       	breq	.+32     	; 0xd96 <GPIO_setupPortDirection+0x72>
     d76:	13 c0       	rjmp	.+38     	; 0xd9e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
     d78:	ea e3       	ldi	r30, 0x3A	; 58
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	80 83       	st	Z, r24
     d80:	0e c0       	rjmp	.+28     	; 0xd9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
     d82:	e7 e3       	ldi	r30, 0x37	; 55
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	80 83       	st	Z, r24
     d8a:	09 c0       	rjmp	.+18     	; 0xd9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
     d8c:	e4 e3       	ldi	r30, 0x34	; 52
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	80 83       	st	Z, r24
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
     d96:	e1 e3       	ldi	r30, 0x31	; 49
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	80 83       	st	Z, r24
			break;
		}
	}
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <GPIO_writePort+0x6>
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <GPIO_writePort+0x8>
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= 4)
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	90 f5       	brcc	.+100    	; 0xe26 <GPIO_writePort+0x7a>
	{
		/* do nothing */
	}
	else
	{
		switch (port_num)
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	28 2f       	mov	r18, r24
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	3c 83       	std	Y+4, r19	; 0x04
     dca:	2b 83       	std	Y+3, r18	; 0x03
     dcc:	8b 81       	ldd	r24, Y+3	; 0x03
     dce:	9c 81       	ldd	r25, Y+4	; 0x04
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	91 05       	cpc	r25, r1
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <GPIO_writePort+0x5e>
     dd6:	2b 81       	ldd	r18, Y+3	; 0x03
     dd8:	3c 81       	ldd	r19, Y+4	; 0x04
     dda:	22 30       	cpi	r18, 0x02	; 2
     ddc:	31 05       	cpc	r19, r1
     dde:	2c f4       	brge	.+10     	; 0xdea <GPIO_writePort+0x3e>
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	61 f0       	breq	.+24     	; 0xe00 <GPIO_writePort+0x54>
     de8:	1e c0       	rjmp	.+60     	; 0xe26 <GPIO_writePort+0x7a>
     dea:	2b 81       	ldd	r18, Y+3	; 0x03
     dec:	3c 81       	ldd	r19, Y+4	; 0x04
     dee:	22 30       	cpi	r18, 0x02	; 2
     df0:	31 05       	cpc	r19, r1
     df2:	81 f0       	breq	.+32     	; 0xe14 <GPIO_writePort+0x68>
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	81 f0       	breq	.+32     	; 0xe1e <GPIO_writePort+0x72>
     dfe:	13 c0       	rjmp	.+38     	; 0xe26 <GPIO_writePort+0x7a>
		{
			case PORTA_ID:
				PORTA = value;
     e00:	eb e3       	ldi	r30, 0x3B	; 59
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	80 83       	st	Z, r24
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <GPIO_writePort+0x7a>
				break;
			case PORTB_ID:
				PORTB = value;
     e0a:	e8 e3       	ldi	r30, 0x38	; 56
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	80 83       	st	Z, r24
     e12:	09 c0       	rjmp	.+18     	; 0xe26 <GPIO_writePort+0x7a>
				break;
			case PORTC_ID:
				PORTC = value;
     e14:	e5 e3       	ldi	r30, 0x35	; 53
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	80 83       	st	Z, r24
     e1c:	04 c0       	rjmp	.+8      	; 0xe26 <GPIO_writePort+0x7a>
				break;
			case PORTD_ID:
				PORTD = value;
     e1e:	e2 e3       	ldi	r30, 0x32	; 50
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	80 83       	st	Z, r24
				break;
		}
	}
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <GPIO_readPort+0x6>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <GPIO_readPort+0x8>
     e3c:	cd b7       	in	r28, 0x3d	; 61
     e3e:	de b7       	in	r29, 0x3e	; 62
     e40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value;
	if(port_num >= 4)
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	84 30       	cpi	r24, 0x04	; 4
     e46:	10 f0       	brcs	.+4      	; 0xe4c <GPIO_readPort+0x18>
	{
		value = 0;
     e48:	19 82       	std	Y+1, r1	; 0x01
     e4a:	32 c0       	rjmp	.+100    	; 0xeb0 <GPIO_readPort+0x7c>
	}
	else
	{
		switch (port_num)
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3c 83       	std	Y+4, r19	; 0x04
     e54:	2b 83       	std	Y+3, r18	; 0x03
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	d1 f0       	breq	.+52     	; 0xe94 <GPIO_readPort+0x60>
     e60:	2b 81       	ldd	r18, Y+3	; 0x03
     e62:	3c 81       	ldd	r19, Y+4	; 0x04
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	2c f4       	brge	.+10     	; 0xe74 <GPIO_readPort+0x40>
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	61 f0       	breq	.+24     	; 0xe8a <GPIO_readPort+0x56>
     e72:	1e c0       	rjmp	.+60     	; 0xeb0 <GPIO_readPort+0x7c>
     e74:	2b 81       	ldd	r18, Y+3	; 0x03
     e76:	3c 81       	ldd	r19, Y+4	; 0x04
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	81 f0       	breq	.+32     	; 0xe9e <GPIO_readPort+0x6a>
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	91 05       	cpc	r25, r1
     e86:	81 f0       	breq	.+32     	; 0xea8 <GPIO_readPort+0x74>
     e88:	13 c0       	rjmp	.+38     	; 0xeb0 <GPIO_readPort+0x7c>
		{
			case PORTA_ID:
				value = PINA;
     e8a:	e9 e3       	ldi	r30, 0x39	; 57
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	0e c0       	rjmp	.+28     	; 0xeb0 <GPIO_readPort+0x7c>
				break;
			case PORTB_ID:
				value = PINB;
     e94:	e6 e3       	ldi	r30, 0x36	; 54
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <GPIO_readPort+0x7c>
				break;
			case PORTC_ID:
				value = PINC;
     e9e:	e3 e3       	ldi	r30, 0x33	; 51
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <GPIO_readPort+0x7c>
				break;
			case PORTD_ID:
				value = PIND;
     ea8:	e0 e3       	ldi	r30, 0x30	; 48
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	}
	return value;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <__vector_11>:
 * 					ISRs of the Timers 0,1,2 to call back the function in the upper abstraction layer
 * [No Inputs]:
 * [No Returns]:
 */
ISR(TIMER0_OVF_vect)
{
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_Ovf_g_callBackFunction_Ptr != NULL_PTR)
     eea:	80 91 83 00 	lds	r24, 0x0083
     eee:	90 91 84 00 	lds	r25, 0x0084
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	29 f0       	breq	.+10     	; 0xf00 <__vector_11+0x40>
	{
		(*TIMER0_Ovf_g_callBackFunction_Ptr)();
     ef6:	e0 91 83 00 	lds	r30, 0x0083
     efa:	f0 91 84 00 	lds	r31, 0x0084
     efe:	09 95       	icall
	}
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <__vector_10>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER0_COMP_vect)
{
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_Comp_g_callBackFunction_Ptr != NULL_PTR)
     f50:	80 91 81 00 	lds	r24, 0x0081
     f54:	90 91 82 00 	lds	r25, 0x0082
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	29 f0       	breq	.+10     	; 0xf66 <__vector_10+0x40>
	{
		(*TIMER0_Comp_g_callBackFunction_Ptr)();
     f5c:	e0 91 81 00 	lds	r30, 0x0081
     f60:	f0 91 82 00 	lds	r31, 0x0082
     f64:	09 95       	icall
	}
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <__vector_9>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER1_OVF_vect)
{
     f8c:	1f 92       	push	r1
     f8e:	0f 92       	push	r0
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	0f 92       	push	r0
     f94:	11 24       	eor	r1, r1
     f96:	2f 93       	push	r18
     f98:	3f 93       	push	r19
     f9a:	4f 93       	push	r20
     f9c:	5f 93       	push	r21
     f9e:	6f 93       	push	r22
     fa0:	7f 93       	push	r23
     fa2:	8f 93       	push	r24
     fa4:	9f 93       	push	r25
     fa6:	af 93       	push	r26
     fa8:	bf 93       	push	r27
     faa:	ef 93       	push	r30
     fac:	ff 93       	push	r31
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_Ovf_g_callBackFunction_Ptr != NULL_PTR)
     fb6:	80 91 87 00 	lds	r24, 0x0087
     fba:	90 91 88 00 	lds	r25, 0x0088
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	29 f0       	breq	.+10     	; 0xfcc <__vector_9+0x40>
	{
		(*TIMER1_Ovf_g_callBackFunction_Ptr)();
     fc2:	e0 91 87 00 	lds	r30, 0x0087
     fc6:	f0 91 88 00 	lds	r31, 0x0088
     fca:	09 95       	icall
	}
}
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_7>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER1_COMPA_vect)
{
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	2f 93       	push	r18
     ffe:	3f 93       	push	r19
    1000:	4f 93       	push	r20
    1002:	5f 93       	push	r21
    1004:	6f 93       	push	r22
    1006:	7f 93       	push	r23
    1008:	8f 93       	push	r24
    100a:	9f 93       	push	r25
    100c:	af 93       	push	r26
    100e:	bf 93       	push	r27
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_Comp_g_callBackFunction_Ptr != NULL_PTR)
    101c:	80 91 85 00 	lds	r24, 0x0085
    1020:	90 91 86 00 	lds	r25, 0x0086
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	29 f0       	breq	.+10     	; 0x1032 <__vector_7+0x40>
	{
		(*TIMER1_Comp_g_callBackFunction_Ptr)();
    1028:	e0 91 85 00 	lds	r30, 0x0085
    102c:	f0 91 86 00 	lds	r31, 0x0086
    1030:	09 95       	icall
	}
}
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti

00001058 <__vector_5>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER2_OVF_vect)
{
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	11 24       	eor	r1, r1
    1062:	2f 93       	push	r18
    1064:	3f 93       	push	r19
    1066:	4f 93       	push	r20
    1068:	5f 93       	push	r21
    106a:	6f 93       	push	r22
    106c:	7f 93       	push	r23
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	af 93       	push	r26
    1074:	bf 93       	push	r27
    1076:	ef 93       	push	r30
    1078:	ff 93       	push	r31
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_Ovf_g_callBackFunction_Ptr != NULL_PTR)
    1082:	80 91 8b 00 	lds	r24, 0x008B
    1086:	90 91 8c 00 	lds	r25, 0x008C
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	29 f0       	breq	.+10     	; 0x1098 <__vector_5+0x40>
	{
		(*TIMER2_Ovf_g_callBackFunction_Ptr)();
    108e:	e0 91 8b 00 	lds	r30, 0x008B
    1092:	f0 91 8c 00 	lds	r31, 0x008C
    1096:	09 95       	icall
	}
}
    1098:	cf 91       	pop	r28
    109a:	df 91       	pop	r29
    109c:	ff 91       	pop	r31
    109e:	ef 91       	pop	r30
    10a0:	bf 91       	pop	r27
    10a2:	af 91       	pop	r26
    10a4:	9f 91       	pop	r25
    10a6:	8f 91       	pop	r24
    10a8:	7f 91       	pop	r23
    10aa:	6f 91       	pop	r22
    10ac:	5f 91       	pop	r21
    10ae:	4f 91       	pop	r20
    10b0:	3f 91       	pop	r19
    10b2:	2f 91       	pop	r18
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	0f 90       	pop	r0
    10ba:	1f 90       	pop	r1
    10bc:	18 95       	reti

000010be <__vector_4>:
/*---------------------------------------------------------------------------------------------------------------*/
ISR(TIMER2_COMP_vect)
{
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	11 24       	eor	r1, r1
    10c8:	2f 93       	push	r18
    10ca:	3f 93       	push	r19
    10cc:	4f 93       	push	r20
    10ce:	5f 93       	push	r21
    10d0:	6f 93       	push	r22
    10d2:	7f 93       	push	r23
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	af 93       	push	r26
    10da:	bf 93       	push	r27
    10dc:	ef 93       	push	r30
    10de:	ff 93       	push	r31
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER2_Comp_g_callBackFunction_Ptr != NULL_PTR)
    10e8:	80 91 89 00 	lds	r24, 0x0089
    10ec:	90 91 8a 00 	lds	r25, 0x008A
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	29 f0       	breq	.+10     	; 0x10fe <__vector_4+0x40>
	{
		(*TIMER2_Comp_g_callBackFunction_Ptr)();
    10f4:	e0 91 89 00 	lds	r30, 0x0089
    10f8:	f0 91 8a 00 	lds	r31, 0x008A
    10fc:	09 95       	icall
	}
}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <TIMER0_init>:
 * [Inputs]:		TIMER0 Configuration structure by address
 *
 * [No Returns]:
 */
void TIMER0_init(TIMER_CONFIG_STRUCT *TIMER0_Config_Type)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	00 d0       	rcall	.+0      	; 0x112a <TIMER0_init+0x6>
    112a:	00 d0       	rcall	.+0      	; 0x112c <TIMER0_init+0x8>
    112c:	00 d0       	rcall	.+0      	; 0x112e <TIMER0_init+0xa>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = TIMER0_Config_Type->Initial_value8;	/*Initial Value*/
    1136:	a2 e5       	ldi	r26, 0x52	; 82
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e9 81       	ldd	r30, Y+1	; 0x01
    113c:	fa 81       	ldd	r31, Y+2	; 0x02
    113e:	80 81       	ld	r24, Z
    1140:	8c 93       	st	X, r24
	OCR0  = TIMER0_Config_Type->Compare_Value8;	/*Compare Value*/
    1142:	ac e5       	ldi	r26, 0x5C	; 92
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e9 81       	ldd	r30, Y+1	; 0x01
    1148:	fa 81       	ldd	r31, Y+2	; 0x02
    114a:	81 81       	ldd	r24, Z+1	; 0x01
    114c:	8c 93       	st	X, r24
	/*switch to choose clock pre-scaler*/
	switch(TIMER0_Config_Type->TIMER_Prescaler)
    114e:	e9 81       	ldd	r30, Y+1	; 0x01
    1150:	fa 81       	ldd	r31, Y+2	; 0x02
    1152:	86 81       	ldd	r24, Z+6	; 0x06
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3e 83       	std	Y+6, r19	; 0x06
    115a:	2d 83       	std	Y+5, r18	; 0x05
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	86 30       	cpi	r24, 0x06	; 6
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <TIMER0_init+0x44>
    1166:	46 c0       	rjmp	.+140    	; 0x11f4 <TIMER0_init+0xd0>
    1168:	2d 81       	ldd	r18, Y+5	; 0x05
    116a:	3e 81       	ldd	r19, Y+6	; 0x06
    116c:	27 30       	cpi	r18, 0x07	; 7
    116e:	31 05       	cpc	r19, r1
    1170:	84 f4       	brge	.+32     	; 0x1192 <TIMER0_init+0x6e>
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	91 05       	cpc	r25, r1
    117a:	29 f1       	breq	.+74     	; 0x11c6 <TIMER0_init+0xa2>
    117c:	2d 81       	ldd	r18, Y+5	; 0x05
    117e:	3e 81       	ldd	r19, Y+6	; 0x06
    1180:	24 30       	cpi	r18, 0x04	; 4
    1182:	31 05       	cpc	r19, r1
    1184:	41 f1       	breq	.+80     	; 0x11d6 <TIMER0_init+0xb2>
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	81 30       	cpi	r24, 0x01	; 1
    118c:	91 05       	cpc	r25, r1
    118e:	99 f0       	breq	.+38     	; 0x11b6 <TIMER0_init+0x92>
    1190:	7a c0       	rjmp	.+244    	; 0x1286 <TIMER0_init+0x162>
    1192:	2d 81       	ldd	r18, Y+5	; 0x05
    1194:	3e 81       	ldd	r19, Y+6	; 0x06
    1196:	28 30       	cpi	r18, 0x08	; 8
    1198:	31 05       	cpc	r19, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <TIMER0_init+0x7a>
    119c:	42 c0       	rjmp	.+132    	; 0x1222 <TIMER0_init+0xfe>
    119e:	8d 81       	ldd	r24, Y+5	; 0x05
    11a0:	9e 81       	ldd	r25, Y+6	; 0x06
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	91 05       	cpc	r25, r1
    11a6:	74 f1       	brlt	.+92     	; 0x1204 <TIMER0_init+0xe0>
    11a8:	2d 81       	ldd	r18, Y+5	; 0x05
    11aa:	3e 81       	ldd	r19, Y+6	; 0x06
    11ac:	29 30       	cpi	r18, 0x09	; 9
    11ae:	31 05       	cpc	r19, r1
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <TIMER0_init+0x90>
    11b2:	4d c0       	rjmp	.+154    	; 0x124e <TIMER0_init+0x12a>
    11b4:	68 c0       	rjmp	.+208    	; 0x1286 <TIMER0_init+0x162>
	{
		case F_CPU_CLOCK:
			SET_BIT(TCCR0,CS00);
    11b6:	a3 e5       	ldi	r26, 0x53	; 83
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e3 e5       	ldi	r30, 0x53	; 83
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	81 60       	ori	r24, 0x01	; 1
    11c2:	8c 93       	st	X, r24
    11c4:	60 c0       	rjmp	.+192    	; 0x1286 <TIMER0_init+0x162>
			break;
		case F_CPU_N8:
			SET_BIT(TCCR0,CS01);
    11c6:	a3 e5       	ldi	r26, 0x53	; 83
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e3 e5       	ldi	r30, 0x53	; 83
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	82 60       	ori	r24, 0x02	; 2
    11d2:	8c 93       	st	X, r24
    11d4:	58 c0       	rjmp	.+176    	; 0x1286 <TIMER0_init+0x162>
			break;
		case F_CPU_N64:
			SET_BIT(TCCR0,CS00);
    11d6:	a3 e5       	ldi	r26, 0x53	; 83
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e3 e5       	ldi	r30, 0x53	; 83
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	81 60       	ori	r24, 0x01	; 1
    11e2:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
    11e4:	a3 e5       	ldi	r26, 0x53	; 83
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e3 e5       	ldi	r30, 0x53	; 83
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	82 60       	ori	r24, 0x02	; 2
    11f0:	8c 93       	st	X, r24
    11f2:	49 c0       	rjmp	.+146    	; 0x1286 <TIMER0_init+0x162>
			break;
		case F_CPU_N256:
			SET_BIT(TCCR0,CS02);
    11f4:	a3 e5       	ldi	r26, 0x53	; 83
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e3 e5       	ldi	r30, 0x53	; 83
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	84 60       	ori	r24, 0x04	; 4
    1200:	8c 93       	st	X, r24
    1202:	41 c0       	rjmp	.+130    	; 0x1286 <TIMER0_init+0x162>
			break;
		case F_CPU_N1024:
			SET_BIT(TCCR0,CS00);
    1204:	a3 e5       	ldi	r26, 0x53	; 83
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e3 e5       	ldi	r30, 0x53	; 83
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    1212:	a3 e5       	ldi	r26, 0x53	; 83
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e3 e5       	ldi	r30, 0x53	; 83
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	84 60       	ori	r24, 0x04	; 4
    121e:	8c 93       	st	X, r24
    1220:	32 c0       	rjmp	.+100    	; 0x1286 <TIMER0_init+0x162>
			break;
		case T0_EXTERNAL_CLOCK_FALLING:
			SET_BIT(TCCR0,CS01);
    1222:	a3 e5       	ldi	r26, 0x53	; 83
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e3 e5       	ldi	r30, 0x53	; 83
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	82 60       	ori	r24, 0x02	; 2
    122e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    1230:	a3 e5       	ldi	r26, 0x53	; 83
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e3 e5       	ldi	r30, 0x53	; 83
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	84 60       	ori	r24, 0x04	; 4
    123c:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,PB0);
    123e:	a7 e3       	ldi	r26, 0x37	; 55
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e7 e3       	ldi	r30, 0x37	; 55
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	8e 7f       	andi	r24, 0xFE	; 254
    124a:	8c 93       	st	X, r24
    124c:	1c c0       	rjmp	.+56     	; 0x1286 <TIMER0_init+0x162>
			break;
		case T0_EXTERNAL_CLOCK_RISING:
			SET_BIT(TCCR0,CS00);
    124e:	a3 e5       	ldi	r26, 0x53	; 83
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e3 e5       	ldi	r30, 0x53	; 83
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS01);
    125c:	a3 e5       	ldi	r26, 0x53	; 83
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e3 e5       	ldi	r30, 0x53	; 83
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	8c 93       	st	X, r24
			SET_BIT(TCCR0,CS02);
    126a:	a3 e5       	ldi	r26, 0x53	; 83
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e3 e5       	ldi	r30, 0x53	; 83
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	84 60       	ori	r24, 0x04	; 4
    1276:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,PB0);
    1278:	a7 e3       	ldi	r26, 0x37	; 55
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e7 e3       	ldi	r30, 0x37	; 55
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8e 7f       	andi	r24, 0xFE	; 254
    1284:	8c 93       	st	X, r24
			break;
	}
	/*switch to choose mode*/
	switch(TIMER0_Config_Type->TIMER_Mode)
    1286:	e9 81       	ldd	r30, Y+1	; 0x01
    1288:	fa 81       	ldd	r31, Y+2	; 0x02
    128a:	87 81       	ldd	r24, Z+7	; 0x07
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3c 83       	std	Y+4, r19	; 0x04
    1292:	2b 83       	std	Y+3, r18	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	c9 f0       	breq	.+50     	; 0x12d0 <TIMER0_init+0x1ac>
    129e:	2b 81       	ldd	r18, Y+3	; 0x03
    12a0:	3c 81       	ldd	r19, Y+4	; 0x04
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	51 f1       	breq	.+84     	; 0x12fc <TIMER0_init+0x1d8>
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <TIMER0_init+0x18e>
    12b0:	41 c0       	rjmp	.+130    	; 0x1334 <TIMER0_init+0x210>
	{
		case OVERFLOW_MODE:
			SET_BIT(TIMSK,TOIE0);	/*Enable Overflow Mode Interrupt Module*/
    12b2:	a9 e5       	ldi	r26, 0x59	; 89
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e9 e5       	ldi	r30, 0x59	; 89
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	81 60       	ori	r24, 0x01	; 1
    12be:	8c 93       	st	X, r24
			SET_BIT(TCCR0,FOC0);
    12c0:	a3 e5       	ldi	r26, 0x53	; 83
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e3 e5       	ldi	r30, 0x53	; 83
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	8c 93       	st	X, r24
    12ce:	32 c0       	rjmp	.+100    	; 0x1334 <TIMER0_init+0x210>
			break;
		case COMPARE_MODE:
			SET_BIT(TIMSK,OCIE0);	/*Enable Compare Mode Interrupt Module*/
    12d0:	a9 e5       	ldi	r26, 0x59	; 89
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e9 e5       	ldi	r30, 0x59	; 89
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	82 60       	ori	r24, 0x02	; 2
    12dc:	8c 93       	st	X, r24
			SET_BIT(TCCR0,FOC0);
    12de:	a3 e5       	ldi	r26, 0x53	; 83
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e3 e5       	ldi	r30, 0x53	; 83
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    12ec:	a3 e5       	ldi	r26, 0x53	; 83
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e3 e5       	ldi	r30, 0x53	; 83
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	88 60       	ori	r24, 0x08	; 8
    12f8:	8c 93       	st	X, r24
    12fa:	1c c0       	rjmp	.+56     	; 0x1334 <TIMER0_init+0x210>
			break;
		case PWM_MODE:				/*FPWM=F_CPU/N*256*/
			SET_BIT(DDRB,PB3); 		/*Make OC0 as output pin*/
    12fc:	a7 e3       	ldi	r26, 0x37	; 55
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e7 e3       	ldi	r30, 0x37	; 55
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	88 60       	ori	r24, 0x08	; 8
    1308:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM00);
    130a:	a3 e5       	ldi	r26, 0x53	; 83
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e3 e5       	ldi	r30, 0x53	; 83
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 64       	ori	r24, 0x40	; 64
    1316:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01);
    1318:	a3 e5       	ldi	r26, 0x53	; 83
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e3 e5       	ldi	r30, 0x53	; 83
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	88 60       	ori	r24, 0x08	; 8
    1324:	8c 93       	st	X, r24
			SET_BIT(TCCR0,COM01);	/*Non-Inverting Mode*/
    1326:	a3 e5       	ldi	r26, 0x53	; 83
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e3 e5       	ldi	r30, 0x53	; 83
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	80 62       	ori	r24, 0x20	; 32
    1332:	8c 93       	st	X, r24
			break;
	}
}
    1334:	26 96       	adiw	r28, 0x06	; 6
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <TIMER0_setCallBackFunctionsOVF>:
 * [Inputs]:		Pointers to functions that will be called from Timer0 ISR
 *
 * [No Returns]:
 */
void TIMER0_setCallBackFunctionsOVF(void(*a_FunctionPtr_OVF)(void))
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	00 d0       	rcall	.+0      	; 0x134c <TIMER0_setCallBackFunctionsOVF+0x6>
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	9a 83       	std	Y+2, r25	; 0x02
    1352:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Ovf_g_callBackFunction_Ptr = a_FunctionPtr_OVF;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	9a 81       	ldd	r25, Y+2	; 0x02
    1358:	90 93 84 00 	sts	0x0084, r25
    135c:	80 93 83 00 	sts	0x0083, r24
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	cf 91       	pop	r28
    1366:	df 91       	pop	r29
    1368:	08 95       	ret

0000136a <TIMER0_setCallBackFunctionCOMP>:
void TIMER0_setCallBackFunctionCOMP(void(*a_FunctionPtr_COMP)(void))
{
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	00 d0       	rcall	.+0      	; 0x1370 <TIMER0_setCallBackFunctionCOMP+0x6>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9a 83       	std	Y+2, r25	; 0x02
    1376:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_Comp_g_callBackFunction_Ptr = a_FunctionPtr_COMP;
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	9a 81       	ldd	r25, Y+2	; 0x02
    137c:	90 93 82 00 	sts	0x0082, r25
    1380:	80 93 81 00 	sts	0x0081, r24
}
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <TIMER0_Deinit>:
 * 					Function to turn off Timer0
 * [No Inputs]:
 * [No Returns]:
 */
void TIMER0_Deinit(void)
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,PB0);		/*Detach T0*/
    1396:	a7 e3       	ldi	r26, 0x37	; 55
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e7 e3       	ldi	r30, 0x37	; 55
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	81 60       	ori	r24, 0x01	; 1
    13a2:	8c 93       	st	X, r24
	CLEAR_BIT(DDRB,PB3);	/*Detach OC0*/
    13a4:	a7 e3       	ldi	r26, 0x37	; 55
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e7 e3       	ldi	r30, 0x37	; 55
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	87 7f       	andi	r24, 0xF7	; 247
    13b0:	8c 93       	st	X, r24
	TCCR0 = 0;				/*Clear Timer0 Control Register*/
    13b2:	e3 e5       	ldi	r30, 0x53	; 83
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE0); /*Disable Overflow Mode Interrupt Module*/
    13b8:	a9 e5       	ldi	r26, 0x59	; 89
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e9 e5       	ldi	r30, 0x59	; 89
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8d 7f       	andi	r24, 0xFD	; 253
    13c4:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE0); /*Disable Compare Mode Interrupt Module*/
    13c6:	a9 e5       	ldi	r26, 0x59	; 89
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e9 e5       	ldi	r30, 0x59	; 89
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8e 7f       	andi	r24, 0xFE	; 254
    13d2:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF0);	/*Clear Compare Mode Flag*/
    13d4:	a8 e5       	ldi	r26, 0x58	; 88
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	e8 e5       	ldi	r30, 0x58	; 88
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8d 7f       	andi	r24, 0xFD	; 253
    13e0:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV0);	/*Clear Overflow Mode Flag*/
    13e2:	a8 e5       	ldi	r26, 0x58	; 88
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e8 e5       	ldi	r30, 0x58	; 88
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8e 7f       	andi	r24, 0xFE	; 254
    13ee:	8c 93       	st	X, r24
	OCR0  = 0;				/*Clear Compare Register*/
    13f0:	ec e5       	ldi	r30, 0x5C	; 92
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	10 82       	st	Z, r1
	TCNT0 = 0;				/*Clear Counter Register*/
    13f6:	e2 e5       	ldi	r30, 0x52	; 82
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	10 82       	st	Z, r1
}
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <TIMER1_init>:
 * [Inputs]:		TIMER1 Configuration structure by address
 *
 * [No Returns]:
 */
void TIMER1_init(TIMER_CONFIG_STRUCT *TIMER1_Config_Type)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	00 d0       	rcall	.+0      	; 0x1408 <TIMER1_init+0x6>
    1408:	00 d0       	rcall	.+0      	; 0x140a <TIMER1_init+0x8>
    140a:	00 d0       	rcall	.+0      	; 0x140c <TIMER1_init+0xa>
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	9a 83       	std	Y+2, r25	; 0x02
    1412:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = TIMER1_Config_Type->Initial_value16;	/*Initial Value*/
    1414:	ac e4       	ldi	r26, 0x4C	; 76
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e9 81       	ldd	r30, Y+1	; 0x01
    141a:	fa 81       	ldd	r31, Y+2	; 0x02
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	11 96       	adiw	r26, 0x01	; 1
    1422:	9c 93       	st	X, r25
    1424:	8e 93       	st	-X, r24
	OCR1A = TIMER1_Config_Type->Compare_Value16;	/*Compare Value*/
    1426:	aa e4       	ldi	r26, 0x4A	; 74
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e9 81       	ldd	r30, Y+1	; 0x01
    142c:	fa 81       	ldd	r31, Y+2	; 0x02
    142e:	84 81       	ldd	r24, Z+4	; 0x04
    1430:	95 81       	ldd	r25, Z+5	; 0x05
    1432:	11 96       	adiw	r26, 0x01	; 1
    1434:	9c 93       	st	X, r25
    1436:	8e 93       	st	-X, r24
	ICR1  = TIMER1_Config_Type->Compare_Value16;	/*Top value in PWM Mode*/
    1438:	a6 e4       	ldi	r26, 0x46	; 70
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e9 81       	ldd	r30, Y+1	; 0x01
    143e:	fa 81       	ldd	r31, Y+2	; 0x02
    1440:	84 81       	ldd	r24, Z+4	; 0x04
    1442:	95 81       	ldd	r25, Z+5	; 0x05
    1444:	11 96       	adiw	r26, 0x01	; 1
    1446:	9c 93       	st	X, r25
    1448:	8e 93       	st	-X, r24
	/*switch to choose clock pre-scaler*/
	switch(TIMER1_Config_Type->TIMER_Prescaler)
    144a:	e9 81       	ldd	r30, Y+1	; 0x01
    144c:	fa 81       	ldd	r31, Y+2	; 0x02
    144e:	86 81       	ldd	r24, Z+6	; 0x06
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3e 83       	std	Y+6, r19	; 0x06
    1456:	2d 83       	std	Y+5, r18	; 0x05
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	86 30       	cpi	r24, 0x06	; 6
    145e:	91 05       	cpc	r25, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <TIMER1_init+0x62>
    1462:	46 c0       	rjmp	.+140    	; 0x14f0 <TIMER1_init+0xee>
    1464:	2d 81       	ldd	r18, Y+5	; 0x05
    1466:	3e 81       	ldd	r19, Y+6	; 0x06
    1468:	27 30       	cpi	r18, 0x07	; 7
    146a:	31 05       	cpc	r19, r1
    146c:	84 f4       	brge	.+32     	; 0x148e <TIMER1_init+0x8c>
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	91 05       	cpc	r25, r1
    1476:	29 f1       	breq	.+74     	; 0x14c2 <TIMER1_init+0xc0>
    1478:	2d 81       	ldd	r18, Y+5	; 0x05
    147a:	3e 81       	ldd	r19, Y+6	; 0x06
    147c:	24 30       	cpi	r18, 0x04	; 4
    147e:	31 05       	cpc	r19, r1
    1480:	41 f1       	breq	.+80     	; 0x14d2 <TIMER1_init+0xd0>
    1482:	8d 81       	ldd	r24, Y+5	; 0x05
    1484:	9e 81       	ldd	r25, Y+6	; 0x06
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	91 05       	cpc	r25, r1
    148a:	99 f0       	breq	.+38     	; 0x14b2 <TIMER1_init+0xb0>
    148c:	7a c0       	rjmp	.+244    	; 0x1582 <TIMER1_init+0x180>
    148e:	2d 81       	ldd	r18, Y+5	; 0x05
    1490:	3e 81       	ldd	r19, Y+6	; 0x06
    1492:	2a 30       	cpi	r18, 0x0A	; 10
    1494:	31 05       	cpc	r19, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <TIMER1_init+0x98>
    1498:	42 c0       	rjmp	.+132    	; 0x151e <TIMER1_init+0x11c>
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	9e 81       	ldd	r25, Y+6	; 0x06
    149e:	8b 30       	cpi	r24, 0x0B	; 11
    14a0:	91 05       	cpc	r25, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <TIMER1_init+0xa4>
    14a4:	52 c0       	rjmp	.+164    	; 0x154a <TIMER1_init+0x148>
    14a6:	2d 81       	ldd	r18, Y+5	; 0x05
    14a8:	3e 81       	ldd	r19, Y+6	; 0x06
    14aa:	27 30       	cpi	r18, 0x07	; 7
    14ac:	31 05       	cpc	r19, r1
    14ae:	41 f1       	breq	.+80     	; 0x1500 <TIMER1_init+0xfe>
    14b0:	68 c0       	rjmp	.+208    	; 0x1582 <TIMER1_init+0x180>
	{
		case F_CPU_CLOCK:
			SET_BIT(TCCR1B,CS10);
    14b2:	ae e4       	ldi	r26, 0x4E	; 78
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ee e4       	ldi	r30, 0x4E	; 78
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	81 60       	ori	r24, 0x01	; 1
    14be:	8c 93       	st	X, r24
    14c0:	60 c0       	rjmp	.+192    	; 0x1582 <TIMER1_init+0x180>
			break;
		case F_CPU_N8:
			SET_BIT(TCCR1B,CS11);
    14c2:	ae e4       	ldi	r26, 0x4E	; 78
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	ee e4       	ldi	r30, 0x4E	; 78
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	82 60       	ori	r24, 0x02	; 2
    14ce:	8c 93       	st	X, r24
    14d0:	58 c0       	rjmp	.+176    	; 0x1582 <TIMER1_init+0x180>
			break;
		case F_CPU_N64:
			SET_BIT(TCCR1B,CS10);
    14d2:	ae e4       	ldi	r26, 0x4E	; 78
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ee e4       	ldi	r30, 0x4E	; 78
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	81 60       	ori	r24, 0x01	; 1
    14de:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    14e0:	ae e4       	ldi	r26, 0x4E	; 78
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ee e4       	ldi	r30, 0x4E	; 78
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	82 60       	ori	r24, 0x02	; 2
    14ec:	8c 93       	st	X, r24
    14ee:	49 c0       	rjmp	.+146    	; 0x1582 <TIMER1_init+0x180>
			break;
		case F_CPU_N256:
			SET_BIT(TCCR1B,CS12);
    14f0:	ae e4       	ldi	r26, 0x4E	; 78
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ee e4       	ldi	r30, 0x4E	; 78
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	84 60       	ori	r24, 0x04	; 4
    14fc:	8c 93       	st	X, r24
    14fe:	41 c0       	rjmp	.+130    	; 0x1582 <TIMER1_init+0x180>
			break;
		case F_CPU_N1024:
			SET_BIT(TCCR1B,CS10);
    1500:	ae e4       	ldi	r26, 0x4E	; 78
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	ee e4       	ldi	r30, 0x4E	; 78
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	81 60       	ori	r24, 0x01	; 1
    150c:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
    150e:	ae e4       	ldi	r26, 0x4E	; 78
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ee e4       	ldi	r30, 0x4E	; 78
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	84 60       	ori	r24, 0x04	; 4
    151a:	8c 93       	st	X, r24
    151c:	32 c0       	rjmp	.+100    	; 0x1582 <TIMER1_init+0x180>
			break;
		case T1_EXTERNAL_CLOCK_FALLING:
			SET_BIT(TCCR1B,CS11);
    151e:	ae e4       	ldi	r26, 0x4E	; 78
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	ee e4       	ldi	r30, 0x4E	; 78
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	82 60       	ori	r24, 0x02	; 2
    152a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
    152c:	ae e4       	ldi	r26, 0x4E	; 78
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	ee e4       	ldi	r30, 0x4E	; 78
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	84 60       	ori	r24, 0x04	; 4
    1538:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,PB1);
    153a:	a7 e3       	ldi	r26, 0x37	; 55
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e7 e3       	ldi	r30, 0x37	; 55
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	8d 7f       	andi	r24, 0xFD	; 253
    1546:	8c 93       	st	X, r24
    1548:	1c c0       	rjmp	.+56     	; 0x1582 <TIMER1_init+0x180>
			break;
		case T1_EXTERNAL_CLOCK_RISING:
			SET_BIT(TCCR1B,CS10);
    154a:	ae e4       	ldi	r26, 0x4E	; 78
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ee e4       	ldi	r30, 0x4E	; 78
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	81 60       	ori	r24, 0x01	; 1
    1556:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS11);
    1558:	ae e4       	ldi	r26, 0x4E	; 78
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	ee e4       	ldi	r30, 0x4E	; 78
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	82 60       	ori	r24, 0x02	; 2
    1564:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,CS12);
    1566:	ae e4       	ldi	r26, 0x4E	; 78
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	ee e4       	ldi	r30, 0x4E	; 78
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	84 60       	ori	r24, 0x04	; 4
    1572:	8c 93       	st	X, r24
			CLEAR_BIT(DDRB,PB1);
    1574:	a7 e3       	ldi	r26, 0x37	; 55
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e7 e3       	ldi	r30, 0x37	; 55
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8d 7f       	andi	r24, 0xFD	; 253
    1580:	8c 93       	st	X, r24
			break;
	}
	/*switch to choose mode*/
	switch(TIMER1_Config_Type->TIMER_Mode)
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	87 81       	ldd	r24, Z+7	; 0x07
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3c 83       	std	Y+4, r19	; 0x04
    158e:	2b 83       	std	Y+3, r18	; 0x03
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	91 05       	cpc	r25, r1
    1598:	01 f1       	breq	.+64     	; 0x15da <TIMER1_init+0x1d8>
    159a:	2b 81       	ldd	r18, Y+3	; 0x03
    159c:	3c 81       	ldd	r19, Y+4	; 0x04
    159e:	22 30       	cpi	r18, 0x02	; 2
    15a0:	31 05       	cpc	r19, r1
    15a2:	c1 f1       	breq	.+112    	; 0x1614 <TIMER1_init+0x212>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	09 f0       	breq	.+2      	; 0x15ae <TIMER1_init+0x1ac>
    15ac:	5d c0       	rjmp	.+186    	; 0x1668 <TIMER1_init+0x266>
	{
		case OVERFLOW_MODE:
			SET_BIT(TIMSK,TOIE1);	/*Enable Overflow Mode Interrupt Module*/
    15ae:	a9 e5       	ldi	r26, 0x59	; 89
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e9 e5       	ldi	r30, 0x59	; 89
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	84 60       	ori	r24, 0x04	; 4
    15ba:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1A);
    15bc:	af e4       	ldi	r26, 0x4F	; 79
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	ef e4       	ldi	r30, 0x4F	; 79
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    15ca:	af e4       	ldi	r26, 0x4F	; 79
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ef e4       	ldi	r30, 0x4F	; 79
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	84 60       	ori	r24, 0x04	; 4
    15d6:	8c 93       	st	X, r24
    15d8:	47 c0       	rjmp	.+142    	; 0x1668 <TIMER1_init+0x266>
			break;
		case COMPARE_MODE:
			SET_BIT(TIMSK,OCIE1A);	/*Enable Compare Mode Interrupt Module*/
    15da:	a9 e5       	ldi	r26, 0x59	; 89
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e9 e5       	ldi	r30, 0x59	; 89
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	80 61       	ori	r24, 0x10	; 16
    15e6:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1A);
    15e8:	af e4       	ldi	r26, 0x4F	; 79
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ef e4       	ldi	r30, 0x4F	; 79
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	88 60       	ori	r24, 0x08	; 8
    15f4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,FOC1B);
    15f6:	af e4       	ldi	r26, 0x4F	; 79
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ef e4       	ldi	r30, 0x4F	; 79
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	84 60       	ori	r24, 0x04	; 4
    1602:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    1604:	ae e4       	ldi	r26, 0x4E	; 78
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ee e4       	ldi	r30, 0x4E	; 78
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	88 60       	ori	r24, 0x08	; 8
    1610:	8c 93       	st	X, r24
    1612:	2a c0       	rjmp	.+84     	; 0x1668 <TIMER1_init+0x266>
			break;
		case PWM_MODE:				/*FPWM=F_CPU/N*256*/
			SET_BIT(DDRD,PD5); 		/*Make OC1A as output pin*/
    1614:	a1 e3       	ldi	r26, 0x31	; 49
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e1 e3       	ldi	r30, 0x31	; 49
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	80 62       	ori	r24, 0x20	; 32
    1620:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1A1);	/*Non-Inverting Mode*/
    1622:	af e4       	ldi	r26, 0x4F	; 79
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	ef e4       	ldi	r30, 0x4F	; 79
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	80 68       	ori	r24, 0x80	; 128
    162e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,COM1B1);
    1630:	af e4       	ldi	r26, 0x4F	; 79
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	ef e4       	ldi	r30, 0x4F	; 79
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	80 62       	ori	r24, 0x20	; 32
    163c:	8c 93       	st	X, r24
			SET_BIT(TCCR1A,WGM11);
    163e:	af e4       	ldi	r26, 0x4F	; 79
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	ef e4       	ldi	r30, 0x4F	; 79
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	82 60       	ori	r24, 0x02	; 2
    164a:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    164c:	ae e4       	ldi	r26, 0x4E	; 78
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ee e4       	ldi	r30, 0x4E	; 78
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	88 60       	ori	r24, 0x08	; 8
    1658:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM13);
    165a:	ae e4       	ldi	r26, 0x4E	; 78
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	ee e4       	ldi	r30, 0x4E	; 78
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	80 61       	ori	r24, 0x10	; 16
    1666:	8c 93       	st	X, r24
			break;
	}
}
    1668:	26 96       	adiw	r28, 0x06	; 6
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	de bf       	out	0x3e, r29	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	cd bf       	out	0x3d, r28	; 61
    1674:	cf 91       	pop	r28
    1676:	df 91       	pop	r29
    1678:	08 95       	ret

0000167a <TIMER1_setCallBackFunctionsOVF>:
 * [Inputs]:		Pointers to functions that will be called from Timer1 ISR
 *
 * [No Returns]:
 */
void TIMER1_setCallBackFunctionsOVF(void(*a_FunctionPtr_OVF)(void))
{
    167a:	df 93       	push	r29
    167c:	cf 93       	push	r28
    167e:	00 d0       	rcall	.+0      	; 0x1680 <TIMER1_setCallBackFunctionsOVF+0x6>
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_Ovf_g_callBackFunction_Ptr = a_FunctionPtr_OVF;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	9a 81       	ldd	r25, Y+2	; 0x02
    168c:	90 93 88 00 	sts	0x0088, r25
    1690:	80 93 87 00 	sts	0x0087, r24
}
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <TIMER1_setCallBackFunctionCOMP>:
void TIMER1_setCallBackFunctionCOMP(void(*a_FunctionPtr_COMP)(void))
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <TIMER1_setCallBackFunctionCOMP+0x6>
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	9a 83       	std	Y+2, r25	; 0x02
    16aa:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_Comp_g_callBackFunction_Ptr = a_FunctionPtr_COMP;
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	90 93 86 00 	sts	0x0086, r25
    16b4:	80 93 85 00 	sts	0x0085, r24
}
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <TIMER1_Deinit>:
 * 					Function to turn off Timer1
 * [No Inputs]:
 * [No Returns]:
 */
void TIMER1_Deinit(void)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DDRB,PB1);		/*Detach T1*/
    16ca:	a7 e3       	ldi	r26, 0x37	; 55
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e7 e3       	ldi	r30, 0x37	; 55
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	82 60       	ori	r24, 0x02	; 2
    16d6:	8c 93       	st	X, r24
	CLEAR_BIT(DDRD,PD5);	/*Detach OC1A*/
    16d8:	a1 e3       	ldi	r26, 0x31	; 49
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e1 e3       	ldi	r30, 0x31	; 49
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	8f 7d       	andi	r24, 0xDF	; 223
    16e4:	8c 93       	st	X, r24
	TCCR1A = 0;				/*Clear Timer1 Control Register A*/
    16e6:	ef e4       	ldi	r30, 0x4F	; 79
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	10 82       	st	Z, r1
	TCCR1B = 0;				/*Clear Timer1 Control Register B*/
    16ec:	ee e4       	ldi	r30, 0x4E	; 78
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,TOIE1);	/*Disable Overflow Interrupt Module*/
    16f2:	a9 e5       	ldi	r26, 0x59	; 89
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e9 e5       	ldi	r30, 0x59	; 89
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8b 7f       	andi	r24, 0xFB	; 251
    16fe:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,OCIE1A);/*Disable CompareA Interrupt Module*/
    1700:	a9 e5       	ldi	r26, 0x59	; 89
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e9 e5       	ldi	r30, 0x59	; 89
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 7e       	andi	r24, 0xEF	; 239
    170c:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV0);	/*Clear Overflow Interrupt Flag*/
    170e:	a8 e5       	ldi	r26, 0x58	; 88
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e8 e5       	ldi	r30, 0x58	; 88
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8e 7f       	andi	r24, 0xFE	; 254
    171a:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF1A);	/*Clear CompareA Interrupt Flag*/
    171c:	a8 e5       	ldi	r26, 0x58	; 88
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e8 e5       	ldi	r30, 0x58	; 88
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	8f 7e       	andi	r24, 0xEF	; 239
    1728:	8c 93       	st	X, r24
	ICR1 = 0;				/*Clear Input Capture Register */
    172a:	e6 e4       	ldi	r30, 0x46	; 70
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	11 82       	std	Z+1, r1	; 0x01
    1730:	10 82       	st	Z, r1
	OCR1A = 0;				/*Clear Compare Register 1A*/
    1732:	ea e4       	ldi	r30, 0x4A	; 74
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	11 82       	std	Z+1, r1	; 0x01
    1738:	10 82       	st	Z, r1
	TCNT1 = 0;				/*Clear Timer1 COunter*/
    173a:	ec e4       	ldi	r30, 0x4C	; 76
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	11 82       	std	Z+1, r1	; 0x01
    1740:	10 82       	st	Z, r1
}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <TIMER2_init>:
 * [Inputs]:		TIMER2 Configuration structure by address
 *
 * [No Returns]:
 */
void TIMER2_init(TIMER_CONFIG_STRUCT *TIMER2_Config_Type)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <TIMER2_init+0x6>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <TIMER2_init+0x8>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <TIMER2_init+0xa>
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = TIMER2_Config_Type->Initial_value8;	/*Initial Value*/
    175a:	a4 e4       	ldi	r26, 0x44	; 68
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e9 81       	ldd	r30, Y+1	; 0x01
    1760:	fa 81       	ldd	r31, Y+2	; 0x02
    1762:	80 81       	ld	r24, Z
    1764:	8c 93       	st	X, r24
	OCR2  = TIMER2_Config_Type->Compare_Value8;	/*Compare Value*/
    1766:	a3 e4       	ldi	r26, 0x43	; 67
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	81 81       	ldd	r24, Z+1	; 0x01
    1770:	8c 93       	st	X, r24
	/*switch to choose clock pre-scaler*/
	switch(TIMER2_Config_Type->TIMER_Prescaler)
    1772:	e9 81       	ldd	r30, Y+1	; 0x01
    1774:	fa 81       	ldd	r31, Y+2	; 0x02
    1776:	86 81       	ldd	r24, Z+6	; 0x06
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	3e 83       	std	Y+6, r19	; 0x06
    177e:	2d 83       	std	Y+5, r18	; 0x05
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	91 05       	cpc	r25, r1
    1788:	09 f4       	brne	.+2      	; 0x178c <TIMER2_init+0x44>
    178a:	46 c0       	rjmp	.+140    	; 0x1818 <TIMER2_init+0xd0>
    178c:	2d 81       	ldd	r18, Y+5	; 0x05
    178e:	3e 81       	ldd	r19, Y+6	; 0x06
    1790:	25 30       	cpi	r18, 0x05	; 5
    1792:	31 05       	cpc	r19, r1
    1794:	84 f4       	brge	.+32     	; 0x17b6 <TIMER2_init+0x6e>
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	91 05       	cpc	r25, r1
    179e:	29 f1       	breq	.+74     	; 0x17ea <TIMER2_init+0xa2>
    17a0:	2d 81       	ldd	r18, Y+5	; 0x05
    17a2:	3e 81       	ldd	r19, Y+6	; 0x06
    17a4:	23 30       	cpi	r18, 0x03	; 3
    17a6:	31 05       	cpc	r19, r1
    17a8:	44 f5       	brge	.+80     	; 0x17fa <TIMER2_init+0xb2>
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	91 05       	cpc	r25, r1
    17b2:	99 f0       	breq	.+38     	; 0x17da <TIMER2_init+0x92>
    17b4:	6c c0       	rjmp	.+216    	; 0x188e <TIMER2_init+0x146>
    17b6:	2d 81       	ldd	r18, Y+5	; 0x05
    17b8:	3e 81       	ldd	r19, Y+6	; 0x06
    17ba:	26 30       	cpi	r18, 0x06	; 6
    17bc:	31 05       	cpc	r19, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <TIMER2_init+0x7a>
    17c0:	42 c0       	rjmp	.+132    	; 0x1846 <TIMER2_init+0xfe>
    17c2:	8d 81       	ldd	r24, Y+5	; 0x05
    17c4:	9e 81       	ldd	r25, Y+6	; 0x06
    17c6:	86 30       	cpi	r24, 0x06	; 6
    17c8:	91 05       	cpc	r25, r1
    17ca:	74 f1       	brlt	.+92     	; 0x1828 <TIMER2_init+0xe0>
    17cc:	2d 81       	ldd	r18, Y+5	; 0x05
    17ce:	3e 81       	ldd	r19, Y+6	; 0x06
    17d0:	27 30       	cpi	r18, 0x07	; 7
    17d2:	31 05       	cpc	r19, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <TIMER2_init+0x90>
    17d6:	46 c0       	rjmp	.+140    	; 0x1864 <TIMER2_init+0x11c>
    17d8:	5a c0       	rjmp	.+180    	; 0x188e <TIMER2_init+0x146>
	{
		case F_CPU_CLOCK:
			SET_BIT(TCCR2,CS20);
    17da:	a5 e4       	ldi	r26, 0x45	; 69
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e5 e4       	ldi	r30, 0x45	; 69
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	81 60       	ori	r24, 0x01	; 1
    17e6:	8c 93       	st	X, r24
    17e8:	52 c0       	rjmp	.+164    	; 0x188e <TIMER2_init+0x146>
			break;
		case F_CPU_N8:
			SET_BIT(TCCR2,CS21);
    17ea:	a5 e4       	ldi	r26, 0x45	; 69
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e5 e4       	ldi	r30, 0x45	; 69
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	82 60       	ori	r24, 0x02	; 2
    17f6:	8c 93       	st	X, r24
    17f8:	4a c0       	rjmp	.+148    	; 0x188e <TIMER2_init+0x146>
			break;
		case F_CPU_N32:
			SET_BIT(TCCR2,CS20);
    17fa:	a5 e4       	ldi	r26, 0x45	; 69
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e5 e4       	ldi	r30, 0x45	; 69
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	81 60       	ori	r24, 0x01	; 1
    1806:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    1808:	a5 e4       	ldi	r26, 0x45	; 69
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e5 e4       	ldi	r30, 0x45	; 69
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	82 60       	ori	r24, 0x02	; 2
    1814:	8c 93       	st	X, r24
    1816:	3b c0       	rjmp	.+118    	; 0x188e <TIMER2_init+0x146>
			break;
		case F_CPU_N64:
			SET_BIT(TCCR2,CS22);
    1818:	a5 e4       	ldi	r26, 0x45	; 69
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e5 e4       	ldi	r30, 0x45	; 69
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	84 60       	ori	r24, 0x04	; 4
    1824:	8c 93       	st	X, r24
    1826:	33 c0       	rjmp	.+102    	; 0x188e <TIMER2_init+0x146>
			break;
		case F_CPU_N128:
			SET_BIT(TCCR2,CS20);
    1828:	a5 e4       	ldi	r26, 0x45	; 69
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e5 e4       	ldi	r30, 0x45	; 69
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	81 60       	ori	r24, 0x01	; 1
    1834:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS22);
    1836:	a5 e4       	ldi	r26, 0x45	; 69
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e5 e4       	ldi	r30, 0x45	; 69
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	84 60       	ori	r24, 0x04	; 4
    1842:	8c 93       	st	X, r24
    1844:	24 c0       	rjmp	.+72     	; 0x188e <TIMER2_init+0x146>
			break;
		case F_CPU_N256:
			SET_BIT(TCCR2,CS21);
    1846:	a5 e4       	ldi	r26, 0x45	; 69
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e4       	ldi	r30, 0x45	; 69
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	82 60       	ori	r24, 0x02	; 2
    1852:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS22);
    1854:	a5 e4       	ldi	r26, 0x45	; 69
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e5 e4       	ldi	r30, 0x45	; 69
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	84 60       	ori	r24, 0x04	; 4
    1860:	8c 93       	st	X, r24
    1862:	15 c0       	rjmp	.+42     	; 0x188e <TIMER2_init+0x146>
			break;
		case F_CPU_N1024:
			SET_BIT(TCCR2,CS20);
    1864:	a5 e4       	ldi	r26, 0x45	; 69
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e5 e4       	ldi	r30, 0x45	; 69
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	81 60       	ori	r24, 0x01	; 1
    1870:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS21);
    1872:	a5 e4       	ldi	r26, 0x45	; 69
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e5 e4       	ldi	r30, 0x45	; 69
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	82 60       	ori	r24, 0x02	; 2
    187e:	8c 93       	st	X, r24
			SET_BIT(TCCR2,CS22);
    1880:	a5 e4       	ldi	r26, 0x45	; 69
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e5 e4       	ldi	r30, 0x45	; 69
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	84 60       	ori	r24, 0x04	; 4
    188c:	8c 93       	st	X, r24
			break;
	}
	/*switch to choose mode*/
	switch(TIMER2_Config_Type->TIMER_Mode)
    188e:	e9 81       	ldd	r30, Y+1	; 0x01
    1890:	fa 81       	ldd	r31, Y+2	; 0x02
    1892:	87 81       	ldd	r24, Z+7	; 0x07
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	3c 83       	std	Y+4, r19	; 0x04
    189a:	2b 83       	std	Y+3, r18	; 0x03
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	91 05       	cpc	r25, r1
    18a4:	c9 f0       	breq	.+50     	; 0x18d8 <TIMER2_init+0x190>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	51 f1       	breq	.+84     	; 0x1904 <TIMER2_init+0x1bc>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	00 97       	sbiw	r24, 0x00	; 0
    18b6:	09 f0       	breq	.+2      	; 0x18ba <TIMER2_init+0x172>
    18b8:	41 c0       	rjmp	.+130    	; 0x193c <TIMER2_init+0x1f4>
	{
		case OVERFLOW_MODE:
			SET_BIT(TIMSK,TOIE2);	/*Enable Overflow Mode Interrupt Module*/
    18ba:	a9 e5       	ldi	r26, 0x59	; 89
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e9 e5       	ldi	r30, 0x59	; 89
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	80 64       	ori	r24, 0x40	; 64
    18c6:	8c 93       	st	X, r24
			SET_BIT(TCCR2,FOC2);
    18c8:	a5 e4       	ldi	r26, 0x45	; 69
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e4       	ldi	r30, 0x45	; 69
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	80 68       	ori	r24, 0x80	; 128
    18d4:	8c 93       	st	X, r24
    18d6:	32 c0       	rjmp	.+100    	; 0x193c <TIMER2_init+0x1f4>
			break;
		case COMPARE_MODE:
			SET_BIT(TIMSK,OCIE2);	/*Enable Compare Mode Interrupt Module*/
    18d8:	a9 e5       	ldi	r26, 0x59	; 89
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e9 e5       	ldi	r30, 0x59	; 89
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 68       	ori	r24, 0x80	; 128
    18e4:	8c 93       	st	X, r24
			SET_BIT(TCCR2,FOC2);
    18e6:	a5 e4       	ldi	r26, 0x45	; 69
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e5 e4       	ldi	r30, 0x45	; 69
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 68       	ori	r24, 0x80	; 128
    18f2:	8c 93       	st	X, r24
			SET_BIT(TCCR2,WGM21);
    18f4:	a5 e4       	ldi	r26, 0x45	; 69
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e4       	ldi	r30, 0x45	; 69
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	88 60       	ori	r24, 0x08	; 8
    1900:	8c 93       	st	X, r24
    1902:	1c c0       	rjmp	.+56     	; 0x193c <TIMER2_init+0x1f4>
			break;
		case PWM_MODE:				/*FPWM=F_CPU/N*256*/
			SET_BIT(DDRD,PD7); 		/*Make OC2 as output pin*/
    1904:	a1 e3       	ldi	r26, 0x31	; 49
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e1 e3       	ldi	r30, 0x31	; 49
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 68       	ori	r24, 0x80	; 128
    1910:	8c 93       	st	X, r24
			SET_BIT(TCCR2,WGM20);
    1912:	a5 e4       	ldi	r26, 0x45	; 69
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e4       	ldi	r30, 0x45	; 69
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	80 64       	ori	r24, 0x40	; 64
    191e:	8c 93       	st	X, r24
			SET_BIT(TCCR2,WGM21);
    1920:	a5 e4       	ldi	r26, 0x45	; 69
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e4       	ldi	r30, 0x45	; 69
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	88 60       	ori	r24, 0x08	; 8
    192c:	8c 93       	st	X, r24
			SET_BIT(TCCR2,COM21);	/*Non-Inverting Mode*/
    192e:	a5 e4       	ldi	r26, 0x45	; 69
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e4       	ldi	r30, 0x45	; 69
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	80 62       	ori	r24, 0x20	; 32
    193a:	8c 93       	st	X, r24
			break;
	}
}
    193c:	26 96       	adiw	r28, 0x06	; 6
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <TIMER2_setCallBackFunctionsOVF>:
 * [Inputs]:		Pointers to functions that will be called from Timer2 ISR
 *
 * [No Returns]:
 */
void TIMER2_setCallBackFunctionsOVF(void(*a_FunctionPtr_OVF)(void))
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <TIMER2_setCallBackFunctionsOVF+0x6>
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	9a 83       	std	Y+2, r25	; 0x02
    195a:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_Ovf_g_callBackFunction_Ptr = a_FunctionPtr_OVF;
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	90 93 8c 00 	sts	0x008C, r25
    1964:	80 93 8b 00 	sts	0x008B, r24
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <TIMER2_setCallBackFunctionCOMP>:
void TIMER2_setCallBackFunctionCOMP(void(*a_FunctionPtr_COMP)(void))
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <TIMER2_setCallBackFunctionCOMP+0x6>
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_Comp_g_callBackFunction_Ptr = a_FunctionPtr_COMP;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	90 93 8a 00 	sts	0x008A, r25
    1988:	80 93 89 00 	sts	0x0089, r24
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <TIMER2_Deinit>:
 * 					Function to turn off Timer2
 * [No Inputs]:
 * [No Returns]:
 */
void TIMER2_Deinit(void)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DDRD,PD7);	/*Detach OC2*/
    199e:	a1 e3       	ldi	r26, 0x31	; 49
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e1 e3       	ldi	r30, 0x31	; 49
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8f 77       	andi	r24, 0x7F	; 127
    19aa:	8c 93       	st	X, r24
	TCCR2 = 0;				/*Clear Timer2 Control Register*/
    19ac:	e5 e4       	ldi	r30, 0x45	; 69
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	10 82       	st	Z, r1
	CLEAR_BIT(TIMSK,OCIE2); /*Disable Overflow Mode Interrupt Module*/
    19b2:	a9 e5       	ldi	r26, 0x59	; 89
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e9 e5       	ldi	r30, 0x59	; 89
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 77       	andi	r24, 0x7F	; 127
    19be:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK,TOIE2); /*Disable Compare Mode Interrupt Module*/
    19c0:	a9 e5       	ldi	r26, 0x59	; 89
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e9 e5       	ldi	r30, 0x59	; 89
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	8f 7b       	andi	r24, 0xBF	; 191
    19cc:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,OCF2);	/*Clear Compare Mode Flag*/
    19ce:	a8 e5       	ldi	r26, 0x58	; 88
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	e8 e5       	ldi	r30, 0x58	; 88
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	8f 77       	andi	r24, 0x7F	; 127
    19da:	8c 93       	st	X, r24
	CLEAR_BIT(TIFR,TOV2);	/*Clear Overflow Mode Flag*/
    19dc:	a8 e5       	ldi	r26, 0x58	; 88
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e8 e5       	ldi	r30, 0x58	; 88
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	8f 7b       	andi	r24, 0xBF	; 191
    19e8:	8c 93       	st	X, r24
	OCR2  = 0;				/*Clear Compare Register*/
    19ea:	e3 e4       	ldi	r30, 0x43	; 67
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	10 82       	st	Z, r1
	TCNT2 = 0;				/*Clear Counter Register*/
    19f0:	e4 e4       	ldi	r30, 0x44	; 68
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	10 82       	st	Z, r1
}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <TWI_init>:
 * 					This Function is Re-Configurable to adjust SCL
 * [No Inputs]:
 * [No Returns]:
 */
void TWI_init(TWI_CONFIG_STRUCT *TWI_Config_Type)
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	29 97       	sbiw	r28, 0x09	; 9
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	99 87       	std	Y+9, r25	; 0x09
    1a12:	88 87       	std	Y+8, r24	; 0x08

	uint16 twps = 1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9f 83       	std	Y+7, r25	; 0x07
    1a1a:	8e 83       	std	Y+6, r24	; 0x06
	for(uint8 i=0 ; i<TWI_Config_Type->TWI_Clock_Prescaler ; i++)
    1a1c:	19 82       	std	Y+1, r1	; 0x01
    1a1e:	0b c0       	rjmp	.+22     	; 0x1a36 <TWI_init+0x3a>
		twps = twps * 4;
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	9f 81       	ldd	r25, Y+7	; 0x07
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	9f 83       	std	Y+7, r25	; 0x07
    1a2e:	8e 83       	std	Y+6, r24	; 0x06
 */
void TWI_init(TWI_CONFIG_STRUCT *TWI_Config_Type)
{

	uint16 twps = 1;
	for(uint8 i=0 ; i<TWI_Config_Type->TWI_Clock_Prescaler ; i++)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	89 83       	std	Y+1, r24	; 0x01
    1a36:	e8 85       	ldd	r30, Y+8	; 0x08
    1a38:	f9 85       	ldd	r31, Y+9	; 0x09
    1a3a:	92 81       	ldd	r25, Z+2	; 0x02
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	89 17       	cp	r24, r25
    1a40:	78 f3       	brcs	.-34     	; 0x1a20 <TWI_init+0x24>
		twps = twps * 4;
	uint16 x = (F_CPU/(twps*2*(TWI_Config_Type->Bit_Rate))); /*Calculate First part of TWBR*/
    1a42:	e8 85       	ldd	r30, Y+8	; 0x08
    1a44:	f9 85       	ldd	r31, Y+9	; 0x09
    1a46:	81 81       	ldd	r24, Z+1	; 0x01
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a50:	ac 01       	movw	r20, r24
    1a52:	24 9f       	mul	r18, r20
    1a54:	c0 01       	movw	r24, r0
    1a56:	25 9f       	mul	r18, r21
    1a58:	90 0d       	add	r25, r0
    1a5a:	34 9f       	mul	r19, r20
    1a5c:	90 0d       	add	r25, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	9c 01       	movw	r18, r24
    1a66:	40 e0       	ldi	r20, 0x00	; 0
    1a68:	50 e0       	ldi	r21, 0x00	; 0
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	92 e1       	ldi	r25, 0x12	; 18
    1a6e:	aa e7       	ldi	r26, 0x7A	; 122
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__udivmodsi4>
    1a7a:	da 01       	movw	r26, r20
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	9d 83       	std	Y+5, r25	; 0x05
    1a80:	8c 83       	std	Y+4, r24	; 0x04
	uint16 y = (8/twps);									 /*Calculate Second part of TWBR*/
    1a82:	88 e0       	ldi	r24, 0x08	; 8
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	2e 81       	ldd	r18, Y+6	; 0x06
    1a88:	3f 81       	ldd	r19, Y+7	; 0x07
    1a8a:	b9 01       	movw	r22, r18
    1a8c:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <__udivmodhi4>
    1a90:	cb 01       	movw	r24, r22
    1a92:	9b 83       	std	Y+3, r25	; 0x03
    1a94:	8a 83       	std	Y+2, r24	; 0x02
	TWBR = (uint8)(x-y); 									 /*Calculate TWBR*/
    1a96:	e0 e2       	ldi	r30, 0x20	; 32
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	59 2f       	mov	r21, r25
    1aa0:	58 1b       	sub	r21, r24
    1aa2:	85 2f       	mov	r24, r21
    1aa4:	80 83       	st	Z, r24
	TWAR = TWI_Config_Type->Device_Address;
    1aa6:	a2 e2       	ldi	r26, 0x22	; 34
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	e8 85       	ldd	r30, Y+8	; 0x08
    1aac:	f9 85       	ldd	r31, Y+9	; 0x09
    1aae:	80 81       	ld	r24, Z
    1ab0:	8c 93       	st	X, r24
	TWSR = TWI_Config_Type->TWI_Clock_Prescaler;
    1ab2:	a1 e2       	ldi	r26, 0x21	; 33
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab8:	f9 85       	ldd	r31, Y+9	; 0x09
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	8c 93       	st	X, r24
	//TWBR = 0x02; /*Adjusted Bit Rate= 400Kbps in case of F_CPU = 8MHz*/
	//TWSR = 0x00; /*TWPS = 00 - No Prescaler*/
	//TWAR = 0b00000010; /*Set this MCU Address by 0x01*/
	SET_BIT(TWAR,TWGCE); /*Enable recognition of a General Call - in case of Slave*/
    1abe:	a2 e2       	ldi	r26, 0x22	; 34
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e2 e2       	ldi	r30, 0x22	; 34
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	81 60       	ori	r24, 0x01	; 1
    1aca:	8c 93       	st	X, r24
	TWCR = (1<<TWEN); /*Enable TWI*/
    1acc:	e6 e5       	ldi	r30, 0x56	; 86
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	84 e0       	ldi	r24, 0x04	; 4
    1ad2:	80 83       	st	Z, r24
}
    1ad4:	29 96       	adiw	r28, 0x09	; 9
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <TWI_start>:
 * 					Function to Send Start Condition on SDL
 * [No Inputs]:
 * [No Returns]:
 */
void TWI_start(void)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	/*Clear TWCR Register Then ---> Clear TWI Flag by setting it by 1, Enable Start condition Bit, Enable TWI*/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1aee:	e6 e5       	ldi	r30, 0x56	; 86
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	84 ea       	ldi	r24, 0xA4	; 164
    1af4:	80 83       	st	Z, r24
	/*Polling until TWI Flag is set which means Start Condition is sent succsessfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1af6:	e6 e5       	ldi	r30, 0x56	; 86
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	88 23       	and	r24, r24
    1afe:	dc f7       	brge	.-10     	; 0x1af6 <TWI_start+0x10>
}
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <TWI_stop>:
 * 					Function to Send Stop Condition on SDL to Selected Slave
 * [No Inputs]:
 * [No Returns]:
 */
void TWI_stop(void)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
	/*Clear TWCR Register Then ---> Clear TWI Flag by setting it by 1, Enable Stop condition Bit, Enable TWI*/
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1b0e:	e6 e5       	ldi	r30, 0x56	; 86
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	84 e9       	ldi	r24, 0x94	; 148
    1b14:	80 83       	st	Z, r24
	/*We didn't use polling like previous TWI_Start becasue Flag doens't set after sending the Stop Condition*/
}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <TWI_writeByte>:
 * [Inputs]:
 * 					Byte to be transmitted
 * [No Returns]:
 */
void TWI_writeByte(uint8 data)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	0f 92       	push	r0
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    1b28:	e3 e2       	ldi	r30, 0x23	; 35
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	80 83       	st	Z, r24
	/*Clear TWCR Register Then ---> Clear TWI Flag by setting it by 1, Enable TWI*/
	/*NOTE: when TWI Flag is cleared, Automatically transmission process proceed*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    1b30:	e6 e5       	ldi	r30, 0x56	; 86
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	84 e8       	ldi	r24, 0x84	; 132
    1b36:	80 83       	st	Z, r24
	/*Polling until TWI Flag is set which means the Byte is sent succsessfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1b38:	e6 e5       	ldi	r30, 0x56	; 86
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	88 23       	and	r24, r24
    1b40:	dc f7       	brge	.-10     	; 0x1b38 <TWI_writeByte+0x1c>
}
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <TWI_readByteWithACK>:
 * [No Inputs]:
 * [Returns]:
 * 					Byte to be received
 */
uint8 TWI_readByteWithACK(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	/*Clear TWCR Register Then ---> Clear TWI Flag by setting it by 1, Enable ACK Bit , Enable TWI*/
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b52:	e6 e5       	ldi	r30, 0x56	; 86
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	84 ec       	ldi	r24, 0xC4	; 196
    1b58:	80 83       	st	Z, r24
	/*Polling until TWI Flag is set which means the Byte is receievd succsessfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1b5a:	e6 e5       	ldi	r30, 0x56	; 86
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	88 23       	and	r24, r24
    1b62:	dc f7       	brge	.-10     	; 0x1b5a <TWI_readByteWithACK+0x10>
	/*Return byte (data) received*/
	return TWDR;
    1b64:	e3 e2       	ldi	r30, 0x23	; 35
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <TWI_readByteWithNACK>:
 * [No Inputs]:
 * [Returns]:
 * 					Byte to be received
 */
uint8 TWI_readByteWithNACK(void)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	/*Clear TWCR Register Then ---> Clear TWI Flag by setting it by 1, keep ACK Bit by 0, Enable TWI*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    1b78:	e6 e5       	ldi	r30, 0x56	; 86
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	84 e8       	ldi	r24, 0x84	; 132
    1b7e:	80 83       	st	Z, r24
	/*Polling until TWI Flag is set which means the Byte is receievd succsessfully*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1b80:	e6 e5       	ldi	r30, 0x56	; 86
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	88 23       	and	r24, r24
    1b88:	dc f7       	brge	.-10     	; 0x1b80 <TWI_readByteWithNACK+0x10>
	/*Return byte (data) received*/
	return TWDR;
    1b8a:	e3 e2       	ldi	r30, 0x23	; 35
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
}
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <TWI_getStatus>:
 * [No Inputs]:
 * [Returns]:
 * 					TWI Status
 */
uint8 TWI_getStatus(void)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	0f 92       	push	r0
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/*get the first MS 5 Bits from TWSR Register to get status*/
	status = 0xF8 & TWSR;
    1ba0:	e1 e2       	ldi	r30, 0x21	; 33
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 7f       	andi	r24, 0xF8	; 248
    1ba8:	89 83       	std	Y+1, r24	; 0x01
	/*Return the status*/
	return status;
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <UART_init>:
 * [Inputs]:		UART Configuration structure by address
 *
 * [No Returns]:
 */
void UART_init(UART_USART_Configuration_Struct *UART_USART_Configuration_Ptr)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	2c 97       	sbiw	r28, 0x0c	; 12
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	9c 83       	std	Y+4, r25	; 0x04
    1bca:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRR_value = 0; /*Register to set Baudarte value*/
    1bcc:	1a 82       	std	Y+2, r1	; 0x02
    1bce:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCSRA,U2X); /*Always the USART is in Double Transmission Speed mode*/
    1bd0:	ab e2       	ldi	r26, 0x2B	; 43
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	eb e2       	ldi	r30, 0x2B	; 43
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	82 60       	ori	r24, 0x02	; 2
    1bdc:	8c 93       	st	X, r24
	SET_BIT(UCSRB,RXEN); /*Enable Receiving*/
    1bde:	aa e2       	ldi	r26, 0x2A	; 42
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	ea e2       	ldi	r30, 0x2A	; 42
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	80 61       	ori	r24, 0x10	; 16
    1bea:	8c 93       	st	X, r24
	SET_BIT(UCSRB,TXEN); /*Enable Transmitting*/
    1bec:	aa e2       	ldi	r26, 0x2A	; 42
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	ea e2       	ldi	r30, 0x2A	; 42
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	88 60       	ori	r24, 0x08	; 8
    1bf8:	8c 93       	st	X, r24
	SET_BIT(UCSRC,URSEL); /*This must be set to 1 when writing to UCSRC*/
    1bfa:	a0 e4       	ldi	r26, 0x40	; 64
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e0 e4       	ldi	r30, 0x40	; 64
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	80 68       	ori	r24, 0x80	; 128
    1c06:	8c 93       	st	X, r24
	/*Clear Character size selection bits initially*/
	CLEAR_BIT(UCSRB,UCSZ2);
    1c08:	aa e2       	ldi	r26, 0x2A	; 42
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	ea e2       	ldi	r30, 0x2A	; 42
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8b 7f       	andi	r24, 0xFB	; 251
    1c14:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ0);
    1c16:	a0 e4       	ldi	r26, 0x40	; 64
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e0 e4       	ldi	r30, 0x40	; 64
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8d 7f       	andi	r24, 0xFD	; 253
    1c22:	8c 93       	st	X, r24
	CLEAR_BIT(UCSRC,UCSZ1);
    1c24:	a0 e4       	ldi	r26, 0x40	; 64
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e0 e4       	ldi	r30, 0x40	; 64
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	8b 7f       	andi	r24, 0xFB	; 251
    1c30:	8c 93       	st	X, r24
	/*UART Character Size coditions*/
	switch(UART_USART_Configuration_Ptr->UART_CHARACTER_SIZE)
    1c32:	eb 81       	ldd	r30, Y+3	; 0x03
    1c34:	fc 81       	ldd	r31, Y+4	; 0x04
    1c36:	85 81       	ldd	r24, Z+5	; 0x05
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	3c 87       	std	Y+12, r19	; 0x0c
    1c3e:	2b 87       	std	Y+11, r18	; 0x0b
    1c40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c42:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c44:	82 30       	cpi	r24, 0x02	; 2
    1c46:	91 05       	cpc	r25, r1
    1c48:	d1 f1       	breq	.+116    	; 0x1cbe <UART_init+0x10a>
    1c4a:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c4c:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c4e:	23 30       	cpi	r18, 0x03	; 3
    1c50:	31 05       	cpc	r19, r1
    1c52:	34 f4       	brge	.+12     	; 0x1c60 <UART_init+0xac>
    1c54:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c56:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	c1 f1       	breq	.+112    	; 0x1cce <UART_init+0x11a>
    1c5e:	3e c0       	rjmp	.+124    	; 0x1cdc <UART_init+0x128>
    1c60:	2b 85       	ldd	r18, Y+11	; 0x0b
    1c62:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c64:	23 30       	cpi	r18, 0x03	; 3
    1c66:	31 05       	cpc	r19, r1
    1c68:	d9 f0       	breq	.+54     	; 0x1ca0 <UART_init+0xec>
    1c6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c6e:	87 30       	cpi	r24, 0x07	; 7
    1c70:	91 05       	cpc	r25, r1
    1c72:	a1 f5       	brne	.+104    	; 0x1cdc <UART_init+0x128>
	{
		case NineBit:
			/*Set character size = 9 bits*/
			SET_BIT(UCSRB,UCSZ2);
    1c74:	aa e2       	ldi	r26, 0x2A	; 42
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	ea e2       	ldi	r30, 0x2A	; 42
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	84 60       	ori	r24, 0x04	; 4
    1c80:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ0);
    1c82:	a0 e4       	ldi	r26, 0x40	; 64
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e0 e4       	ldi	r30, 0x40	; 64
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	82 60       	ori	r24, 0x02	; 2
    1c8e:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    1c90:	a0 e4       	ldi	r26, 0x40	; 64
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	e0 e4       	ldi	r30, 0x40	; 64
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	84 60       	ori	r24, 0x04	; 4
    1c9c:	8c 93       	st	X, r24
    1c9e:	1e c0       	rjmp	.+60     	; 0x1cdc <UART_init+0x128>
			break;
		case EightBit:
			/*Set character size = 8 bits*/
			SET_BIT(UCSRC,UCSZ0);
    1ca0:	a0 e4       	ldi	r26, 0x40	; 64
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e0 e4       	ldi	r30, 0x40	; 64
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	82 60       	ori	r24, 0x02	; 2
    1cac:	8c 93       	st	X, r24
			SET_BIT(UCSRC,UCSZ1);
    1cae:	a0 e4       	ldi	r26, 0x40	; 64
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	e0 e4       	ldi	r30, 0x40	; 64
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	84 60       	ori	r24, 0x04	; 4
    1cba:	8c 93       	st	X, r24
    1cbc:	0f c0       	rjmp	.+30     	; 0x1cdc <UART_init+0x128>
			break;
		case SevenBit:
			/*Set character size = 7 bits*/
			SET_BIT(UCSRC,UCSZ1);
    1cbe:	a0 e4       	ldi	r26, 0x40	; 64
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e0 e4       	ldi	r30, 0x40	; 64
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	84 60       	ori	r24, 0x04	; 4
    1cca:	8c 93       	st	X, r24
    1ccc:	07 c0       	rjmp	.+14     	; 0x1cdc <UART_init+0x128>
			break;
		case SixBit:
			/*Set character size = 6 bits*/
			SET_BIT(UCSRC,UCSZ0);
    1cce:	a0 e4       	ldi	r26, 0x40	; 64
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e0 e4       	ldi	r30, 0x40	; 64
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	82 60       	ori	r24, 0x02	; 2
    1cda:	8c 93       	st	X, r24
			/*Set character size = 5 bit*/
			/*keep them set to 0*/
			break;
	}
	/*UART Synchronization coditions*/
	switch(UART_USART_Configuration_Ptr->USART_SYNCHRONIZATION)
    1cdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1cde:	fc 81       	ldd	r31, Y+4	; 0x04
    1ce0:	80 81       	ld	r24, Z
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	3a 87       	std	Y+10, r19	; 0x0a
    1ce8:	29 87       	std	Y+9, r18	; 0x09
    1cea:	89 85       	ldd	r24, Y+9	; 0x09
    1cec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	31 f0       	breq	.+12     	; 0x1cfe <UART_init+0x14a>
    1cf2:	29 85       	ldd	r18, Y+9	; 0x09
    1cf4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1cf6:	21 30       	cpi	r18, 0x01	; 1
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	49 f0       	breq	.+18     	; 0x1d0e <UART_init+0x15a>
    1cfc:	16 c0       	rjmp	.+44     	; 0x1d2a <UART_init+0x176>
	{
		case Asynchronous_Operation:
			CLEAR_BIT(UCSRC,UMSEL); /*Enable Asynchronous Mode*/
    1cfe:	a0 e4       	ldi	r26, 0x40	; 64
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e0 e4       	ldi	r30, 0x40	; 64
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	8f 7b       	andi	r24, 0xBF	; 191
    1d0a:	8c 93       	st	X, r24
    1d0c:	0e c0       	rjmp	.+28     	; 0x1d2a <UART_init+0x176>
			break;
		case Synchronous_Operation:
			SET_BIT(UCSRC,UMSEL); /*Enable Synchronous Mode*/
    1d0e:	a0 e4       	ldi	r26, 0x40	; 64
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e0 e4       	ldi	r30, 0x40	; 64
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	80 64       	ori	r24, 0x40	; 64
    1d1a:	8c 93       	st	X, r24
			/*if in Synchronous Mode always transmit at rising edge and receive at falling edge*/
			CLEAR_BIT(UCSRC,UCPOL);
    1d1c:	a0 e4       	ldi	r26, 0x40	; 64
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e0 e4       	ldi	r30, 0x40	; 64
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8e 7f       	andi	r24, 0xFE	; 254
    1d28:	8c 93       	st	X, r24
			break;
	}
	/*UART Polarity Mode coditions*/
	switch(UART_USART_Configuration_Ptr->UART_PARITY_MODE)
    1d2a:	eb 81       	ldd	r30, Y+3	; 0x03
    1d2c:	fc 81       	ldd	r31, Y+4	; 0x04
    1d2e:	87 81       	ldd	r24, Z+7	; 0x07
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	38 87       	std	Y+8, r19	; 0x08
    1d36:	2f 83       	std	Y+7, r18	; 0x07
    1d38:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3a:	98 85       	ldd	r25, Y+8	; 0x08
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	91 05       	cpc	r25, r1
    1d40:	c1 f0       	breq	.+48     	; 0x1d72 <UART_init+0x1be>
    1d42:	2f 81       	ldd	r18, Y+7	; 0x07
    1d44:	38 85       	ldd	r19, Y+8	; 0x08
    1d46:	23 30       	cpi	r18, 0x03	; 3
    1d48:	31 05       	cpc	r19, r1
    1d4a:	11 f1       	breq	.+68     	; 0x1d90 <UART_init+0x1dc>
    1d4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d4e:	98 85       	ldd	r25, Y+8	; 0x08
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	61 f5       	brne	.+88     	; 0x1dac <UART_init+0x1f8>
	{
	case Parity_Disabled:
		CLEAR_BIT(UCSRC,UPM0);
    1d54:	a0 e4       	ldi	r26, 0x40	; 64
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e0 e4       	ldi	r30, 0x40	; 64
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8f 7e       	andi	r24, 0xEF	; 239
    1d60:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    1d62:	a0 e4       	ldi	r26, 0x40	; 64
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e0 e4       	ldi	r30, 0x40	; 64
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8f 7d       	andi	r24, 0xDF	; 223
    1d6e:	8c 93       	st	X, r24
    1d70:	1d c0       	rjmp	.+58     	; 0x1dac <UART_init+0x1f8>
		break;
	case Even_Parity:
		SET_BIT(UCSRC,UPM0);
    1d72:	a0 e4       	ldi	r26, 0x40	; 64
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e0 e4       	ldi	r30, 0x40	; 64
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	80 61       	ori	r24, 0x10	; 16
    1d7e:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    1d80:	a0 e4       	ldi	r26, 0x40	; 64
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e0 e4       	ldi	r30, 0x40	; 64
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	8f 7d       	andi	r24, 0xDF	; 223
    1d8c:	8c 93       	st	X, r24
    1d8e:	0e c0       	rjmp	.+28     	; 0x1dac <UART_init+0x1f8>
		break;
	case Odd_Parity:
		SET_BIT(UCSRC,UPM0);
    1d90:	a0 e4       	ldi	r26, 0x40	; 64
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e0 e4       	ldi	r30, 0x40	; 64
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 61       	ori	r24, 0x10	; 16
    1d9c:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    1d9e:	a0 e4       	ldi	r26, 0x40	; 64
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e0 e4       	ldi	r30, 0x40	; 64
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 62       	ori	r24, 0x20	; 32
    1daa:	8c 93       	st	X, r24
		break;
	}
	/*UART stop bit coditions*/
	switch(UART_USART_Configuration_Ptr->UART_STOP_BIT_NUMBER)
    1dac:	eb 81       	ldd	r30, Y+3	; 0x03
    1dae:	fc 81       	ldd	r31, Y+4	; 0x04
    1db0:	86 81       	ldd	r24, Z+6	; 0x06
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3e 83       	std	Y+6, r19	; 0x06
    1db8:	2d 83       	std	Y+5, r18	; 0x05
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	00 97       	sbiw	r24, 0x00	; 0
    1dc0:	31 f0       	breq	.+12     	; 0x1dce <UART_init+0x21a>
    1dc2:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc4:	3e 81       	ldd	r19, Y+6	; 0x06
    1dc6:	21 30       	cpi	r18, 0x01	; 1
    1dc8:	31 05       	cpc	r19, r1
    1dca:	49 f0       	breq	.+18     	; 0x1dde <UART_init+0x22a>
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <UART_init+0x238>
	{
		case OneBit:
			CLEAR_BIT(UCSRC,USBS);
    1dce:	a0 e4       	ldi	r26, 0x40	; 64
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e0 e4       	ldi	r30, 0x40	; 64
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	87 7f       	andi	r24, 0xF7	; 247
    1dda:	8c 93       	st	X, r24
    1ddc:	07 c0       	rjmp	.+14     	; 0x1dec <UART_init+0x238>
			break;
		case TwoBit:
			SET_BIT(UCSRC,USBS);
    1dde:	a0 e4       	ldi	r26, 0x40	; 64
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e0 e4       	ldi	r30, 0x40	; 64
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	88 60       	ori	r24, 0x08	; 8
    1dea:	8c 93       	st	X, r24
			break;
	}
	/*F_CPU is already declared quantity*/
	/*System Frequency must be 8 times greater than Baud rate*/
	UBRR_value = (uint16)(((F_CPU)/(UART_USART_Configuration_Ptr->UART_BAUDRATE * 8UL))-1);
    1dec:	eb 81       	ldd	r30, Y+3	; 0x03
    1dee:	fc 81       	ldd	r31, Y+4	; 0x04
    1df0:	81 81       	ldd	r24, Z+1	; 0x01
    1df2:	92 81       	ldd	r25, Z+2	; 0x02
    1df4:	a3 81       	ldd	r26, Z+3	; 0x03
    1df6:	b4 81       	ldd	r27, Z+4	; 0x04
    1df8:	88 0f       	add	r24, r24
    1dfa:	99 1f       	adc	r25, r25
    1dfc:	aa 1f       	adc	r26, r26
    1dfe:	bb 1f       	adc	r27, r27
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	aa 1f       	adc	r26, r26
    1e06:	bb 1f       	adc	r27, r27
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	9c 01       	movw	r18, r24
    1e12:	ad 01       	movw	r20, r26
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	92 e1       	ldi	r25, 0x12	; 18
    1e18:	aa e7       	ldi	r26, 0x7A	; 122
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <__udivmodsi4>
    1e24:	da 01       	movw	r26, r20
    1e26:	c9 01       	movw	r24, r18
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = UBRR_value>>8;
    1e2e:	e0 e4       	ldi	r30, 0x40	; 64
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	89 2f       	mov	r24, r25
    1e38:	99 27       	eor	r25, r25
    1e3a:	80 83       	st	Z, r24
	UBRRL = UBRR_value;
    1e3c:	e9 e2       	ldi	r30, 0x29	; 41
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	80 83       	st	Z, r24
}
    1e44:	2c 96       	adiw	r28, 0x0c	; 12
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	cf 91       	pop	r28
    1e52:	df 91       	pop	r29
    1e54:	08 95       	ret

00001e56 <UART_receiveByte>:
 * [Returns]:
 * 				Received Data
 *
 */
uint8 UART_receiveByte(void)
{
    1e56:	df 93       	push	r29
    1e58:	cf 93       	push	r28
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC)); /*while receiving isn't complete (flag != 1)*/
    1e5e:	eb e2       	ldi	r30, 0x2B	; 43
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	88 23       	and	r24, r24
    1e66:	dc f7       	brge	.-10     	; 0x1e5e <UART_receiveByte+0x8>
	/*if there is no frame error or parity error*/
	//if(BIT_IS_CLEAR(UCSRA,PE) && BIT_IS_CLEAR(UCSRA,FE))
		return UDR;
    1e68:	ec e2       	ldi	r30, 0x2C	; 44
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
}
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <UART_sendByte>:
 * [Inputs]:		the data needed to be transmitted
 *
 * [No Returns]:
 */
void UART_sendByte(uint8 data)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE)); /*while UDR register is not empty*/
    1e80:	eb e2       	ldi	r30, 0x2B	; 43
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	80 72       	andi	r24, 0x20	; 32
    1e8c:	90 70       	andi	r25, 0x00	; 0
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	b9 f3       	breq	.-18     	; 0x1e80 <UART_sendByte+0xc>
	UDR = data;
    1e92:	ec e2       	ldi	r30, 0x2C	; 44
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC)); /*while transmission isn't complete (flag != 1)*/
    1e9a:	eb e2       	ldi	r30, 0x2B	; 43
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	80 74       	andi	r24, 0x40	; 64
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	b9 f3       	breq	.-18     	; 0x1e9a <UART_sendByte+0x26>
	SET_BIT(UCSRA,TXC);	/*clear complete transmission flag*/
    1eac:	ab e2       	ldi	r26, 0x2B	; 43
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	eb e2       	ldi	r30, 0x2B	; 43
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	80 64       	ori	r24, 0x40	; 64
    1eb8:	8c 93       	st	X, r24
}
    1eba:	0f 90       	pop	r0
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <UART_sendString>:
 * [Inputs]:		pointer to the string wanted to be transmitted
 *
 * [No Returns]:
 */
void UART_sendString(const char* string)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <UART_sendString+0x6>
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	9b 83       	std	Y+3, r25	; 0x03
    1ed0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    1ed2:	19 82       	std	Y+1, r1	; 0x01
    1ed4:	0e c0       	rjmp	.+28     	; 0x1ef2 <UART_sendString+0x30>
	/*transmit the string character by character*/
	while(string[counter] != '\0')
	{
		UART_sendByte(string[counter]);
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ede:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	e2 0f       	add	r30, r18
    1ee4:	f3 1f       	adc	r31, r19
    1ee6:	80 81       	ld	r24, Z
    1ee8:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <UART_sendByte>
		counter++;
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	8f 5f       	subi	r24, 0xFF	; 255
    1ef0:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const char* string)
{
	uint8 counter=0;
	/*transmit the string character by character*/
	while(string[counter] != '\0')
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	9b 81       	ldd	r25, Y+3	; 0x03
    1efc:	fc 01       	movw	r30, r24
    1efe:	e2 0f       	add	r30, r18
    1f00:	f3 1f       	adc	r31, r19
    1f02:	80 81       	ld	r24, Z
    1f04:	88 23       	and	r24, r24
    1f06:	39 f7       	brne	.-50     	; 0x1ed6 <UART_sendString+0x14>
	{
		UART_sendByte(string[counter]);
		counter++;
	}
}
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <UART_receiveString>:
 * [Inputs]:		pointer to the string wanted to be received to store it in the address of the pointer
 *
 * [No Returns]:
 */
void UART_receiveString(char* string)
{
    1f14:	0f 93       	push	r16
    1f16:	1f 93       	push	r17
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <UART_receiveString+0xa>
    1f1e:	0f 92       	push	r0
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	9b 83       	std	Y+3, r25	; 0x03
    1f26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    1f28:	19 82       	std	Y+1, r1	; 0x01
	string[counter] = UART_receiveByte();
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	9b 81       	ldd	r25, Y+3	; 0x03
    1f34:	8c 01       	movw	r16, r24
    1f36:	02 0f       	add	r16, r18
    1f38:	13 1f       	adc	r17, r19
    1f3a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
    1f3e:	f8 01       	movw	r30, r16
    1f40:	80 83       	st	Z, r24
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <UART_receiveString+0x4e>
	/*===========================This loop is Re-configurable=============================*/
	/*'#' is pre-agreement character chosen between the transimitter and the receiver*/
	/*to tell the end of the string*/
	while(string[counter] != '#')
	{
		counter++;
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
    1f46:	8f 5f       	subi	r24, 0xFF	; 255
    1f48:	89 83       	std	Y+1, r24	; 0x01
		string[counter] = UART_receiveByte();
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	28 2f       	mov	r18, r24
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	8c 01       	movw	r16, r24
    1f56:	02 0f       	add	r16, r18
    1f58:	13 1f       	adc	r17, r19
    1f5a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <UART_receiveByte>
    1f5e:	f8 01       	movw	r30, r16
    1f60:	80 83       	st	Z, r24
	string[counter] = UART_receiveByte();
	/*receive the string character by character*/
	/*===========================This loop is Re-configurable=============================*/
	/*'#' is pre-agreement character chosen between the transimitter and the receiver*/
	/*to tell the end of the string*/
	while(string[counter] != '#')
    1f62:	89 81       	ldd	r24, Y+1	; 0x01
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	e2 0f       	add	r30, r18
    1f70:	f3 1f       	adc	r31, r19
    1f72:	80 81       	ld	r24, Z
    1f74:	83 32       	cpi	r24, 0x23	; 35
    1f76:	31 f7       	brne	.-52     	; 0x1f44 <UART_receiveString+0x30>
	{
		counter++;
		string[counter] = UART_receiveByte();
	}
	string[counter]='\0';
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	fc 01       	movw	r30, r24
    1f84:	e2 0f       	add	r30, r18
    1f86:	f3 1f       	adc	r31, r19
    1f88:	10 82       	st	Z, r1
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	08 95       	ret

00001f9a <__udivmodhi4>:
    1f9a:	aa 1b       	sub	r26, r26
    1f9c:	bb 1b       	sub	r27, r27
    1f9e:	51 e1       	ldi	r21, 0x11	; 17
    1fa0:	07 c0       	rjmp	.+14     	; 0x1fb0 <__udivmodhi4_ep>

00001fa2 <__udivmodhi4_loop>:
    1fa2:	aa 1f       	adc	r26, r26
    1fa4:	bb 1f       	adc	r27, r27
    1fa6:	a6 17       	cp	r26, r22
    1fa8:	b7 07       	cpc	r27, r23
    1faa:	10 f0       	brcs	.+4      	; 0x1fb0 <__udivmodhi4_ep>
    1fac:	a6 1b       	sub	r26, r22
    1fae:	b7 0b       	sbc	r27, r23

00001fb0 <__udivmodhi4_ep>:
    1fb0:	88 1f       	adc	r24, r24
    1fb2:	99 1f       	adc	r25, r25
    1fb4:	5a 95       	dec	r21
    1fb6:	a9 f7       	brne	.-22     	; 0x1fa2 <__udivmodhi4_loop>
    1fb8:	80 95       	com	r24
    1fba:	90 95       	com	r25
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	08 95       	ret

00001fc2 <__udivmodsi4>:
    1fc2:	a1 e2       	ldi	r26, 0x21	; 33
    1fc4:	1a 2e       	mov	r1, r26
    1fc6:	aa 1b       	sub	r26, r26
    1fc8:	bb 1b       	sub	r27, r27
    1fca:	fd 01       	movw	r30, r26
    1fcc:	0d c0       	rjmp	.+26     	; 0x1fe8 <__udivmodsi4_ep>

00001fce <__udivmodsi4_loop>:
    1fce:	aa 1f       	adc	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	ee 1f       	adc	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	a2 17       	cp	r26, r18
    1fd8:	b3 07       	cpc	r27, r19
    1fda:	e4 07       	cpc	r30, r20
    1fdc:	f5 07       	cpc	r31, r21
    1fde:	20 f0       	brcs	.+8      	; 0x1fe8 <__udivmodsi4_ep>
    1fe0:	a2 1b       	sub	r26, r18
    1fe2:	b3 0b       	sbc	r27, r19
    1fe4:	e4 0b       	sbc	r30, r20
    1fe6:	f5 0b       	sbc	r31, r21

00001fe8 <__udivmodsi4_ep>:
    1fe8:	66 1f       	adc	r22, r22
    1fea:	77 1f       	adc	r23, r23
    1fec:	88 1f       	adc	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	1a 94       	dec	r1
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <__udivmodsi4_loop>
    1ff4:	60 95       	com	r22
    1ff6:	70 95       	com	r23
    1ff8:	80 95       	com	r24
    1ffa:	90 95       	com	r25
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	ac 01       	movw	r20, r24
    2000:	bd 01       	movw	r22, r26
    2002:	cf 01       	movw	r24, r30
    2004:	08 95       	ret

00002006 <_exit>:
    2006:	f8 94       	cli

00002008 <__stop_program>:
    2008:	ff cf       	rjmp	.-2      	; 0x2008 <__stop_program>
